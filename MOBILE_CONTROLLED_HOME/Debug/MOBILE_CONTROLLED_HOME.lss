
MOBILE_CONTROLLED_HOME.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002dba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002aa  00800060  00002dba  00002e4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080030a  0080030a  000030f8  2**0
                  ALLOC
  3 .stab         00002928  00000000  00000000  000030f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d99  00000000  00000000  00005a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000067b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000068f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006a69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000086b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000959d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a34c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a4ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a739  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000af07  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea eb       	ldi	r30, 0xBA	; 186
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 30       	cpi	r26, 0x0A	; 10
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	aa e0       	ldi	r26, 0x0A	; 10
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 30       	cpi	r26, 0x0B	; 11
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <main>
      8a:	0c 94 db 16 	jmp	0x2db6	; 0x2db6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a4 16 	jmp	0x2d48	; 0x2d48 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e3       	ldi	r26, 0x3A	; 58
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c0 16 	jmp	0x2d80	; 0x2d80 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b0 16 	jmp	0x2d60	; 0x2d60 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 cc 16 	jmp	0x2d98	; 0x2d98 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b0 16 	jmp	0x2d60	; 0x2d60 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 cc 16 	jmp	0x2d98	; 0x2d98 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a4 16 	jmp	0x2d48	; 0x2d48 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e3       	ldi	r24, 0x3A	; 58
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c0 16 	jmp	0x2d80	; 0x2d80 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b0 16 	jmp	0x2d60	; 0x2d60 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 cc 16 	jmp	0x2d98	; 0x2d98 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b0 16 	jmp	0x2d60	; 0x2d60 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 cc 16 	jmp	0x2d98	; 0x2d98 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b0 16 	jmp	0x2d60	; 0x2d60 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 cc 16 	jmp	0x2d98	; 0x2d98 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 b4 16 	jmp	0x2d68	; 0x2d68 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d0 16 	jmp	0x2da0	; 0x2da0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <CLCD_voidSendData>:
#include "CLCD_interface.h"
#include "CLCD_private.h"


void CLCD_voidSendData(u8 Copy_u8Data)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2f 97       	sbiw	r28, 0x0f	; 15
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8f 87       	std	Y+15, r24	; 0x0f
	//RS -> 1 SEND COMMAND
	DIO_voidSetPinVal(CTRL_PORT,RS,PIN_VAL_HIGH);
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	41 e0       	ldi	r20, 0x01	; 1
     b62:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_voidSetPinVal>
	//RW -> 0 SEND COMMAND
	DIO_voidSetPinVal(CTRL_PORT,RW,PIN_VAL_LOW);
     b66:	83 e0       	ldi	r24, 0x03	; 3
     b68:	61 e0       	ldi	r22, 0x01	; 1
     b6a:	40 e0       	ldi	r20, 0x00	; 0
     b6c:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_voidSetPinVal>
	//SET COMMAND TO DATA PORT
	DIO_voidSetPortVal(DATA_PORT,Copy_u8Data);
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	6f 85       	ldd	r22, Y+15	; 0x0f
     b74:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <DIO_voidSetPortVal>
	DIO_voidSetPinVal(CTRL_PORT,E,PIN_VAL_HIGH);
     b78:	83 e0       	ldi	r24, 0x03	; 3
     b7a:	62 e0       	ldi	r22, 0x02	; 2
     b7c:	41 e0       	ldi	r20, 0x01	; 1
     b7e:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_voidSetPinVal>
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	a0 e8       	ldi	r26, 0x80	; 128
     b88:	bf e3       	ldi	r27, 0x3F	; 63
     b8a:	8b 87       	std	Y+11, r24	; 0x0b
     b8c:	9c 87       	std	Y+12, r25	; 0x0c
     b8e:	ad 87       	std	Y+13, r26	; 0x0d
     b90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b92:	6b 85       	ldd	r22, Y+11	; 0x0b
     b94:	7c 85       	ldd	r23, Y+12	; 0x0c
     b96:	8d 85       	ldd	r24, Y+13	; 0x0d
     b98:	9e 85       	ldd	r25, Y+14	; 0x0e
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	4a ef       	ldi	r20, 0xFA	; 250
     ba0:	54 e4       	ldi	r21, 0x44	; 68
     ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ba6:	dc 01       	movw	r26, r24
     ba8:	cb 01       	movw	r24, r22
     baa:	8f 83       	std	Y+7, r24	; 0x07
     bac:	98 87       	std	Y+8, r25	; 0x08
     bae:	a9 87       	std	Y+9, r26	; 0x09
     bb0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bb2:	6f 81       	ldd	r22, Y+7	; 0x07
     bb4:	78 85       	ldd	r23, Y+8	; 0x08
     bb6:	89 85       	ldd	r24, Y+9	; 0x09
     bb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	40 e8       	ldi	r20, 0x80	; 128
     bc0:	5f e3       	ldi	r21, 0x3F	; 63
     bc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bc6:	88 23       	and	r24, r24
     bc8:	2c f4       	brge	.+10     	; 0xbd4 <CLCD_voidSendData+0x8e>
		__ticks = 1;
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	9e 83       	std	Y+6, r25	; 0x06
     bd0:	8d 83       	std	Y+5, r24	; 0x05
     bd2:	3f c0       	rjmp	.+126    	; 0xc52 <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
     bd4:	6f 81       	ldd	r22, Y+7	; 0x07
     bd6:	78 85       	ldd	r23, Y+8	; 0x08
     bd8:	89 85       	ldd	r24, Y+9	; 0x09
     bda:	9a 85       	ldd	r25, Y+10	; 0x0a
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	3f ef       	ldi	r19, 0xFF	; 255
     be0:	4f e7       	ldi	r20, 0x7F	; 127
     be2:	57 e4       	ldi	r21, 0x47	; 71
     be4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     be8:	18 16       	cp	r1, r24
     bea:	4c f5       	brge	.+82     	; 0xc3e <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bec:	6b 85       	ldd	r22, Y+11	; 0x0b
     bee:	7c 85       	ldd	r23, Y+12	; 0x0c
     bf0:	8d 85       	ldd	r24, Y+13	; 0x0d
     bf2:	9e 85       	ldd	r25, Y+14	; 0x0e
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	40 e2       	ldi	r20, 0x20	; 32
     bfa:	51 e4       	ldi	r21, 0x41	; 65
     bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c00:	dc 01       	movw	r26, r24
     c02:	cb 01       	movw	r24, r22
     c04:	bc 01       	movw	r22, r24
     c06:	cd 01       	movw	r24, r26
     c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c0c:	dc 01       	movw	r26, r24
     c0e:	cb 01       	movw	r24, r22
     c10:	9e 83       	std	Y+6, r25	; 0x06
     c12:	8d 83       	std	Y+5, r24	; 0x05
     c14:	0f c0       	rjmp	.+30     	; 0xc34 <CLCD_voidSendData+0xee>
     c16:	88 ec       	ldi	r24, 0xC8	; 200
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	9c 83       	std	Y+4, r25	; 0x04
     c1c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c1e:	8b 81       	ldd	r24, Y+3	; 0x03
     c20:	9c 81       	ldd	r25, Y+4	; 0x04
     c22:	01 97       	sbiw	r24, 0x01	; 1
     c24:	f1 f7       	brne	.-4      	; 0xc22 <CLCD_voidSendData+0xdc>
     c26:	9c 83       	std	Y+4, r25	; 0x04
     c28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c2a:	8d 81       	ldd	r24, Y+5	; 0x05
     c2c:	9e 81       	ldd	r25, Y+6	; 0x06
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	9e 83       	std	Y+6, r25	; 0x06
     c32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c34:	8d 81       	ldd	r24, Y+5	; 0x05
     c36:	9e 81       	ldd	r25, Y+6	; 0x06
     c38:	00 97       	sbiw	r24, 0x00	; 0
     c3a:	69 f7       	brne	.-38     	; 0xc16 <CLCD_voidSendData+0xd0>
     c3c:	14 c0       	rjmp	.+40     	; 0xc66 <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c3e:	6f 81       	ldd	r22, Y+7	; 0x07
     c40:	78 85       	ldd	r23, Y+8	; 0x08
     c42:	89 85       	ldd	r24, Y+9	; 0x09
     c44:	9a 85       	ldd	r25, Y+10	; 0x0a
     c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c4a:	dc 01       	movw	r26, r24
     c4c:	cb 01       	movw	r24, r22
     c4e:	9e 83       	std	Y+6, r25	; 0x06
     c50:	8d 83       	std	Y+5, r24	; 0x05
     c52:	8d 81       	ldd	r24, Y+5	; 0x05
     c54:	9e 81       	ldd	r25, Y+6	; 0x06
     c56:	9a 83       	std	Y+2, r25	; 0x02
     c58:	89 83       	std	Y+1, r24	; 0x01
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	9a 81       	ldd	r25, Y+2	; 0x02
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	f1 f7       	brne	.-4      	; 0xc5e <CLCD_voidSendData+0x118>
     c62:	9a 83       	std	Y+2, r25	; 0x02
     c64:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_voidSetPinVal(CTRL_PORT,E,PIN_VAL_LOW);
     c66:	83 e0       	ldi	r24, 0x03	; 3
     c68:	62 e0       	ldi	r22, 0x02	; 2
     c6a:	40 e0       	ldi	r20, 0x00	; 0
     c6c:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_voidSetPinVal>
}
     c70:	2f 96       	adiw	r28, 0x0f	; 15
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	de bf       	out	0x3e, r29	; 62
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	cd bf       	out	0x3d, r28	; 61
     c7c:	cf 91       	pop	r28
     c7e:	df 91       	pop	r29
     c80:	08 95       	ret

00000c82 <CLCD_voidSendCommand>:

void CLCD_voidSendCommand(u8 Copy_u8Command)
{
     c82:	df 93       	push	r29
     c84:	cf 93       	push	r28
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	2f 97       	sbiw	r28, 0x0f	; 15
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	cd bf       	out	0x3d, r28	; 61
     c96:	8f 87       	std	Y+15, r24	; 0x0f
	//RS -> 0 SEND COMMAND
	DIO_voidSetPinVal(CTRL_PORT,RS,PIN_VAL_LOW);
     c98:	83 e0       	ldi	r24, 0x03	; 3
     c9a:	60 e0       	ldi	r22, 0x00	; 0
     c9c:	40 e0       	ldi	r20, 0x00	; 0
     c9e:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_voidSetPinVal>
	//RW -> 0 SEND COMMAND
	DIO_voidSetPinVal(CTRL_PORT,RW,PIN_VAL_LOW);
     ca2:	83 e0       	ldi	r24, 0x03	; 3
     ca4:	61 e0       	ldi	r22, 0x01	; 1
     ca6:	40 e0       	ldi	r20, 0x00	; 0
     ca8:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_voidSetPinVal>
	//SET COMMAND TO DATA PORT
	DIO_voidSetPortVal(DATA_PORT,Copy_u8Command);
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	6f 85       	ldd	r22, Y+15	; 0x0f
     cb0:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <DIO_voidSetPortVal>

	DIO_voidSetPinVal(CTRL_PORT,E,PIN_VAL_HIGH);
     cb4:	83 e0       	ldi	r24, 0x03	; 3
     cb6:	62 e0       	ldi	r22, 0x02	; 2
     cb8:	41 e0       	ldi	r20, 0x01	; 1
     cba:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_voidSetPinVal>
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	a0 e8       	ldi	r26, 0x80	; 128
     cc4:	bf e3       	ldi	r27, 0x3F	; 63
     cc6:	8b 87       	std	Y+11, r24	; 0x0b
     cc8:	9c 87       	std	Y+12, r25	; 0x0c
     cca:	ad 87       	std	Y+13, r26	; 0x0d
     ccc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cce:	6b 85       	ldd	r22, Y+11	; 0x0b
     cd0:	7c 85       	ldd	r23, Y+12	; 0x0c
     cd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     cd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	4a ef       	ldi	r20, 0xFA	; 250
     cdc:	54 e4       	ldi	r21, 0x44	; 68
     cde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ce2:	dc 01       	movw	r26, r24
     ce4:	cb 01       	movw	r24, r22
     ce6:	8f 83       	std	Y+7, r24	; 0x07
     ce8:	98 87       	std	Y+8, r25	; 0x08
     cea:	a9 87       	std	Y+9, r26	; 0x09
     cec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cee:	6f 81       	ldd	r22, Y+7	; 0x07
     cf0:	78 85       	ldd	r23, Y+8	; 0x08
     cf2:	89 85       	ldd	r24, Y+9	; 0x09
     cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	40 e8       	ldi	r20, 0x80	; 128
     cfc:	5f e3       	ldi	r21, 0x3F	; 63
     cfe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d02:	88 23       	and	r24, r24
     d04:	2c f4       	brge	.+10     	; 0xd10 <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	9e 83       	std	Y+6, r25	; 0x06
     d0c:	8d 83       	std	Y+5, r24	; 0x05
     d0e:	3f c0       	rjmp	.+126    	; 0xd8e <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     d10:	6f 81       	ldd	r22, Y+7	; 0x07
     d12:	78 85       	ldd	r23, Y+8	; 0x08
     d14:	89 85       	ldd	r24, Y+9	; 0x09
     d16:	9a 85       	ldd	r25, Y+10	; 0x0a
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	3f ef       	ldi	r19, 0xFF	; 255
     d1c:	4f e7       	ldi	r20, 0x7F	; 127
     d1e:	57 e4       	ldi	r21, 0x47	; 71
     d20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d24:	18 16       	cp	r1, r24
     d26:	4c f5       	brge	.+82     	; 0xd7a <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d28:	6b 85       	ldd	r22, Y+11	; 0x0b
     d2a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	40 e2       	ldi	r20, 0x20	; 32
     d36:	51 e4       	ldi	r21, 0x41	; 65
     d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d3c:	dc 01       	movw	r26, r24
     d3e:	cb 01       	movw	r24, r22
     d40:	bc 01       	movw	r22, r24
     d42:	cd 01       	movw	r24, r26
     d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d48:	dc 01       	movw	r26, r24
     d4a:	cb 01       	movw	r24, r22
     d4c:	9e 83       	std	Y+6, r25	; 0x06
     d4e:	8d 83       	std	Y+5, r24	; 0x05
     d50:	0f c0       	rjmp	.+30     	; 0xd70 <CLCD_voidSendCommand+0xee>
     d52:	88 ec       	ldi	r24, 0xC8	; 200
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	9c 83       	std	Y+4, r25	; 0x04
     d58:	8b 83       	std	Y+3, r24	; 0x03
     d5a:	8b 81       	ldd	r24, Y+3	; 0x03
     d5c:	9c 81       	ldd	r25, Y+4	; 0x04
     d5e:	01 97       	sbiw	r24, 0x01	; 1
     d60:	f1 f7       	brne	.-4      	; 0xd5e <CLCD_voidSendCommand+0xdc>
     d62:	9c 83       	std	Y+4, r25	; 0x04
     d64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d66:	8d 81       	ldd	r24, Y+5	; 0x05
     d68:	9e 81       	ldd	r25, Y+6	; 0x06
     d6a:	01 97       	sbiw	r24, 0x01	; 1
     d6c:	9e 83       	std	Y+6, r25	; 0x06
     d6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d70:	8d 81       	ldd	r24, Y+5	; 0x05
     d72:	9e 81       	ldd	r25, Y+6	; 0x06
     d74:	00 97       	sbiw	r24, 0x00	; 0
     d76:	69 f7       	brne	.-38     	; 0xd52 <CLCD_voidSendCommand+0xd0>
     d78:	14 c0       	rjmp	.+40     	; 0xda2 <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d7a:	6f 81       	ldd	r22, Y+7	; 0x07
     d7c:	78 85       	ldd	r23, Y+8	; 0x08
     d7e:	89 85       	ldd	r24, Y+9	; 0x09
     d80:	9a 85       	ldd	r25, Y+10	; 0x0a
     d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d86:	dc 01       	movw	r26, r24
     d88:	cb 01       	movw	r24, r22
     d8a:	9e 83       	std	Y+6, r25	; 0x06
     d8c:	8d 83       	std	Y+5, r24	; 0x05
     d8e:	8d 81       	ldd	r24, Y+5	; 0x05
     d90:	9e 81       	ldd	r25, Y+6	; 0x06
     d92:	9a 83       	std	Y+2, r25	; 0x02
     d94:	89 83       	std	Y+1, r24	; 0x01
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	9a 81       	ldd	r25, Y+2	; 0x02
     d9a:	01 97       	sbiw	r24, 0x01	; 1
     d9c:	f1 f7       	brne	.-4      	; 0xd9a <CLCD_voidSendCommand+0x118>
     d9e:	9a 83       	std	Y+2, r25	; 0x02
     da0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_voidSetPinVal(CTRL_PORT,E,PIN_VAL_LOW);
     da2:	83 e0       	ldi	r24, 0x03	; 3
     da4:	62 e0       	ldi	r22, 0x02	; 2
     da6:	40 e0       	ldi	r20, 0x00	; 0
     da8:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_voidSetPinVal>
}
     dac:	2f 96       	adiw	r28, 0x0f	; 15
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	f8 94       	cli
     db2:	de bf       	out	0x3e, r29	; 62
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	cd bf       	out	0x3d, r28	; 61
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	08 95       	ret

00000dbe <CLCD_voidInit>:

void CLCD_voidInit(void)
{
     dbe:	df 93       	push	r29
     dc0:	cf 93       	push	r28
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
     dc6:	e8 97       	sbiw	r28, 0x38	; 56
     dc8:	0f b6       	in	r0, 0x3f	; 63
     dca:	f8 94       	cli
     dcc:	de bf       	out	0x3e, r29	; 62
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	cd bf       	out	0x3d, r28	; 61
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	a0 e2       	ldi	r26, 0x20	; 32
     dd8:	b2 e4       	ldi	r27, 0x42	; 66
     dda:	8d ab       	std	Y+53, r24	; 0x35
     ddc:	9e ab       	std	Y+54, r25	; 0x36
     dde:	af ab       	std	Y+55, r26	; 0x37
     de0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     de2:	6d a9       	ldd	r22, Y+53	; 0x35
     de4:	7e a9       	ldd	r23, Y+54	; 0x36
     de6:	8f a9       	ldd	r24, Y+55	; 0x37
     de8:	98 ad       	ldd	r25, Y+56	; 0x38
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	4a ef       	ldi	r20, 0xFA	; 250
     df0:	54 e4       	ldi	r21, 0x44	; 68
     df2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     df6:	dc 01       	movw	r26, r24
     df8:	cb 01       	movw	r24, r22
     dfa:	89 ab       	std	Y+49, r24	; 0x31
     dfc:	9a ab       	std	Y+50, r25	; 0x32
     dfe:	ab ab       	std	Y+51, r26	; 0x33
     e00:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     e02:	69 a9       	ldd	r22, Y+49	; 0x31
     e04:	7a a9       	ldd	r23, Y+50	; 0x32
     e06:	8b a9       	ldd	r24, Y+51	; 0x33
     e08:	9c a9       	ldd	r25, Y+52	; 0x34
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	40 e8       	ldi	r20, 0x80	; 128
     e10:	5f e3       	ldi	r21, 0x3F	; 63
     e12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e16:	88 23       	and	r24, r24
     e18:	2c f4       	brge	.+10     	; 0xe24 <CLCD_voidInit+0x66>
		__ticks = 1;
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	98 ab       	std	Y+48, r25	; 0x30
     e20:	8f a7       	std	Y+47, r24	; 0x2f
     e22:	3f c0       	rjmp	.+126    	; 0xea2 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
     e24:	69 a9       	ldd	r22, Y+49	; 0x31
     e26:	7a a9       	ldd	r23, Y+50	; 0x32
     e28:	8b a9       	ldd	r24, Y+51	; 0x33
     e2a:	9c a9       	ldd	r25, Y+52	; 0x34
     e2c:	20 e0       	ldi	r18, 0x00	; 0
     e2e:	3f ef       	ldi	r19, 0xFF	; 255
     e30:	4f e7       	ldi	r20, 0x7F	; 127
     e32:	57 e4       	ldi	r21, 0x47	; 71
     e34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e38:	18 16       	cp	r1, r24
     e3a:	4c f5       	brge	.+82     	; 0xe8e <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e3c:	6d a9       	ldd	r22, Y+53	; 0x35
     e3e:	7e a9       	ldd	r23, Y+54	; 0x36
     e40:	8f a9       	ldd	r24, Y+55	; 0x37
     e42:	98 ad       	ldd	r25, Y+56	; 0x38
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	40 e2       	ldi	r20, 0x20	; 32
     e4a:	51 e4       	ldi	r21, 0x41	; 65
     e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e50:	dc 01       	movw	r26, r24
     e52:	cb 01       	movw	r24, r22
     e54:	bc 01       	movw	r22, r24
     e56:	cd 01       	movw	r24, r26
     e58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e5c:	dc 01       	movw	r26, r24
     e5e:	cb 01       	movw	r24, r22
     e60:	98 ab       	std	Y+48, r25	; 0x30
     e62:	8f a7       	std	Y+47, r24	; 0x2f
     e64:	0f c0       	rjmp	.+30     	; 0xe84 <CLCD_voidInit+0xc6>
     e66:	88 ec       	ldi	r24, 0xC8	; 200
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	9e a7       	std	Y+46, r25	; 0x2e
     e6c:	8d a7       	std	Y+45, r24	; 0x2d
     e6e:	8d a5       	ldd	r24, Y+45	; 0x2d
     e70:	9e a5       	ldd	r25, Y+46	; 0x2e
     e72:	01 97       	sbiw	r24, 0x01	; 1
     e74:	f1 f7       	brne	.-4      	; 0xe72 <CLCD_voidInit+0xb4>
     e76:	9e a7       	std	Y+46, r25	; 0x2e
     e78:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e7a:	8f a5       	ldd	r24, Y+47	; 0x2f
     e7c:	98 a9       	ldd	r25, Y+48	; 0x30
     e7e:	01 97       	sbiw	r24, 0x01	; 1
     e80:	98 ab       	std	Y+48, r25	; 0x30
     e82:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e84:	8f a5       	ldd	r24, Y+47	; 0x2f
     e86:	98 a9       	ldd	r25, Y+48	; 0x30
     e88:	00 97       	sbiw	r24, 0x00	; 0
     e8a:	69 f7       	brne	.-38     	; 0xe66 <CLCD_voidInit+0xa8>
     e8c:	14 c0       	rjmp	.+40     	; 0xeb6 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e8e:	69 a9       	ldd	r22, Y+49	; 0x31
     e90:	7a a9       	ldd	r23, Y+50	; 0x32
     e92:	8b a9       	ldd	r24, Y+51	; 0x33
     e94:	9c a9       	ldd	r25, Y+52	; 0x34
     e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e9a:	dc 01       	movw	r26, r24
     e9c:	cb 01       	movw	r24, r22
     e9e:	98 ab       	std	Y+48, r25	; 0x30
     ea0:	8f a7       	std	Y+47, r24	; 0x2f
     ea2:	8f a5       	ldd	r24, Y+47	; 0x2f
     ea4:	98 a9       	ldd	r25, Y+48	; 0x30
     ea6:	9c a7       	std	Y+44, r25	; 0x2c
     ea8:	8b a7       	std	Y+43, r24	; 0x2b
     eaa:	8b a5       	ldd	r24, Y+43	; 0x2b
     eac:	9c a5       	ldd	r25, Y+44	; 0x2c
     eae:	01 97       	sbiw	r24, 0x01	; 1
     eb0:	f1 f7       	brne	.-4      	; 0xeae <CLCD_voidInit+0xf0>
     eb2:	9c a7       	std	Y+44, r25	; 0x2c
     eb4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(40);
	CLCD_voidSendCommand(0b00111000);
     eb6:	88 e3       	ldi	r24, 0x38	; 56
     eb8:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendCommand>
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	a0 e8       	ldi	r26, 0x80	; 128
     ec2:	bf e3       	ldi	r27, 0x3F	; 63
     ec4:	8f a3       	std	Y+39, r24	; 0x27
     ec6:	98 a7       	std	Y+40, r25	; 0x28
     ec8:	a9 a7       	std	Y+41, r26	; 0x29
     eca:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ecc:	6f a1       	ldd	r22, Y+39	; 0x27
     ece:	78 a5       	ldd	r23, Y+40	; 0x28
     ed0:	89 a5       	ldd	r24, Y+41	; 0x29
     ed2:	9a a5       	ldd	r25, Y+42	; 0x2a
     ed4:	20 e0       	ldi	r18, 0x00	; 0
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	4a ef       	ldi	r20, 0xFA	; 250
     eda:	54 e4       	ldi	r21, 0x44	; 68
     edc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ee0:	dc 01       	movw	r26, r24
     ee2:	cb 01       	movw	r24, r22
     ee4:	8b a3       	std	Y+35, r24	; 0x23
     ee6:	9c a3       	std	Y+36, r25	; 0x24
     ee8:	ad a3       	std	Y+37, r26	; 0x25
     eea:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     eec:	6b a1       	ldd	r22, Y+35	; 0x23
     eee:	7c a1       	ldd	r23, Y+36	; 0x24
     ef0:	8d a1       	ldd	r24, Y+37	; 0x25
     ef2:	9e a1       	ldd	r25, Y+38	; 0x26
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	40 e8       	ldi	r20, 0x80	; 128
     efa:	5f e3       	ldi	r21, 0x3F	; 63
     efc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f00:	88 23       	and	r24, r24
     f02:	2c f4       	brge	.+10     	; 0xf0e <CLCD_voidInit+0x150>
		__ticks = 1;
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	9a a3       	std	Y+34, r25	; 0x22
     f0a:	89 a3       	std	Y+33, r24	; 0x21
     f0c:	3f c0       	rjmp	.+126    	; 0xf8c <CLCD_voidInit+0x1ce>
	else if (__tmp > 65535)
     f0e:	6b a1       	ldd	r22, Y+35	; 0x23
     f10:	7c a1       	ldd	r23, Y+36	; 0x24
     f12:	8d a1       	ldd	r24, Y+37	; 0x25
     f14:	9e a1       	ldd	r25, Y+38	; 0x26
     f16:	20 e0       	ldi	r18, 0x00	; 0
     f18:	3f ef       	ldi	r19, 0xFF	; 255
     f1a:	4f e7       	ldi	r20, 0x7F	; 127
     f1c:	57 e4       	ldi	r21, 0x47	; 71
     f1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f22:	18 16       	cp	r1, r24
     f24:	4c f5       	brge	.+82     	; 0xf78 <CLCD_voidInit+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f26:	6f a1       	ldd	r22, Y+39	; 0x27
     f28:	78 a5       	ldd	r23, Y+40	; 0x28
     f2a:	89 a5       	ldd	r24, Y+41	; 0x29
     f2c:	9a a5       	ldd	r25, Y+42	; 0x2a
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	40 e2       	ldi	r20, 0x20	; 32
     f34:	51 e4       	ldi	r21, 0x41	; 65
     f36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f3a:	dc 01       	movw	r26, r24
     f3c:	cb 01       	movw	r24, r22
     f3e:	bc 01       	movw	r22, r24
     f40:	cd 01       	movw	r24, r26
     f42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f46:	dc 01       	movw	r26, r24
     f48:	cb 01       	movw	r24, r22
     f4a:	9a a3       	std	Y+34, r25	; 0x22
     f4c:	89 a3       	std	Y+33, r24	; 0x21
     f4e:	0f c0       	rjmp	.+30     	; 0xf6e <CLCD_voidInit+0x1b0>
     f50:	88 ec       	ldi	r24, 0xC8	; 200
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	98 a3       	std	Y+32, r25	; 0x20
     f56:	8f 8f       	std	Y+31, r24	; 0x1f
     f58:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f5a:	98 a1       	ldd	r25, Y+32	; 0x20
     f5c:	01 97       	sbiw	r24, 0x01	; 1
     f5e:	f1 f7       	brne	.-4      	; 0xf5c <CLCD_voidInit+0x19e>
     f60:	98 a3       	std	Y+32, r25	; 0x20
     f62:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f64:	89 a1       	ldd	r24, Y+33	; 0x21
     f66:	9a a1       	ldd	r25, Y+34	; 0x22
     f68:	01 97       	sbiw	r24, 0x01	; 1
     f6a:	9a a3       	std	Y+34, r25	; 0x22
     f6c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f6e:	89 a1       	ldd	r24, Y+33	; 0x21
     f70:	9a a1       	ldd	r25, Y+34	; 0x22
     f72:	00 97       	sbiw	r24, 0x00	; 0
     f74:	69 f7       	brne	.-38     	; 0xf50 <CLCD_voidInit+0x192>
     f76:	14 c0       	rjmp	.+40     	; 0xfa0 <CLCD_voidInit+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f78:	6b a1       	ldd	r22, Y+35	; 0x23
     f7a:	7c a1       	ldd	r23, Y+36	; 0x24
     f7c:	8d a1       	ldd	r24, Y+37	; 0x25
     f7e:	9e a1       	ldd	r25, Y+38	; 0x26
     f80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f84:	dc 01       	movw	r26, r24
     f86:	cb 01       	movw	r24, r22
     f88:	9a a3       	std	Y+34, r25	; 0x22
     f8a:	89 a3       	std	Y+33, r24	; 0x21
     f8c:	89 a1       	ldd	r24, Y+33	; 0x21
     f8e:	9a a1       	ldd	r25, Y+34	; 0x22
     f90:	9e 8f       	std	Y+30, r25	; 0x1e
     f92:	8d 8f       	std	Y+29, r24	; 0x1d
     f94:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f96:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f98:	01 97       	sbiw	r24, 0x01	; 1
     f9a:	f1 f7       	brne	.-4      	; 0xf98 <CLCD_voidInit+0x1da>
     f9c:	9e 8f       	std	Y+30, r25	; 0x1e
     f9e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	CLCD_voidSendCommand(0b00001100);
     fa0:	8c e0       	ldi	r24, 0x0C	; 12
     fa2:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendCommand>
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	a0 e8       	ldi	r26, 0x80	; 128
     fac:	bf e3       	ldi	r27, 0x3F	; 63
     fae:	89 8f       	std	Y+25, r24	; 0x19
     fb0:	9a 8f       	std	Y+26, r25	; 0x1a
     fb2:	ab 8f       	std	Y+27, r26	; 0x1b
     fb4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fb6:	69 8d       	ldd	r22, Y+25	; 0x19
     fb8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fba:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fbc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	4a ef       	ldi	r20, 0xFA	; 250
     fc4:	54 e4       	ldi	r21, 0x44	; 68
     fc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fca:	dc 01       	movw	r26, r24
     fcc:	cb 01       	movw	r24, r22
     fce:	8d 8b       	std	Y+21, r24	; 0x15
     fd0:	9e 8b       	std	Y+22, r25	; 0x16
     fd2:	af 8b       	std	Y+23, r26	; 0x17
     fd4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     fd6:	6d 89       	ldd	r22, Y+21	; 0x15
     fd8:	7e 89       	ldd	r23, Y+22	; 0x16
     fda:	8f 89       	ldd	r24, Y+23	; 0x17
     fdc:	98 8d       	ldd	r25, Y+24	; 0x18
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	40 e8       	ldi	r20, 0x80	; 128
     fe4:	5f e3       	ldi	r21, 0x3F	; 63
     fe6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fea:	88 23       	and	r24, r24
     fec:	2c f4       	brge	.+10     	; 0xff8 <CLCD_voidInit+0x23a>
		__ticks = 1;
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	9c 8b       	std	Y+20, r25	; 0x14
     ff4:	8b 8b       	std	Y+19, r24	; 0x13
     ff6:	3f c0       	rjmp	.+126    	; 0x1076 <CLCD_voidInit+0x2b8>
	else if (__tmp > 65535)
     ff8:	6d 89       	ldd	r22, Y+21	; 0x15
     ffa:	7e 89       	ldd	r23, Y+22	; 0x16
     ffc:	8f 89       	ldd	r24, Y+23	; 0x17
     ffe:	98 8d       	ldd	r25, Y+24	; 0x18
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	3f ef       	ldi	r19, 0xFF	; 255
    1004:	4f e7       	ldi	r20, 0x7F	; 127
    1006:	57 e4       	ldi	r21, 0x47	; 71
    1008:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    100c:	18 16       	cp	r1, r24
    100e:	4c f5       	brge	.+82     	; 0x1062 <CLCD_voidInit+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1010:	69 8d       	ldd	r22, Y+25	; 0x19
    1012:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1014:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1016:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1018:	20 e0       	ldi	r18, 0x00	; 0
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	40 e2       	ldi	r20, 0x20	; 32
    101e:	51 e4       	ldi	r21, 0x41	; 65
    1020:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1024:	dc 01       	movw	r26, r24
    1026:	cb 01       	movw	r24, r22
    1028:	bc 01       	movw	r22, r24
    102a:	cd 01       	movw	r24, r26
    102c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1030:	dc 01       	movw	r26, r24
    1032:	cb 01       	movw	r24, r22
    1034:	9c 8b       	std	Y+20, r25	; 0x14
    1036:	8b 8b       	std	Y+19, r24	; 0x13
    1038:	0f c0       	rjmp	.+30     	; 0x1058 <CLCD_voidInit+0x29a>
    103a:	88 ec       	ldi	r24, 0xC8	; 200
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	9a 8b       	std	Y+18, r25	; 0x12
    1040:	89 8b       	std	Y+17, r24	; 0x11
    1042:	89 89       	ldd	r24, Y+17	; 0x11
    1044:	9a 89       	ldd	r25, Y+18	; 0x12
    1046:	01 97       	sbiw	r24, 0x01	; 1
    1048:	f1 f7       	brne	.-4      	; 0x1046 <CLCD_voidInit+0x288>
    104a:	9a 8b       	std	Y+18, r25	; 0x12
    104c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    104e:	8b 89       	ldd	r24, Y+19	; 0x13
    1050:	9c 89       	ldd	r25, Y+20	; 0x14
    1052:	01 97       	sbiw	r24, 0x01	; 1
    1054:	9c 8b       	std	Y+20, r25	; 0x14
    1056:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1058:	8b 89       	ldd	r24, Y+19	; 0x13
    105a:	9c 89       	ldd	r25, Y+20	; 0x14
    105c:	00 97       	sbiw	r24, 0x00	; 0
    105e:	69 f7       	brne	.-38     	; 0x103a <CLCD_voidInit+0x27c>
    1060:	14 c0       	rjmp	.+40     	; 0x108a <CLCD_voidInit+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1062:	6d 89       	ldd	r22, Y+21	; 0x15
    1064:	7e 89       	ldd	r23, Y+22	; 0x16
    1066:	8f 89       	ldd	r24, Y+23	; 0x17
    1068:	98 8d       	ldd	r25, Y+24	; 0x18
    106a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    106e:	dc 01       	movw	r26, r24
    1070:	cb 01       	movw	r24, r22
    1072:	9c 8b       	std	Y+20, r25	; 0x14
    1074:	8b 8b       	std	Y+19, r24	; 0x13
    1076:	8b 89       	ldd	r24, Y+19	; 0x13
    1078:	9c 89       	ldd	r25, Y+20	; 0x14
    107a:	98 8b       	std	Y+16, r25	; 0x10
    107c:	8f 87       	std	Y+15, r24	; 0x0f
    107e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1080:	98 89       	ldd	r25, Y+16	; 0x10
    1082:	01 97       	sbiw	r24, 0x01	; 1
    1084:	f1 f7       	brne	.-4      	; 0x1082 <CLCD_voidInit+0x2c4>
    1086:	98 8b       	std	Y+16, r25	; 0x10
    1088:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	CLCD_voidSendCommand(0b00000001);
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendCommand>
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	a0 e0       	ldi	r26, 0x00	; 0
    1096:	b0 e4       	ldi	r27, 0x40	; 64
    1098:	8b 87       	std	Y+11, r24	; 0x0b
    109a:	9c 87       	std	Y+12, r25	; 0x0c
    109c:	ad 87       	std	Y+13, r26	; 0x0d
    109e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    10a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    10a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    10a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    10a8:	20 e0       	ldi	r18, 0x00	; 0
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	4a ef       	ldi	r20, 0xFA	; 250
    10ae:	54 e4       	ldi	r21, 0x44	; 68
    10b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10b4:	dc 01       	movw	r26, r24
    10b6:	cb 01       	movw	r24, r22
    10b8:	8f 83       	std	Y+7, r24	; 0x07
    10ba:	98 87       	std	Y+8, r25	; 0x08
    10bc:	a9 87       	std	Y+9, r26	; 0x09
    10be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10c0:	6f 81       	ldd	r22, Y+7	; 0x07
    10c2:	78 85       	ldd	r23, Y+8	; 0x08
    10c4:	89 85       	ldd	r24, Y+9	; 0x09
    10c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    10c8:	20 e0       	ldi	r18, 0x00	; 0
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	40 e8       	ldi	r20, 0x80	; 128
    10ce:	5f e3       	ldi	r21, 0x3F	; 63
    10d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10d4:	88 23       	and	r24, r24
    10d6:	2c f4       	brge	.+10     	; 0x10e2 <CLCD_voidInit+0x324>
		__ticks = 1;
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	9e 83       	std	Y+6, r25	; 0x06
    10de:	8d 83       	std	Y+5, r24	; 0x05
    10e0:	3f c0       	rjmp	.+126    	; 0x1160 <CLCD_voidInit+0x3a2>
	else if (__tmp > 65535)
    10e2:	6f 81       	ldd	r22, Y+7	; 0x07
    10e4:	78 85       	ldd	r23, Y+8	; 0x08
    10e6:	89 85       	ldd	r24, Y+9	; 0x09
    10e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ea:	20 e0       	ldi	r18, 0x00	; 0
    10ec:	3f ef       	ldi	r19, 0xFF	; 255
    10ee:	4f e7       	ldi	r20, 0x7F	; 127
    10f0:	57 e4       	ldi	r21, 0x47	; 71
    10f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10f6:	18 16       	cp	r1, r24
    10f8:	4c f5       	brge	.+82     	; 0x114c <CLCD_voidInit+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    10fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    10fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1100:	9e 85       	ldd	r25, Y+14	; 0x0e
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	40 e2       	ldi	r20, 0x20	; 32
    1108:	51 e4       	ldi	r21, 0x41	; 65
    110a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    110e:	dc 01       	movw	r26, r24
    1110:	cb 01       	movw	r24, r22
    1112:	bc 01       	movw	r22, r24
    1114:	cd 01       	movw	r24, r26
    1116:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    111a:	dc 01       	movw	r26, r24
    111c:	cb 01       	movw	r24, r22
    111e:	9e 83       	std	Y+6, r25	; 0x06
    1120:	8d 83       	std	Y+5, r24	; 0x05
    1122:	0f c0       	rjmp	.+30     	; 0x1142 <CLCD_voidInit+0x384>
    1124:	88 ec       	ldi	r24, 0xC8	; 200
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	9c 83       	std	Y+4, r25	; 0x04
    112a:	8b 83       	std	Y+3, r24	; 0x03
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	9c 81       	ldd	r25, Y+4	; 0x04
    1130:	01 97       	sbiw	r24, 0x01	; 1
    1132:	f1 f7       	brne	.-4      	; 0x1130 <CLCD_voidInit+0x372>
    1134:	9c 83       	std	Y+4, r25	; 0x04
    1136:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1138:	8d 81       	ldd	r24, Y+5	; 0x05
    113a:	9e 81       	ldd	r25, Y+6	; 0x06
    113c:	01 97       	sbiw	r24, 0x01	; 1
    113e:	9e 83       	std	Y+6, r25	; 0x06
    1140:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1142:	8d 81       	ldd	r24, Y+5	; 0x05
    1144:	9e 81       	ldd	r25, Y+6	; 0x06
    1146:	00 97       	sbiw	r24, 0x00	; 0
    1148:	69 f7       	brne	.-38     	; 0x1124 <CLCD_voidInit+0x366>
    114a:	14 c0       	rjmp	.+40     	; 0x1174 <CLCD_voidInit+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    114c:	6f 81       	ldd	r22, Y+7	; 0x07
    114e:	78 85       	ldd	r23, Y+8	; 0x08
    1150:	89 85       	ldd	r24, Y+9	; 0x09
    1152:	9a 85       	ldd	r25, Y+10	; 0x0a
    1154:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1158:	dc 01       	movw	r26, r24
    115a:	cb 01       	movw	r24, r22
    115c:	9e 83       	std	Y+6, r25	; 0x06
    115e:	8d 83       	std	Y+5, r24	; 0x05
    1160:	8d 81       	ldd	r24, Y+5	; 0x05
    1162:	9e 81       	ldd	r25, Y+6	; 0x06
    1164:	9a 83       	std	Y+2, r25	; 0x02
    1166:	89 83       	std	Y+1, r24	; 0x01
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	9a 81       	ldd	r25, Y+2	; 0x02
    116c:	01 97       	sbiw	r24, 0x01	; 1
    116e:	f1 f7       	brne	.-4      	; 0x116c <CLCD_voidInit+0x3ae>
    1170:	9a 83       	std	Y+2, r25	; 0x02
    1172:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1174:	e8 96       	adiw	r28, 0x38	; 56
    1176:	0f b6       	in	r0, 0x3f	; 63
    1178:	f8 94       	cli
    117a:	de bf       	out	0x3e, r29	; 62
    117c:	0f be       	out	0x3f, r0	; 63
    117e:	cd bf       	out	0x3d, r28	; 61
    1180:	cf 91       	pop	r28
    1182:	df 91       	pop	r29
    1184:	08 95       	ret

00001186 <CLCD_voidSendString>:
void CLCD_voidSendString(char *Copy_pvString)
{
    1186:	df 93       	push	r29
    1188:	cf 93       	push	r28
    118a:	00 d0       	rcall	.+0      	; 0x118c <CLCD_voidSendString+0x6>
    118c:	0f 92       	push	r0
    118e:	cd b7       	in	r28, 0x3d	; 61
    1190:	de b7       	in	r29, 0x3e	; 62
    1192:	9b 83       	std	Y+3, r25	; 0x03
    1194:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    1196:	19 82       	std	Y+1, r1	; 0x01
    1198:	0e c0       	rjmp	.+28     	; 0x11b6 <CLCD_voidSendString+0x30>
	while(Copy_pvString[i] !='\0')
	{
		CLCD_voidSendData(Copy_pvString[i]);
    119a:	89 81       	ldd	r24, Y+1	; 0x01
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	9b 81       	ldd	r25, Y+3	; 0x03
    11a4:	fc 01       	movw	r30, r24
    11a6:	e2 0f       	add	r30, r18
    11a8:	f3 1f       	adc	r31, r19
    11aa:	80 81       	ld	r24, Z
    11ac:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendData>
		i++;
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	8f 5f       	subi	r24, 0xFF	; 255
    11b4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
void CLCD_voidSendString(char *Copy_pvString)
{
	u8 i=0;
	while(Copy_pvString[i] !='\0')
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	9b 81       	ldd	r25, Y+3	; 0x03
    11c0:	fc 01       	movw	r30, r24
    11c2:	e2 0f       	add	r30, r18
    11c4:	f3 1f       	adc	r31, r19
    11c6:	80 81       	ld	r24, Z
    11c8:	88 23       	and	r24, r24
    11ca:	39 f7       	brne	.-50     	; 0x119a <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pvString[i]);
		i++;
	}
}
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	cf 91       	pop	r28
    11d4:	df 91       	pop	r29
    11d6:	08 95       	ret

000011d8 <CLCD_voidSendNum>:

void CLCD_voidSendNum(u16 Copy_u16Num)
{
    11d8:	df 93       	push	r29
    11da:	cf 93       	push	r28
    11dc:	cd b7       	in	r28, 0x3d	; 61
    11de:	de b7       	in	r29, 0x3e	; 62
    11e0:	2e 97       	sbiw	r28, 0x0e	; 14
    11e2:	0f b6       	in	r0, 0x3f	; 63
    11e4:	f8 94       	cli
    11e6:	de bf       	out	0x3e, r29	; 62
    11e8:	0f be       	out	0x3f, r0	; 63
    11ea:	cd bf       	out	0x3d, r28	; 61
    11ec:	9e 87       	std	Y+14, r25	; 0x0e
    11ee:	8d 87       	std	Y+13, r24	; 0x0d
	u8 arr[10],i=0,j;
    11f0:	1a 82       	std	Y+2, r1	; 0x02

	if(Copy_u16Num==0)
    11f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    11f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    11f6:	00 97       	sbiw	r24, 0x00	; 0
    11f8:	11 f5       	brne	.+68     	; 0x123e <CLCD_voidSendNum+0x66>
	{
		CLCD_voidSendData('0');
    11fa:	80 e3       	ldi	r24, 0x30	; 48
    11fc:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendData>
    1200:	22 c0       	rjmp	.+68     	; 0x1246 <CLCD_voidSendNum+0x6e>
	}
	else
	{
		while(Copy_u16Num)
		{
			arr[i]=	Copy_u16Num%10 +'0';
    1202:	8a 81       	ldd	r24, Y+2	; 0x02
    1204:	e8 2f       	mov	r30, r24
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	8d 85       	ldd	r24, Y+13	; 0x0d
    120a:	9e 85       	ldd	r25, Y+14	; 0x0e
    120c:	2a e0       	ldi	r18, 0x0A	; 10
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	b9 01       	movw	r22, r18
    1212:	0e 94 90 16 	call	0x2d20	; 0x2d20 <__udivmodhi4>
    1216:	28 2f       	mov	r18, r24
    1218:	20 5d       	subi	r18, 0xD0	; 208
    121a:	ce 01       	movw	r24, r28
    121c:	03 96       	adiw	r24, 0x03	; 3
    121e:	e8 0f       	add	r30, r24
    1220:	f9 1f       	adc	r31, r25
    1222:	20 83       	st	Z, r18
			Copy_u16Num/=10;
    1224:	8d 85       	ldd	r24, Y+13	; 0x0d
    1226:	9e 85       	ldd	r25, Y+14	; 0x0e
    1228:	2a e0       	ldi	r18, 0x0A	; 10
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	b9 01       	movw	r22, r18
    122e:	0e 94 90 16 	call	0x2d20	; 0x2d20 <__udivmodhi4>
    1232:	cb 01       	movw	r24, r22
    1234:	9e 87       	std	Y+14, r25	; 0x0e
    1236:	8d 87       	std	Y+13, r24	; 0x0d
			i++;
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	8f 5f       	subi	r24, 0xFF	; 255
    123c:	8a 83       	std	Y+2, r24	; 0x02
	{
		CLCD_voidSendData('0');
	}
	else
	{
		while(Copy_u16Num)
    123e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1240:	9e 85       	ldd	r25, Y+14	; 0x0e
    1242:	00 97       	sbiw	r24, 0x00	; 0
    1244:	f1 f6       	brne	.-68     	; 0x1202 <CLCD_voidSendNum+0x2a>
			arr[i]=	Copy_u16Num%10 +'0';
			Copy_u16Num/=10;
			i++;
		}
	}
	for(j=i;j>0;j--)
    1246:	8a 81       	ldd	r24, Y+2	; 0x02
    1248:	89 83       	std	Y+1, r24	; 0x01
    124a:	11 c0       	rjmp	.+34     	; 0x126e <CLCD_voidSendNum+0x96>
	{
		CLCD_voidSendData(arr[j-1]);
    124c:	89 81       	ldd	r24, Y+1	; 0x01
    124e:	88 2f       	mov	r24, r24
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	9c 01       	movw	r18, r24
    1254:	21 50       	subi	r18, 0x01	; 1
    1256:	30 40       	sbci	r19, 0x00	; 0
    1258:	ce 01       	movw	r24, r28
    125a:	03 96       	adiw	r24, 0x03	; 3
    125c:	fc 01       	movw	r30, r24
    125e:	e2 0f       	add	r30, r18
    1260:	f3 1f       	adc	r31, r19
    1262:	80 81       	ld	r24, Z
    1264:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendData>
			arr[i]=	Copy_u16Num%10 +'0';
			Copy_u16Num/=10;
			i++;
		}
	}
	for(j=i;j>0;j--)
    1268:	89 81       	ldd	r24, Y+1	; 0x01
    126a:	81 50       	subi	r24, 0x01	; 1
    126c:	89 83       	std	Y+1, r24	; 0x01
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	88 23       	and	r24, r24
    1272:	61 f7       	brne	.-40     	; 0x124c <CLCD_voidSendNum+0x74>
	{
		CLCD_voidSendData(arr[j-1]);
	}
}
    1274:	2e 96       	adiw	r28, 0x0e	; 14
    1276:	0f b6       	in	r0, 0x3f	; 63
    1278:	f8 94       	cli
    127a:	de bf       	out	0x3e, r29	; 62
    127c:	0f be       	out	0x3f, r0	; 63
    127e:	cd bf       	out	0x3d, r28	; 61
    1280:	cf 91       	pop	r28
    1282:	df 91       	pop	r29
    1284:	08 95       	ret

00001286 <CLCD_voidSetPos>:
void CLCD_voidSetPos(u8 Copy_u8X,u8 Copy_u8Y)
{
    1286:	df 93       	push	r29
    1288:	cf 93       	push	r28
    128a:	00 d0       	rcall	.+0      	; 0x128c <CLCD_voidSetPos+0x6>
    128c:	0f 92       	push	r0
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    1292:	8a 83       	std	Y+2, r24	; 0x02
    1294:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Pos ;
	if(Copy_u8X == 0)
    1296:	8a 81       	ldd	r24, Y+2	; 0x02
    1298:	88 23       	and	r24, r24
    129a:	19 f4       	brne	.+6      	; 0x12a2 <CLCD_voidSetPos+0x1c>
	{
		Local_u8Pos =Copy_u8Y;
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	89 83       	std	Y+1, r24	; 0x01
    12a0:	06 c0       	rjmp	.+12     	; 0x12ae <CLCD_voidSetPos+0x28>
	}
	else if(Copy_u8X == 1)
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	81 30       	cpi	r24, 0x01	; 1
    12a6:	19 f4       	brne	.+6      	; 0x12ae <CLCD_voidSetPos+0x28>
	{
		Local_u8Pos =Copy_u8Y +0x40;
    12a8:	8b 81       	ldd	r24, Y+3	; 0x03
    12aa:	80 5c       	subi	r24, 0xC0	; 192
    12ac:	89 83       	std	Y+1, r24	; 0x01
	}
	CLCD_voidSendCommand(Local_u8Pos+128);
    12ae:	89 81       	ldd	r24, Y+1	; 0x01
    12b0:	80 58       	subi	r24, 0x80	; 128
    12b2:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendCommand>
}
    12b6:	0f 90       	pop	r0
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	cf 91       	pop	r28
    12be:	df 91       	pop	r29
    12c0:	08 95       	ret

000012c2 <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8 *Copy_Pattern,
									u8 Copy_u8Loc,
									u8 Copy_u8X,u8 Copy_u8Y)
{
    12c2:	df 93       	push	r29
    12c4:	cf 93       	push	r28
    12c6:	cd b7       	in	r28, 0x3d	; 61
    12c8:	de b7       	in	r29, 0x3e	; 62
    12ca:	27 97       	sbiw	r28, 0x07	; 7
    12cc:	0f b6       	in	r0, 0x3f	; 63
    12ce:	f8 94       	cli
    12d0:	de bf       	out	0x3e, r29	; 62
    12d2:	0f be       	out	0x3f, r0	; 63
    12d4:	cd bf       	out	0x3d, r28	; 61
    12d6:	9c 83       	std	Y+4, r25	; 0x04
    12d8:	8b 83       	std	Y+3, r24	; 0x03
    12da:	6d 83       	std	Y+5, r22	; 0x05
    12dc:	4e 83       	std	Y+6, r20	; 0x06
    12de:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress ,Local_u8Iterator =0;
    12e0:	19 82       	std	Y+1, r1	; 0x01
	//CALCULATE CGRAM ADDRESS
	Local_u8CGRAMAddress = Copy_u8Loc*8;
    12e2:	8d 81       	ldd	r24, Y+5	; 0x05
    12e4:	88 2f       	mov	r24, r24
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	88 0f       	add	r24, r24
    12ea:	99 1f       	adc	r25, r25
    12ec:	88 0f       	add	r24, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	88 0f       	add	r24, r24
    12f2:	99 1f       	adc	r25, r25
    12f4:	8a 83       	std	Y+2, r24	; 0x02
	//SET CGRAM ADDRESS
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	80 5c       	subi	r24, 0xC0	; 192
    12fa:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendCommand>
	//send the Pattern byte by byte
	for(Local_u8Iterator = 0;Local_u8Iterator<8;Local_u8Iterator++)
    12fe:	19 82       	std	Y+1, r1	; 0x01
    1300:	0e c0       	rjmp	.+28     	; 0x131e <CLCD_voidWriteSpecialCharacter+0x5c>
	{
		CLCD_voidSendData(Copy_Pattern[Local_u8Iterator]);
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	28 2f       	mov	r18, r24
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	9c 81       	ldd	r25, Y+4	; 0x04
    130c:	fc 01       	movw	r30, r24
    130e:	e2 0f       	add	r30, r18
    1310:	f3 1f       	adc	r31, r19
    1312:	80 81       	ld	r24, Z
    1314:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendData>
	//CALCULATE CGRAM ADDRESS
	Local_u8CGRAMAddress = Copy_u8Loc*8;
	//SET CGRAM ADDRESS
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);
	//send the Pattern byte by byte
	for(Local_u8Iterator = 0;Local_u8Iterator<8;Local_u8Iterator++)
    1318:	89 81       	ldd	r24, Y+1	; 0x01
    131a:	8f 5f       	subi	r24, 0xFF	; 255
    131c:	89 83       	std	Y+1, r24	; 0x01
    131e:	89 81       	ldd	r24, Y+1	; 0x01
    1320:	88 30       	cpi	r24, 0x08	; 8
    1322:	78 f3       	brcs	.-34     	; 0x1302 <CLCD_voidWriteSpecialCharacter+0x40>
	{
		CLCD_voidSendData(Copy_Pattern[Local_u8Iterator]);

	}
	CLCD_voidSetPos( Copy_u8X, Copy_u8Y);
    1324:	8e 81       	ldd	r24, Y+6	; 0x06
    1326:	6f 81       	ldd	r22, Y+7	; 0x07
    1328:	0e 94 43 09 	call	0x1286	; 0x1286 <CLCD_voidSetPos>
	CLCD_voidSendData(Copy_u8Loc);
    132c:	8d 81       	ldd	r24, Y+5	; 0x05
    132e:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendData>
}
    1332:	27 96       	adiw	r28, 0x07	; 7
    1334:	0f b6       	in	r0, 0x3f	; 63
    1336:	f8 94       	cli
    1338:	de bf       	out	0x3e, r29	; 62
    133a:	0f be       	out	0x3f, r0	; 63
    133c:	cd bf       	out	0x3d, r28	; 61
    133e:	cf 91       	pop	r28
    1340:	df 91       	pop	r29
    1342:	08 95       	ret

00001344 <CLCD_voidSetClear>:
void CLCD_voidSetClear(void)
{
    1344:	df 93       	push	r29
    1346:	cf 93       	push	r28
    1348:	cd b7       	in	r28, 0x3d	; 61
    134a:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCommand(0b00000001);
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendCommand>
	CLCD_voidSetPos(0,0);
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	60 e0       	ldi	r22, 0x00	; 0
    1356:	0e 94 43 09 	call	0x1286	; 0x1286 <CLCD_voidSetPos>

}
    135a:	cf 91       	pop	r28
    135c:	df 91       	pop	r29
    135e:	08 95       	ret

00001360 <DIO_voidSetPortDir>:
#include "DIO_private.h"
#include "DIO_config.h"
#include "DIO_interface.h"

void DIO_voidSetPortDir(u8 Copy_u8Port,u8 Copy_u8Dir)
{
    1360:	df 93       	push	r29
    1362:	cf 93       	push	r28
    1364:	00 d0       	rcall	.+0      	; 0x1366 <DIO_voidSetPortDir+0x6>
    1366:	00 d0       	rcall	.+0      	; 0x1368 <DIO_voidSetPortDir+0x8>
    1368:	cd b7       	in	r28, 0x3d	; 61
    136a:	de b7       	in	r29, 0x3e	; 62
    136c:	89 83       	std	Y+1, r24	; 0x01
    136e:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    1370:	89 81       	ldd	r24, Y+1	; 0x01
    1372:	28 2f       	mov	r18, r24
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	3c 83       	std	Y+4, r19	; 0x04
    1378:	2b 83       	std	Y+3, r18	; 0x03
    137a:	8b 81       	ldd	r24, Y+3	; 0x03
    137c:	9c 81       	ldd	r25, Y+4	; 0x04
    137e:	82 30       	cpi	r24, 0x02	; 2
    1380:	91 05       	cpc	r25, r1
    1382:	d9 f0       	breq	.+54     	; 0x13ba <DIO_voidSetPortDir+0x5a>
    1384:	2b 81       	ldd	r18, Y+3	; 0x03
    1386:	3c 81       	ldd	r19, Y+4	; 0x04
    1388:	23 30       	cpi	r18, 0x03	; 3
    138a:	31 05       	cpc	r19, r1
    138c:	34 f4       	brge	.+12     	; 0x139a <DIO_voidSetPortDir+0x3a>
    138e:	8b 81       	ldd	r24, Y+3	; 0x03
    1390:	9c 81       	ldd	r25, Y+4	; 0x04
    1392:	81 30       	cpi	r24, 0x01	; 1
    1394:	91 05       	cpc	r25, r1
    1396:	61 f0       	breq	.+24     	; 0x13b0 <DIO_voidSetPortDir+0x50>
    1398:	1e c0       	rjmp	.+60     	; 0x13d6 <DIO_voidSetPortDir+0x76>
    139a:	2b 81       	ldd	r18, Y+3	; 0x03
    139c:	3c 81       	ldd	r19, Y+4	; 0x04
    139e:	23 30       	cpi	r18, 0x03	; 3
    13a0:	31 05       	cpc	r19, r1
    13a2:	81 f0       	breq	.+32     	; 0x13c4 <DIO_voidSetPortDir+0x64>
    13a4:	8b 81       	ldd	r24, Y+3	; 0x03
    13a6:	9c 81       	ldd	r25, Y+4	; 0x04
    13a8:	84 30       	cpi	r24, 0x04	; 4
    13aa:	91 05       	cpc	r25, r1
    13ac:	81 f0       	breq	.+32     	; 0x13ce <DIO_voidSetPortDir+0x6e>
    13ae:	13 c0       	rjmp	.+38     	; 0x13d6 <DIO_voidSetPortDir+0x76>
	{
	case PORTA_REG :DDRA=Copy_u8Dir;break;
    13b0:	ea e3       	ldi	r30, 0x3A	; 58
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	80 83       	st	Z, r24
    13b8:	0e c0       	rjmp	.+28     	; 0x13d6 <DIO_voidSetPortDir+0x76>
	case PORTB_REG :DDRB=Copy_u8Dir;break;
    13ba:	e7 e3       	ldi	r30, 0x37	; 55
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
    13c0:	80 83       	st	Z, r24
    13c2:	09 c0       	rjmp	.+18     	; 0x13d6 <DIO_voidSetPortDir+0x76>
	case PORTC_REG :DDRC=Copy_u8Dir;break;
    13c4:	e4 e3       	ldi	r30, 0x34	; 52
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	80 83       	st	Z, r24
    13cc:	04 c0       	rjmp	.+8      	; 0x13d6 <DIO_voidSetPortDir+0x76>
	case PORTD_REG :DDRD=Copy_u8Dir;break;
    13ce:	e1 e3       	ldi	r30, 0x31	; 49
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	8a 81       	ldd	r24, Y+2	; 0x02
    13d4:	80 83       	st	Z, r24
	}
}
    13d6:	0f 90       	pop	r0
    13d8:	0f 90       	pop	r0
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	cf 91       	pop	r28
    13e0:	df 91       	pop	r29
    13e2:	08 95       	ret

000013e4 <DIO_voidSetPinDir>:
void DIO_voidSetPinDir(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Dir)
{
    13e4:	df 93       	push	r29
    13e6:	cf 93       	push	r28
    13e8:	cd b7       	in	r28, 0x3d	; 61
    13ea:	de b7       	in	r29, 0x3e	; 62
    13ec:	27 97       	sbiw	r28, 0x07	; 7
    13ee:	0f b6       	in	r0, 0x3f	; 63
    13f0:	f8 94       	cli
    13f2:	de bf       	out	0x3e, r29	; 62
    13f4:	0f be       	out	0x3f, r0	; 63
    13f6:	cd bf       	out	0x3d, r28	; 61
    13f8:	89 83       	std	Y+1, r24	; 0x01
    13fa:	6a 83       	std	Y+2, r22	; 0x02
    13fc:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Pin<=7)
    13fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1400:	88 30       	cpi	r24, 0x08	; 8
    1402:	08 f0       	brcs	.+2      	; 0x1406 <DIO_voidSetPinDir+0x22>
    1404:	ec c0       	rjmp	.+472    	; 0x15de <DIO_voidSetPinDir+0x1fa>
	{
		if(Copy_u8Dir==PIN_DIR_OUT)
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	81 30       	cpi	r24, 0x01	; 1
    140a:	09 f0       	breq	.+2      	; 0x140e <DIO_voidSetPinDir+0x2a>
    140c:	70 c0       	rjmp	.+224    	; 0x14ee <DIO_voidSetPinDir+0x10a>
		{
			switch(Copy_u8Port)
    140e:	89 81       	ldd	r24, Y+1	; 0x01
    1410:	28 2f       	mov	r18, r24
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	3f 83       	std	Y+7, r19	; 0x07
    1416:	2e 83       	std	Y+6, r18	; 0x06
    1418:	8e 81       	ldd	r24, Y+6	; 0x06
    141a:	9f 81       	ldd	r25, Y+7	; 0x07
    141c:	82 30       	cpi	r24, 0x02	; 2
    141e:	91 05       	cpc	r25, r1
    1420:	51 f1       	breq	.+84     	; 0x1476 <DIO_voidSetPinDir+0x92>
    1422:	2e 81       	ldd	r18, Y+6	; 0x06
    1424:	3f 81       	ldd	r19, Y+7	; 0x07
    1426:	23 30       	cpi	r18, 0x03	; 3
    1428:	31 05       	cpc	r19, r1
    142a:	34 f4       	brge	.+12     	; 0x1438 <DIO_voidSetPinDir+0x54>
    142c:	8e 81       	ldd	r24, Y+6	; 0x06
    142e:	9f 81       	ldd	r25, Y+7	; 0x07
    1430:	81 30       	cpi	r24, 0x01	; 1
    1432:	91 05       	cpc	r25, r1
    1434:	61 f0       	breq	.+24     	; 0x144e <DIO_voidSetPinDir+0x6a>
    1436:	d3 c0       	rjmp	.+422    	; 0x15de <DIO_voidSetPinDir+0x1fa>
    1438:	2e 81       	ldd	r18, Y+6	; 0x06
    143a:	3f 81       	ldd	r19, Y+7	; 0x07
    143c:	23 30       	cpi	r18, 0x03	; 3
    143e:	31 05       	cpc	r19, r1
    1440:	71 f1       	breq	.+92     	; 0x149e <DIO_voidSetPinDir+0xba>
    1442:	8e 81       	ldd	r24, Y+6	; 0x06
    1444:	9f 81       	ldd	r25, Y+7	; 0x07
    1446:	84 30       	cpi	r24, 0x04	; 4
    1448:	91 05       	cpc	r25, r1
    144a:	e9 f1       	breq	.+122    	; 0x14c6 <DIO_voidSetPinDir+0xe2>
    144c:	c8 c0       	rjmp	.+400    	; 0x15de <DIO_voidSetPinDir+0x1fa>
			{
			case PORTA_REG :SET_BIT(DDRA,Copy_u8Pin);break;
    144e:	aa e3       	ldi	r26, 0x3A	; 58
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	ea e3       	ldi	r30, 0x3A	; 58
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	48 2f       	mov	r20, r24
    145a:	8a 81       	ldd	r24, Y+2	; 0x02
    145c:	28 2f       	mov	r18, r24
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	02 2e       	mov	r0, r18
    1466:	02 c0       	rjmp	.+4      	; 0x146c <DIO_voidSetPinDir+0x88>
    1468:	88 0f       	add	r24, r24
    146a:	99 1f       	adc	r25, r25
    146c:	0a 94       	dec	r0
    146e:	e2 f7       	brpl	.-8      	; 0x1468 <DIO_voidSetPinDir+0x84>
    1470:	84 2b       	or	r24, r20
    1472:	8c 93       	st	X, r24
    1474:	b4 c0       	rjmp	.+360    	; 0x15de <DIO_voidSetPinDir+0x1fa>
			case PORTB_REG :SET_BIT(DDRB,Copy_u8Pin);break;
    1476:	a7 e3       	ldi	r26, 0x37	; 55
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	e7 e3       	ldi	r30, 0x37	; 55
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	48 2f       	mov	r20, r24
    1482:	8a 81       	ldd	r24, Y+2	; 0x02
    1484:	28 2f       	mov	r18, r24
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	02 2e       	mov	r0, r18
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <DIO_voidSetPinDir+0xb0>
    1490:	88 0f       	add	r24, r24
    1492:	99 1f       	adc	r25, r25
    1494:	0a 94       	dec	r0
    1496:	e2 f7       	brpl	.-8      	; 0x1490 <DIO_voidSetPinDir+0xac>
    1498:	84 2b       	or	r24, r20
    149a:	8c 93       	st	X, r24
    149c:	a0 c0       	rjmp	.+320    	; 0x15de <DIO_voidSetPinDir+0x1fa>
			case PORTC_REG :SET_BIT(DDRC,Copy_u8Pin);break;
    149e:	a4 e3       	ldi	r26, 0x34	; 52
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	e4 e3       	ldi	r30, 0x34	; 52
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	48 2f       	mov	r20, r24
    14aa:	8a 81       	ldd	r24, Y+2	; 0x02
    14ac:	28 2f       	mov	r18, r24
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	02 2e       	mov	r0, r18
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <DIO_voidSetPinDir+0xd8>
    14b8:	88 0f       	add	r24, r24
    14ba:	99 1f       	adc	r25, r25
    14bc:	0a 94       	dec	r0
    14be:	e2 f7       	brpl	.-8      	; 0x14b8 <DIO_voidSetPinDir+0xd4>
    14c0:	84 2b       	or	r24, r20
    14c2:	8c 93       	st	X, r24
    14c4:	8c c0       	rjmp	.+280    	; 0x15de <DIO_voidSetPinDir+0x1fa>
			case PORTD_REG :SET_BIT(DDRD,Copy_u8Pin);break;
    14c6:	a1 e3       	ldi	r26, 0x31	; 49
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	e1 e3       	ldi	r30, 0x31	; 49
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	48 2f       	mov	r20, r24
    14d2:	8a 81       	ldd	r24, Y+2	; 0x02
    14d4:	28 2f       	mov	r18, r24
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	02 2e       	mov	r0, r18
    14de:	02 c0       	rjmp	.+4      	; 0x14e4 <DIO_voidSetPinDir+0x100>
    14e0:	88 0f       	add	r24, r24
    14e2:	99 1f       	adc	r25, r25
    14e4:	0a 94       	dec	r0
    14e6:	e2 f7       	brpl	.-8      	; 0x14e0 <DIO_voidSetPinDir+0xfc>
    14e8:	84 2b       	or	r24, r20
    14ea:	8c 93       	st	X, r24
    14ec:	78 c0       	rjmp	.+240    	; 0x15de <DIO_voidSetPinDir+0x1fa>
			}
		}
		else if(Copy_u8Dir==PIN_DIR_IN)
    14ee:	8b 81       	ldd	r24, Y+3	; 0x03
    14f0:	88 23       	and	r24, r24
    14f2:	09 f0       	breq	.+2      	; 0x14f6 <DIO_voidSetPinDir+0x112>
    14f4:	74 c0       	rjmp	.+232    	; 0x15de <DIO_voidSetPinDir+0x1fa>
		{
			switch(Copy_u8Port)
    14f6:	89 81       	ldd	r24, Y+1	; 0x01
    14f8:	28 2f       	mov	r18, r24
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	3d 83       	std	Y+5, r19	; 0x05
    14fe:	2c 83       	std	Y+4, r18	; 0x04
    1500:	8c 81       	ldd	r24, Y+4	; 0x04
    1502:	9d 81       	ldd	r25, Y+5	; 0x05
    1504:	82 30       	cpi	r24, 0x02	; 2
    1506:	91 05       	cpc	r25, r1
    1508:	61 f1       	breq	.+88     	; 0x1562 <DIO_voidSetPinDir+0x17e>
    150a:	2c 81       	ldd	r18, Y+4	; 0x04
    150c:	3d 81       	ldd	r19, Y+5	; 0x05
    150e:	23 30       	cpi	r18, 0x03	; 3
    1510:	31 05       	cpc	r19, r1
    1512:	34 f4       	brge	.+12     	; 0x1520 <DIO_voidSetPinDir+0x13c>
    1514:	8c 81       	ldd	r24, Y+4	; 0x04
    1516:	9d 81       	ldd	r25, Y+5	; 0x05
    1518:	81 30       	cpi	r24, 0x01	; 1
    151a:	91 05       	cpc	r25, r1
    151c:	69 f0       	breq	.+26     	; 0x1538 <DIO_voidSetPinDir+0x154>
    151e:	5f c0       	rjmp	.+190    	; 0x15de <DIO_voidSetPinDir+0x1fa>
    1520:	2c 81       	ldd	r18, Y+4	; 0x04
    1522:	3d 81       	ldd	r19, Y+5	; 0x05
    1524:	23 30       	cpi	r18, 0x03	; 3
    1526:	31 05       	cpc	r19, r1
    1528:	89 f1       	breq	.+98     	; 0x158c <DIO_voidSetPinDir+0x1a8>
    152a:	8c 81       	ldd	r24, Y+4	; 0x04
    152c:	9d 81       	ldd	r25, Y+5	; 0x05
    152e:	84 30       	cpi	r24, 0x04	; 4
    1530:	91 05       	cpc	r25, r1
    1532:	09 f4       	brne	.+2      	; 0x1536 <DIO_voidSetPinDir+0x152>
    1534:	40 c0       	rjmp	.+128    	; 0x15b6 <DIO_voidSetPinDir+0x1d2>
    1536:	53 c0       	rjmp	.+166    	; 0x15de <DIO_voidSetPinDir+0x1fa>
			{
			case PORTA_REG :CLR_BIT(DDRA,Copy_u8Pin);break;
    1538:	aa e3       	ldi	r26, 0x3A	; 58
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	ea e3       	ldi	r30, 0x3A	; 58
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	48 2f       	mov	r20, r24
    1544:	8a 81       	ldd	r24, Y+2	; 0x02
    1546:	28 2f       	mov	r18, r24
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	02 2e       	mov	r0, r18
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <DIO_voidSetPinDir+0x172>
    1552:	88 0f       	add	r24, r24
    1554:	99 1f       	adc	r25, r25
    1556:	0a 94       	dec	r0
    1558:	e2 f7       	brpl	.-8      	; 0x1552 <DIO_voidSetPinDir+0x16e>
    155a:	80 95       	com	r24
    155c:	84 23       	and	r24, r20
    155e:	8c 93       	st	X, r24
    1560:	3e c0       	rjmp	.+124    	; 0x15de <DIO_voidSetPinDir+0x1fa>
			case PORTB_REG :CLR_BIT(DDRB,Copy_u8Pin);break;
    1562:	a7 e3       	ldi	r26, 0x37	; 55
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	e7 e3       	ldi	r30, 0x37	; 55
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	48 2f       	mov	r20, r24
    156e:	8a 81       	ldd	r24, Y+2	; 0x02
    1570:	28 2f       	mov	r18, r24
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	02 2e       	mov	r0, r18
    157a:	02 c0       	rjmp	.+4      	; 0x1580 <DIO_voidSetPinDir+0x19c>
    157c:	88 0f       	add	r24, r24
    157e:	99 1f       	adc	r25, r25
    1580:	0a 94       	dec	r0
    1582:	e2 f7       	brpl	.-8      	; 0x157c <DIO_voidSetPinDir+0x198>
    1584:	80 95       	com	r24
    1586:	84 23       	and	r24, r20
    1588:	8c 93       	st	X, r24
    158a:	29 c0       	rjmp	.+82     	; 0x15de <DIO_voidSetPinDir+0x1fa>
			case PORTC_REG :CLR_BIT(DDRC,Copy_u8Pin);break;
    158c:	a4 e3       	ldi	r26, 0x34	; 52
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	e4 e3       	ldi	r30, 0x34	; 52
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	48 2f       	mov	r20, r24
    1598:	8a 81       	ldd	r24, Y+2	; 0x02
    159a:	28 2f       	mov	r18, r24
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	02 2e       	mov	r0, r18
    15a4:	02 c0       	rjmp	.+4      	; 0x15aa <DIO_voidSetPinDir+0x1c6>
    15a6:	88 0f       	add	r24, r24
    15a8:	99 1f       	adc	r25, r25
    15aa:	0a 94       	dec	r0
    15ac:	e2 f7       	brpl	.-8      	; 0x15a6 <DIO_voidSetPinDir+0x1c2>
    15ae:	80 95       	com	r24
    15b0:	84 23       	and	r24, r20
    15b2:	8c 93       	st	X, r24
    15b4:	14 c0       	rjmp	.+40     	; 0x15de <DIO_voidSetPinDir+0x1fa>
			case PORTD_REG :CLR_BIT(DDRD,Copy_u8Pin);break;
    15b6:	a1 e3       	ldi	r26, 0x31	; 49
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	e1 e3       	ldi	r30, 0x31	; 49
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	48 2f       	mov	r20, r24
    15c2:	8a 81       	ldd	r24, Y+2	; 0x02
    15c4:	28 2f       	mov	r18, r24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	02 2e       	mov	r0, r18
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <DIO_voidSetPinDir+0x1f0>
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	0a 94       	dec	r0
    15d6:	e2 f7       	brpl	.-8      	; 0x15d0 <DIO_voidSetPinDir+0x1ec>
    15d8:	80 95       	com	r24
    15da:	84 23       	and	r24, r20
    15dc:	8c 93       	st	X, r24
			}
		}
	}
}
    15de:	27 96       	adiw	r28, 0x07	; 7
    15e0:	0f b6       	in	r0, 0x3f	; 63
    15e2:	f8 94       	cli
    15e4:	de bf       	out	0x3e, r29	; 62
    15e6:	0f be       	out	0x3f, r0	; 63
    15e8:	cd bf       	out	0x3d, r28	; 61
    15ea:	cf 91       	pop	r28
    15ec:	df 91       	pop	r29
    15ee:	08 95       	ret

000015f0 <DIO_voidSetPortVal>:
void DIO_voidSetPortVal(u8 Copy_u8Port,u8 Copy_u8Val)
{
    15f0:	df 93       	push	r29
    15f2:	cf 93       	push	r28
    15f4:	00 d0       	rcall	.+0      	; 0x15f6 <DIO_voidSetPortVal+0x6>
    15f6:	00 d0       	rcall	.+0      	; 0x15f8 <DIO_voidSetPortVal+0x8>
    15f8:	cd b7       	in	r28, 0x3d	; 61
    15fa:	de b7       	in	r29, 0x3e	; 62
    15fc:	89 83       	std	Y+1, r24	; 0x01
    15fe:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    1600:	89 81       	ldd	r24, Y+1	; 0x01
    1602:	28 2f       	mov	r18, r24
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	3c 83       	std	Y+4, r19	; 0x04
    1608:	2b 83       	std	Y+3, r18	; 0x03
    160a:	8b 81       	ldd	r24, Y+3	; 0x03
    160c:	9c 81       	ldd	r25, Y+4	; 0x04
    160e:	82 30       	cpi	r24, 0x02	; 2
    1610:	91 05       	cpc	r25, r1
    1612:	d9 f0       	breq	.+54     	; 0x164a <DIO_voidSetPortVal+0x5a>
    1614:	2b 81       	ldd	r18, Y+3	; 0x03
    1616:	3c 81       	ldd	r19, Y+4	; 0x04
    1618:	23 30       	cpi	r18, 0x03	; 3
    161a:	31 05       	cpc	r19, r1
    161c:	34 f4       	brge	.+12     	; 0x162a <DIO_voidSetPortVal+0x3a>
    161e:	8b 81       	ldd	r24, Y+3	; 0x03
    1620:	9c 81       	ldd	r25, Y+4	; 0x04
    1622:	81 30       	cpi	r24, 0x01	; 1
    1624:	91 05       	cpc	r25, r1
    1626:	61 f0       	breq	.+24     	; 0x1640 <DIO_voidSetPortVal+0x50>
    1628:	1e c0       	rjmp	.+60     	; 0x1666 <DIO_voidSetPortVal+0x76>
    162a:	2b 81       	ldd	r18, Y+3	; 0x03
    162c:	3c 81       	ldd	r19, Y+4	; 0x04
    162e:	23 30       	cpi	r18, 0x03	; 3
    1630:	31 05       	cpc	r19, r1
    1632:	81 f0       	breq	.+32     	; 0x1654 <DIO_voidSetPortVal+0x64>
    1634:	8b 81       	ldd	r24, Y+3	; 0x03
    1636:	9c 81       	ldd	r25, Y+4	; 0x04
    1638:	84 30       	cpi	r24, 0x04	; 4
    163a:	91 05       	cpc	r25, r1
    163c:	81 f0       	breq	.+32     	; 0x165e <DIO_voidSetPortVal+0x6e>
    163e:	13 c0       	rjmp	.+38     	; 0x1666 <DIO_voidSetPortVal+0x76>
	{
	case PORTA_REG :PORTA=Copy_u8Val;break;
    1640:	eb e3       	ldi	r30, 0x3B	; 59
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	8a 81       	ldd	r24, Y+2	; 0x02
    1646:	80 83       	st	Z, r24
    1648:	0e c0       	rjmp	.+28     	; 0x1666 <DIO_voidSetPortVal+0x76>
	case PORTB_REG :PORTB=Copy_u8Val;break;
    164a:	e8 e3       	ldi	r30, 0x38	; 56
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	8a 81       	ldd	r24, Y+2	; 0x02
    1650:	80 83       	st	Z, r24
    1652:	09 c0       	rjmp	.+18     	; 0x1666 <DIO_voidSetPortVal+0x76>
	case PORTC_REG :PORTC=Copy_u8Val;break;
    1654:	e5 e3       	ldi	r30, 0x35	; 53
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	8a 81       	ldd	r24, Y+2	; 0x02
    165a:	80 83       	st	Z, r24
    165c:	04 c0       	rjmp	.+8      	; 0x1666 <DIO_voidSetPortVal+0x76>
	case PORTD_REG :PORTD=Copy_u8Val;break;
    165e:	e2 e3       	ldi	r30, 0x32	; 50
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	8a 81       	ldd	r24, Y+2	; 0x02
    1664:	80 83       	st	Z, r24
	}
}
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	cf 91       	pop	r28
    1670:	df 91       	pop	r29
    1672:	08 95       	ret

00001674 <DIO_voidSetPinVal>:
void DIO_voidSetPinVal(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Val)
{
    1674:	df 93       	push	r29
    1676:	cf 93       	push	r28
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
    167c:	27 97       	sbiw	r28, 0x07	; 7
    167e:	0f b6       	in	r0, 0x3f	; 63
    1680:	f8 94       	cli
    1682:	de bf       	out	0x3e, r29	; 62
    1684:	0f be       	out	0x3f, r0	; 63
    1686:	cd bf       	out	0x3d, r28	; 61
    1688:	89 83       	std	Y+1, r24	; 0x01
    168a:	6a 83       	std	Y+2, r22	; 0x02
    168c:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Pin<=7)
    168e:	8a 81       	ldd	r24, Y+2	; 0x02
    1690:	88 30       	cpi	r24, 0x08	; 8
    1692:	08 f0       	brcs	.+2      	; 0x1696 <DIO_voidSetPinVal+0x22>
    1694:	ec c0       	rjmp	.+472    	; 0x186e <DIO_voidSetPinVal+0x1fa>
	{
		if(Copy_u8Val==PIN_VAL_HIGH)
    1696:	8b 81       	ldd	r24, Y+3	; 0x03
    1698:	81 30       	cpi	r24, 0x01	; 1
    169a:	09 f0       	breq	.+2      	; 0x169e <DIO_voidSetPinVal+0x2a>
    169c:	70 c0       	rjmp	.+224    	; 0x177e <DIO_voidSetPinVal+0x10a>
		{
			switch(Copy_u8Port)
    169e:	89 81       	ldd	r24, Y+1	; 0x01
    16a0:	28 2f       	mov	r18, r24
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	3f 83       	std	Y+7, r19	; 0x07
    16a6:	2e 83       	std	Y+6, r18	; 0x06
    16a8:	8e 81       	ldd	r24, Y+6	; 0x06
    16aa:	9f 81       	ldd	r25, Y+7	; 0x07
    16ac:	82 30       	cpi	r24, 0x02	; 2
    16ae:	91 05       	cpc	r25, r1
    16b0:	51 f1       	breq	.+84     	; 0x1706 <DIO_voidSetPinVal+0x92>
    16b2:	2e 81       	ldd	r18, Y+6	; 0x06
    16b4:	3f 81       	ldd	r19, Y+7	; 0x07
    16b6:	23 30       	cpi	r18, 0x03	; 3
    16b8:	31 05       	cpc	r19, r1
    16ba:	34 f4       	brge	.+12     	; 0x16c8 <DIO_voidSetPinVal+0x54>
    16bc:	8e 81       	ldd	r24, Y+6	; 0x06
    16be:	9f 81       	ldd	r25, Y+7	; 0x07
    16c0:	81 30       	cpi	r24, 0x01	; 1
    16c2:	91 05       	cpc	r25, r1
    16c4:	61 f0       	breq	.+24     	; 0x16de <DIO_voidSetPinVal+0x6a>
    16c6:	d3 c0       	rjmp	.+422    	; 0x186e <DIO_voidSetPinVal+0x1fa>
    16c8:	2e 81       	ldd	r18, Y+6	; 0x06
    16ca:	3f 81       	ldd	r19, Y+7	; 0x07
    16cc:	23 30       	cpi	r18, 0x03	; 3
    16ce:	31 05       	cpc	r19, r1
    16d0:	71 f1       	breq	.+92     	; 0x172e <DIO_voidSetPinVal+0xba>
    16d2:	8e 81       	ldd	r24, Y+6	; 0x06
    16d4:	9f 81       	ldd	r25, Y+7	; 0x07
    16d6:	84 30       	cpi	r24, 0x04	; 4
    16d8:	91 05       	cpc	r25, r1
    16da:	e9 f1       	breq	.+122    	; 0x1756 <DIO_voidSetPinVal+0xe2>
    16dc:	c8 c0       	rjmp	.+400    	; 0x186e <DIO_voidSetPinVal+0x1fa>
			{
			case PORTA_REG :SET_BIT(PORTA,Copy_u8Pin);break;
    16de:	ab e3       	ldi	r26, 0x3B	; 59
    16e0:	b0 e0       	ldi	r27, 0x00	; 0
    16e2:	eb e3       	ldi	r30, 0x3B	; 59
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
    16e8:	48 2f       	mov	r20, r24
    16ea:	8a 81       	ldd	r24, Y+2	; 0x02
    16ec:	28 2f       	mov	r18, r24
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	02 2e       	mov	r0, r18
    16f6:	02 c0       	rjmp	.+4      	; 0x16fc <DIO_voidSetPinVal+0x88>
    16f8:	88 0f       	add	r24, r24
    16fa:	99 1f       	adc	r25, r25
    16fc:	0a 94       	dec	r0
    16fe:	e2 f7       	brpl	.-8      	; 0x16f8 <DIO_voidSetPinVal+0x84>
    1700:	84 2b       	or	r24, r20
    1702:	8c 93       	st	X, r24
    1704:	b4 c0       	rjmp	.+360    	; 0x186e <DIO_voidSetPinVal+0x1fa>
			case PORTB_REG :SET_BIT(PORTB,Copy_u8Pin);break;
    1706:	a8 e3       	ldi	r26, 0x38	; 56
    1708:	b0 e0       	ldi	r27, 0x00	; 0
    170a:	e8 e3       	ldi	r30, 0x38	; 56
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	48 2f       	mov	r20, r24
    1712:	8a 81       	ldd	r24, Y+2	; 0x02
    1714:	28 2f       	mov	r18, r24
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	02 2e       	mov	r0, r18
    171e:	02 c0       	rjmp	.+4      	; 0x1724 <DIO_voidSetPinVal+0xb0>
    1720:	88 0f       	add	r24, r24
    1722:	99 1f       	adc	r25, r25
    1724:	0a 94       	dec	r0
    1726:	e2 f7       	brpl	.-8      	; 0x1720 <DIO_voidSetPinVal+0xac>
    1728:	84 2b       	or	r24, r20
    172a:	8c 93       	st	X, r24
    172c:	a0 c0       	rjmp	.+320    	; 0x186e <DIO_voidSetPinVal+0x1fa>
			case PORTC_REG :SET_BIT(PORTC,Copy_u8Pin);break;
    172e:	a5 e3       	ldi	r26, 0x35	; 53
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	e5 e3       	ldi	r30, 0x35	; 53
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	48 2f       	mov	r20, r24
    173a:	8a 81       	ldd	r24, Y+2	; 0x02
    173c:	28 2f       	mov	r18, r24
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	02 2e       	mov	r0, r18
    1746:	02 c0       	rjmp	.+4      	; 0x174c <DIO_voidSetPinVal+0xd8>
    1748:	88 0f       	add	r24, r24
    174a:	99 1f       	adc	r25, r25
    174c:	0a 94       	dec	r0
    174e:	e2 f7       	brpl	.-8      	; 0x1748 <DIO_voidSetPinVal+0xd4>
    1750:	84 2b       	or	r24, r20
    1752:	8c 93       	st	X, r24
    1754:	8c c0       	rjmp	.+280    	; 0x186e <DIO_voidSetPinVal+0x1fa>
			case PORTD_REG :SET_BIT(PORTD,Copy_u8Pin);break;
    1756:	a2 e3       	ldi	r26, 0x32	; 50
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	e2 e3       	ldi	r30, 0x32	; 50
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	48 2f       	mov	r20, r24
    1762:	8a 81       	ldd	r24, Y+2	; 0x02
    1764:	28 2f       	mov	r18, r24
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	02 2e       	mov	r0, r18
    176e:	02 c0       	rjmp	.+4      	; 0x1774 <DIO_voidSetPinVal+0x100>
    1770:	88 0f       	add	r24, r24
    1772:	99 1f       	adc	r25, r25
    1774:	0a 94       	dec	r0
    1776:	e2 f7       	brpl	.-8      	; 0x1770 <DIO_voidSetPinVal+0xfc>
    1778:	84 2b       	or	r24, r20
    177a:	8c 93       	st	X, r24
    177c:	78 c0       	rjmp	.+240    	; 0x186e <DIO_voidSetPinVal+0x1fa>
			}
		}
		else if(Copy_u8Val==PIN_VAL_LOW)
    177e:	8b 81       	ldd	r24, Y+3	; 0x03
    1780:	88 23       	and	r24, r24
    1782:	09 f0       	breq	.+2      	; 0x1786 <DIO_voidSetPinVal+0x112>
    1784:	74 c0       	rjmp	.+232    	; 0x186e <DIO_voidSetPinVal+0x1fa>
		{
			switch(Copy_u8Port)
    1786:	89 81       	ldd	r24, Y+1	; 0x01
    1788:	28 2f       	mov	r18, r24
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	3d 83       	std	Y+5, r19	; 0x05
    178e:	2c 83       	std	Y+4, r18	; 0x04
    1790:	8c 81       	ldd	r24, Y+4	; 0x04
    1792:	9d 81       	ldd	r25, Y+5	; 0x05
    1794:	82 30       	cpi	r24, 0x02	; 2
    1796:	91 05       	cpc	r25, r1
    1798:	61 f1       	breq	.+88     	; 0x17f2 <DIO_voidSetPinVal+0x17e>
    179a:	2c 81       	ldd	r18, Y+4	; 0x04
    179c:	3d 81       	ldd	r19, Y+5	; 0x05
    179e:	23 30       	cpi	r18, 0x03	; 3
    17a0:	31 05       	cpc	r19, r1
    17a2:	34 f4       	brge	.+12     	; 0x17b0 <DIO_voidSetPinVal+0x13c>
    17a4:	8c 81       	ldd	r24, Y+4	; 0x04
    17a6:	9d 81       	ldd	r25, Y+5	; 0x05
    17a8:	81 30       	cpi	r24, 0x01	; 1
    17aa:	91 05       	cpc	r25, r1
    17ac:	69 f0       	breq	.+26     	; 0x17c8 <DIO_voidSetPinVal+0x154>
    17ae:	5f c0       	rjmp	.+190    	; 0x186e <DIO_voidSetPinVal+0x1fa>
    17b0:	2c 81       	ldd	r18, Y+4	; 0x04
    17b2:	3d 81       	ldd	r19, Y+5	; 0x05
    17b4:	23 30       	cpi	r18, 0x03	; 3
    17b6:	31 05       	cpc	r19, r1
    17b8:	89 f1       	breq	.+98     	; 0x181c <DIO_voidSetPinVal+0x1a8>
    17ba:	8c 81       	ldd	r24, Y+4	; 0x04
    17bc:	9d 81       	ldd	r25, Y+5	; 0x05
    17be:	84 30       	cpi	r24, 0x04	; 4
    17c0:	91 05       	cpc	r25, r1
    17c2:	09 f4       	brne	.+2      	; 0x17c6 <DIO_voidSetPinVal+0x152>
    17c4:	40 c0       	rjmp	.+128    	; 0x1846 <DIO_voidSetPinVal+0x1d2>
    17c6:	53 c0       	rjmp	.+166    	; 0x186e <DIO_voidSetPinVal+0x1fa>
			{
			case PORTA_REG :CLR_BIT(PORTA,Copy_u8Pin);break;
    17c8:	ab e3       	ldi	r26, 0x3B	; 59
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	eb e3       	ldi	r30, 0x3B	; 59
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	48 2f       	mov	r20, r24
    17d4:	8a 81       	ldd	r24, Y+2	; 0x02
    17d6:	28 2f       	mov	r18, r24
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	02 2e       	mov	r0, r18
    17e0:	02 c0       	rjmp	.+4      	; 0x17e6 <DIO_voidSetPinVal+0x172>
    17e2:	88 0f       	add	r24, r24
    17e4:	99 1f       	adc	r25, r25
    17e6:	0a 94       	dec	r0
    17e8:	e2 f7       	brpl	.-8      	; 0x17e2 <DIO_voidSetPinVal+0x16e>
    17ea:	80 95       	com	r24
    17ec:	84 23       	and	r24, r20
    17ee:	8c 93       	st	X, r24
    17f0:	3e c0       	rjmp	.+124    	; 0x186e <DIO_voidSetPinVal+0x1fa>
			case PORTB_REG :CLR_BIT(PORTB,Copy_u8Pin);break;
    17f2:	a8 e3       	ldi	r26, 0x38	; 56
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	e8 e3       	ldi	r30, 0x38	; 56
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	48 2f       	mov	r20, r24
    17fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1800:	28 2f       	mov	r18, r24
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	02 2e       	mov	r0, r18
    180a:	02 c0       	rjmp	.+4      	; 0x1810 <DIO_voidSetPinVal+0x19c>
    180c:	88 0f       	add	r24, r24
    180e:	99 1f       	adc	r25, r25
    1810:	0a 94       	dec	r0
    1812:	e2 f7       	brpl	.-8      	; 0x180c <DIO_voidSetPinVal+0x198>
    1814:	80 95       	com	r24
    1816:	84 23       	and	r24, r20
    1818:	8c 93       	st	X, r24
    181a:	29 c0       	rjmp	.+82     	; 0x186e <DIO_voidSetPinVal+0x1fa>
			case PORTC_REG :CLR_BIT(PORTC,Copy_u8Pin);break;
    181c:	a5 e3       	ldi	r26, 0x35	; 53
    181e:	b0 e0       	ldi	r27, 0x00	; 0
    1820:	e5 e3       	ldi	r30, 0x35	; 53
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	48 2f       	mov	r20, r24
    1828:	8a 81       	ldd	r24, Y+2	; 0x02
    182a:	28 2f       	mov	r18, r24
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	02 2e       	mov	r0, r18
    1834:	02 c0       	rjmp	.+4      	; 0x183a <DIO_voidSetPinVal+0x1c6>
    1836:	88 0f       	add	r24, r24
    1838:	99 1f       	adc	r25, r25
    183a:	0a 94       	dec	r0
    183c:	e2 f7       	brpl	.-8      	; 0x1836 <DIO_voidSetPinVal+0x1c2>
    183e:	80 95       	com	r24
    1840:	84 23       	and	r24, r20
    1842:	8c 93       	st	X, r24
    1844:	14 c0       	rjmp	.+40     	; 0x186e <DIO_voidSetPinVal+0x1fa>
			case PORTD_REG :CLR_BIT(PORTD,Copy_u8Pin);break;
    1846:	a2 e3       	ldi	r26, 0x32	; 50
    1848:	b0 e0       	ldi	r27, 0x00	; 0
    184a:	e2 e3       	ldi	r30, 0x32	; 50
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	80 81       	ld	r24, Z
    1850:	48 2f       	mov	r20, r24
    1852:	8a 81       	ldd	r24, Y+2	; 0x02
    1854:	28 2f       	mov	r18, r24
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	02 2e       	mov	r0, r18
    185e:	02 c0       	rjmp	.+4      	; 0x1864 <DIO_voidSetPinVal+0x1f0>
    1860:	88 0f       	add	r24, r24
    1862:	99 1f       	adc	r25, r25
    1864:	0a 94       	dec	r0
    1866:	e2 f7       	brpl	.-8      	; 0x1860 <DIO_voidSetPinVal+0x1ec>
    1868:	80 95       	com	r24
    186a:	84 23       	and	r24, r20
    186c:	8c 93       	st	X, r24
			}
		}
	}
}
    186e:	27 96       	adiw	r28, 0x07	; 7
    1870:	0f b6       	in	r0, 0x3f	; 63
    1872:	f8 94       	cli
    1874:	de bf       	out	0x3e, r29	; 62
    1876:	0f be       	out	0x3f, r0	; 63
    1878:	cd bf       	out	0x3d, r28	; 61
    187a:	cf 91       	pop	r28
    187c:	df 91       	pop	r29
    187e:	08 95       	ret

00001880 <DIO_u8GetPinVal>:
u8 DIO_u8GetPinVal(u8 Copy_u8Port,u8 Copy_u8Pin)
{
    1880:	df 93       	push	r29
    1882:	cf 93       	push	r28
    1884:	00 d0       	rcall	.+0      	; 0x1886 <DIO_u8GetPinVal+0x6>
    1886:	00 d0       	rcall	.+0      	; 0x1888 <DIO_u8GetPinVal+0x8>
    1888:	0f 92       	push	r0
    188a:	cd b7       	in	r28, 0x3d	; 61
    188c:	de b7       	in	r29, 0x3e	; 62
    188e:	8a 83       	std	Y+2, r24	; 0x02
    1890:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Reading=0;
    1892:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=7)
    1894:	8b 81       	ldd	r24, Y+3	; 0x03
    1896:	88 30       	cpi	r24, 0x08	; 8
    1898:	08 f0       	brcs	.+2      	; 0x189c <DIO_u8GetPinVal+0x1c>
    189a:	67 c0       	rjmp	.+206    	; 0x196a <DIO_u8GetPinVal+0xea>
	{
		switch(Copy_u8Port)
    189c:	8a 81       	ldd	r24, Y+2	; 0x02
    189e:	28 2f       	mov	r18, r24
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	3d 83       	std	Y+5, r19	; 0x05
    18a4:	2c 83       	std	Y+4, r18	; 0x04
    18a6:	4c 81       	ldd	r20, Y+4	; 0x04
    18a8:	5d 81       	ldd	r21, Y+5	; 0x05
    18aa:	42 30       	cpi	r20, 0x02	; 2
    18ac:	51 05       	cpc	r21, r1
    18ae:	41 f1       	breq	.+80     	; 0x1900 <DIO_u8GetPinVal+0x80>
    18b0:	8c 81       	ldd	r24, Y+4	; 0x04
    18b2:	9d 81       	ldd	r25, Y+5	; 0x05
    18b4:	83 30       	cpi	r24, 0x03	; 3
    18b6:	91 05       	cpc	r25, r1
    18b8:	34 f4       	brge	.+12     	; 0x18c6 <DIO_u8GetPinVal+0x46>
    18ba:	2c 81       	ldd	r18, Y+4	; 0x04
    18bc:	3d 81       	ldd	r19, Y+5	; 0x05
    18be:	21 30       	cpi	r18, 0x01	; 1
    18c0:	31 05       	cpc	r19, r1
    18c2:	61 f0       	breq	.+24     	; 0x18dc <DIO_u8GetPinVal+0x5c>
    18c4:	52 c0       	rjmp	.+164    	; 0x196a <DIO_u8GetPinVal+0xea>
    18c6:	4c 81       	ldd	r20, Y+4	; 0x04
    18c8:	5d 81       	ldd	r21, Y+5	; 0x05
    18ca:	43 30       	cpi	r20, 0x03	; 3
    18cc:	51 05       	cpc	r21, r1
    18ce:	51 f1       	breq	.+84     	; 0x1924 <DIO_u8GetPinVal+0xa4>
    18d0:	8c 81       	ldd	r24, Y+4	; 0x04
    18d2:	9d 81       	ldd	r25, Y+5	; 0x05
    18d4:	84 30       	cpi	r24, 0x04	; 4
    18d6:	91 05       	cpc	r25, r1
    18d8:	b9 f1       	breq	.+110    	; 0x1948 <DIO_u8GetPinVal+0xc8>
    18da:	47 c0       	rjmp	.+142    	; 0x196a <DIO_u8GetPinVal+0xea>
		{
		case PORTA_REG:Local_u8Reading=GET_BIT(PINA,Copy_u8Pin);break;
    18dc:	e9 e3       	ldi	r30, 0x39	; 57
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	28 2f       	mov	r18, r24
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	8b 81       	ldd	r24, Y+3	; 0x03
    18e8:	88 2f       	mov	r24, r24
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	a9 01       	movw	r20, r18
    18ee:	02 c0       	rjmp	.+4      	; 0x18f4 <DIO_u8GetPinVal+0x74>
    18f0:	55 95       	asr	r21
    18f2:	47 95       	ror	r20
    18f4:	8a 95       	dec	r24
    18f6:	e2 f7       	brpl	.-8      	; 0x18f0 <DIO_u8GetPinVal+0x70>
    18f8:	ca 01       	movw	r24, r20
    18fa:	81 70       	andi	r24, 0x01	; 1
    18fc:	89 83       	std	Y+1, r24	; 0x01
    18fe:	35 c0       	rjmp	.+106    	; 0x196a <DIO_u8GetPinVal+0xea>
		case PORTB_REG:Local_u8Reading=GET_BIT(PINB,Copy_u8Pin);break;
    1900:	e6 e3       	ldi	r30, 0x36	; 54
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	80 81       	ld	r24, Z
    1906:	28 2f       	mov	r18, r24
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	8b 81       	ldd	r24, Y+3	; 0x03
    190c:	88 2f       	mov	r24, r24
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	a9 01       	movw	r20, r18
    1912:	02 c0       	rjmp	.+4      	; 0x1918 <DIO_u8GetPinVal+0x98>
    1914:	55 95       	asr	r21
    1916:	47 95       	ror	r20
    1918:	8a 95       	dec	r24
    191a:	e2 f7       	brpl	.-8      	; 0x1914 <DIO_u8GetPinVal+0x94>
    191c:	ca 01       	movw	r24, r20
    191e:	81 70       	andi	r24, 0x01	; 1
    1920:	89 83       	std	Y+1, r24	; 0x01
    1922:	23 c0       	rjmp	.+70     	; 0x196a <DIO_u8GetPinVal+0xea>
		case PORTC_REG:Local_u8Reading=GET_BIT(PINC,Copy_u8Pin);break;
    1924:	e3 e3       	ldi	r30, 0x33	; 51
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	28 2f       	mov	r18, r24
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	88 2f       	mov	r24, r24
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	a9 01       	movw	r20, r18
    1936:	02 c0       	rjmp	.+4      	; 0x193c <DIO_u8GetPinVal+0xbc>
    1938:	55 95       	asr	r21
    193a:	47 95       	ror	r20
    193c:	8a 95       	dec	r24
    193e:	e2 f7       	brpl	.-8      	; 0x1938 <DIO_u8GetPinVal+0xb8>
    1940:	ca 01       	movw	r24, r20
    1942:	81 70       	andi	r24, 0x01	; 1
    1944:	89 83       	std	Y+1, r24	; 0x01
    1946:	11 c0       	rjmp	.+34     	; 0x196a <DIO_u8GetPinVal+0xea>
		case PORTD_REG:Local_u8Reading=GET_BIT(PIND,Copy_u8Pin);break;
    1948:	e0 e3       	ldi	r30, 0x30	; 48
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	28 2f       	mov	r18, r24
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	8b 81       	ldd	r24, Y+3	; 0x03
    1954:	88 2f       	mov	r24, r24
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	a9 01       	movw	r20, r18
    195a:	02 c0       	rjmp	.+4      	; 0x1960 <DIO_u8GetPinVal+0xe0>
    195c:	55 95       	asr	r21
    195e:	47 95       	ror	r20
    1960:	8a 95       	dec	r24
    1962:	e2 f7       	brpl	.-8      	; 0x195c <DIO_u8GetPinVal+0xdc>
    1964:	ca 01       	movw	r24, r20
    1966:	81 70       	andi	r24, 0x01	; 1
    1968:	89 83       	std	Y+1, r24	; 0x01
		}
	}
		return Local_u8Reading;
    196a:	89 81       	ldd	r24, Y+1	; 0x01
	}
    196c:	0f 90       	pop	r0
    196e:	0f 90       	pop	r0
    1970:	0f 90       	pop	r0
    1972:	0f 90       	pop	r0
    1974:	0f 90       	pop	r0
    1976:	cf 91       	pop	r28
    1978:	df 91       	pop	r29
    197a:	08 95       	ret

0000197c <SPI_voidInitMstr>:
#include "SPI_private.h"
#include "SPI_interface.h"


void SPI_voidInitMstr(void)
{
    197c:	df 93       	push	r29
    197e:	cf 93       	push	r28
    1980:	cd b7       	in	r28, 0x3d	; 61
    1982:	de b7       	in	r29, 0x3e	; 62
   //INIT AS A MASTER
	SET_BIT(SPCR,SPCR_MSTR);
    1984:	ad e2       	ldi	r26, 0x2D	; 45
    1986:	b0 e0       	ldi	r27, 0x00	; 0
    1988:	ed e2       	ldi	r30, 0x2D	; 45
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	80 81       	ld	r24, Z
    198e:	80 61       	ori	r24, 0x10	; 16
    1990:	8c 93       	st	X, r24
	//PRE SCALER 64
	SET_BIT(SPCR,SPCR_SPR0);
    1992:	ad e2       	ldi	r26, 0x2D	; 45
    1994:	b0 e0       	ldi	r27, 0x00	; 0
    1996:	ed e2       	ldi	r30, 0x2D	; 45
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 81       	ld	r24, Z
    199c:	81 60       	ori	r24, 0x01	; 1
    199e:	8c 93       	st	X, r24
	SET_BIT(SPCR,SPCR_SPR1);
    19a0:	ad e2       	ldi	r26, 0x2D	; 45
    19a2:	b0 e0       	ldi	r27, 0x00	; 0
    19a4:	ed e2       	ldi	r30, 0x2D	; 45
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	80 81       	ld	r24, Z
    19aa:	82 60       	ori	r24, 0x02	; 2
    19ac:	8c 93       	st	X, r24
	SET_BIT(SPSR,SPSR_SPI2X);
    19ae:	ae e2       	ldi	r26, 0x2E	; 46
    19b0:	b0 e0       	ldi	r27, 0x00	; 0
    19b2:	ee e2       	ldi	r30, 0x2E	; 46
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	80 81       	ld	r24, Z
    19b8:	81 60       	ori	r24, 0x01	; 1
    19ba:	8c 93       	st	X, r24
	//ENABLE CIRCUIT
	SET_BIT(SPCR,SPCR_SPE);
    19bc:	ad e2       	ldi	r26, 0x2D	; 45
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	ed e2       	ldi	r30, 0x2D	; 45
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	80 64       	ori	r24, 0x40	; 64
    19c8:	8c 93       	st	X, r24

}
    19ca:	cf 91       	pop	r28
    19cc:	df 91       	pop	r29
    19ce:	08 95       	ret

000019d0 <SPI_voidInitSlave>:
void SPI_voidInitSlave(void)
{
    19d0:	df 93       	push	r29
    19d2:	cf 93       	push	r28
    19d4:	cd b7       	in	r28, 0x3d	; 61
    19d6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SPCR,SPCR_MSTR);
    19d8:	ad e2       	ldi	r26, 0x2D	; 45
    19da:	b0 e0       	ldi	r27, 0x00	; 0
    19dc:	ed e2       	ldi	r30, 0x2D	; 45
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	8f 7e       	andi	r24, 0xEF	; 239
    19e4:	8c 93       	st	X, r24
	SET_BIT(SPCR,SPCR_SPE);
    19e6:	ad e2       	ldi	r26, 0x2D	; 45
    19e8:	b0 e0       	ldi	r27, 0x00	; 0
    19ea:	ed e2       	ldi	r30, 0x2D	; 45
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	80 81       	ld	r24, Z
    19f0:	80 64       	ori	r24, 0x40	; 64
    19f2:	8c 93       	st	X, r24
}
    19f4:	cf 91       	pop	r28
    19f6:	df 91       	pop	r29
    19f8:	08 95       	ret

000019fa <SPI_u8Tranceive>:

u8 SPI_u8Tranceive(u8 Copy_u8Data)
{
    19fa:	df 93       	push	r29
    19fc:	cf 93       	push	r28
    19fe:	0f 92       	push	r0
    1a00:	cd b7       	in	r28, 0x3d	; 61
    1a02:	de b7       	in	r29, 0x3e	; 62
    1a04:	89 83       	std	Y+1, r24	; 0x01
	SPDR=Copy_u8Data;
    1a06:	ef e2       	ldi	r30, 0x2F	; 47
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	89 81       	ldd	r24, Y+1	; 0x01
    1a0c:	80 83       	st	Z, r24
	while((GET_BIT(SPSR,SPSR_SPIF))==0);
    1a0e:	ee e2       	ldi	r30, 0x2E	; 46
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	88 23       	and	r24, r24
    1a16:	dc f7       	brge	.-10     	; 0x1a0e <SPI_u8Tranceive+0x14>
	return SPDR;
    1a18:	ef e2       	ldi	r30, 0x2F	; 47
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 81       	ld	r24, Z

}
    1a1e:	0f 90       	pop	r0
    1a20:	cf 91       	pop	r28
    1a22:	df 91       	pop	r29
    1a24:	08 95       	ret

00001a26 <TIMER0_Init>:
#include "STD_TYPES.h"
#include "TIMER_interface.h"
#include "TIMER_private.h"
#include "TIMER_config.h"
void TIMER0_Init(void)
{
    1a26:	df 93       	push	r29
    1a28:	cf 93       	push	r28
    1a2a:	cd b7       	in	r28, 0x3d	; 61
    1a2c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0,TCCR0_WGM01);
    1a2e:	a3 e5       	ldi	r26, 0x53	; 83
    1a30:	b0 e0       	ldi	r27, 0x00	; 0
    1a32:	e3 e5       	ldi	r30, 0x53	; 83
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	80 81       	ld	r24, Z
    1a38:	88 60       	ori	r24, 0x08	; 8
    1a3a:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM00);
    1a3c:	a3 e5       	ldi	r26, 0x53	; 83
    1a3e:	b0 e0       	ldi	r27, 0x00	; 0
    1a40:	e3 e5       	ldi	r30, 0x53	; 83
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	80 81       	ld	r24, Z
    1a46:	80 64       	ori	r24, 0x40	; 64
    1a48:	8c 93       	st	X, r24

	//OCR0 = 125;
	SET_BIT(TCCR0,TCCR0_COM01);
    1a4a:	a3 e5       	ldi	r26, 0x53	; 83
    1a4c:	b0 e0       	ldi	r27, 0x00	; 0
    1a4e:	e3 e5       	ldi	r30, 0x53	; 83
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	80 81       	ld	r24, Z
    1a54:	80 62       	ori	r24, 0x20	; 32
    1a56:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_COM00);
    1a58:	a3 e5       	ldi	r26, 0x53	; 83
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	e3 e5       	ldi	r30, 0x53	; 83
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	8f 7e       	andi	r24, 0xEF	; 239
    1a64:	8c 93       	st	X, r24


	//SET_BIT(TIMSK,TIMSK_OCIE0);

	CLR_BIT(TCCR0,TCCR0_CS02);
    1a66:	a3 e5       	ldi	r26, 0x53	; 83
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	e3 e5       	ldi	r30, 0x53	; 83
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	8b 7f       	andi	r24, 0xFB	; 251
    1a72:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS01);
    1a74:	a3 e5       	ldi	r26, 0x53	; 83
    1a76:	b0 e0       	ldi	r27, 0x00	; 0
    1a78:	e3 e5       	ldi	r30, 0x53	; 83
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	80 81       	ld	r24, Z
    1a7e:	82 60       	ori	r24, 0x02	; 2
    1a80:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS00);
    1a82:	a3 e5       	ldi	r26, 0x53	; 83
    1a84:	b0 e0       	ldi	r27, 0x00	; 0
    1a86:	e3 e5       	ldi	r30, 0x53	; 83
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	81 60       	ori	r24, 0x01	; 1
    1a8e:	8c 93       	st	X, r24

}
    1a90:	cf 91       	pop	r28
    1a92:	df 91       	pop	r29
    1a94:	08 95       	ret

00001a96 <TIMER0_voidSetOcrValue>:

void TIMER0_voidSetOcrValue(u8 Copy_u8Value)
{
    1a96:	df 93       	push	r29
    1a98:	cf 93       	push	r28
    1a9a:	0f 92       	push	r0
    1a9c:	cd b7       	in	r28, 0x3d	; 61
    1a9e:	de b7       	in	r29, 0x3e	; 62
    1aa0:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8Value;
    1aa2:	ec e5       	ldi	r30, 0x5C	; 92
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	89 81       	ldd	r24, Y+1	; 0x01
    1aa8:	80 83       	st	Z, r24

}
    1aaa:	0f 90       	pop	r0
    1aac:	cf 91       	pop	r28
    1aae:	df 91       	pop	r29
    1ab0:	08 95       	ret

00001ab2 <TIMER2_Init>:
void TIMER2_Init(void)
{
    1ab2:	df 93       	push	r29
    1ab4:	cf 93       	push	r28
    1ab6:	cd b7       	in	r28, 0x3d	; 61
    1ab8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR2,TCCR2_WGM21);
    1aba:	a5 e4       	ldi	r26, 0x45	; 69
    1abc:	b0 e0       	ldi	r27, 0x00	; 0
    1abe:	e5 e4       	ldi	r30, 0x45	; 69
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	80 81       	ld	r24, Z
    1ac4:	88 60       	ori	r24, 0x08	; 8
    1ac6:	8c 93       	st	X, r24
	SET_BIT(TCCR2,TCCR2_WGM20);
    1ac8:	a5 e4       	ldi	r26, 0x45	; 69
    1aca:	b0 e0       	ldi	r27, 0x00	; 0
    1acc:	e5 e4       	ldi	r30, 0x45	; 69
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 81       	ld	r24, Z
    1ad2:	80 64       	ori	r24, 0x40	; 64
    1ad4:	8c 93       	st	X, r24

	//OCR0 = 125;
	SET_BIT(TCCR2,TCCR2_COM21);
    1ad6:	a5 e4       	ldi	r26, 0x45	; 69
    1ad8:	b0 e0       	ldi	r27, 0x00	; 0
    1ada:	e5 e4       	ldi	r30, 0x45	; 69
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	80 62       	ori	r24, 0x20	; 32
    1ae2:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,TCCR2_COM20);
    1ae4:	a5 e4       	ldi	r26, 0x45	; 69
    1ae6:	b0 e0       	ldi	r27, 0x00	; 0
    1ae8:	e5 e4       	ldi	r30, 0x45	; 69
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	8f 7e       	andi	r24, 0xEF	; 239
    1af0:	8c 93       	st	X, r24


	//SET_BIT(TIMSK,TIMSK_OCIE0);

	CLR_BIT(TCCR2,TCCR2_CS22);
    1af2:	a5 e4       	ldi	r26, 0x45	; 69
    1af4:	b0 e0       	ldi	r27, 0x00	; 0
    1af6:	e5 e4       	ldi	r30, 0x45	; 69
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	80 81       	ld	r24, Z
    1afc:	8b 7f       	andi	r24, 0xFB	; 251
    1afe:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR2_CS21);
    1b00:	a3 e5       	ldi	r26, 0x53	; 83
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	e3 e5       	ldi	r30, 0x53	; 83
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	82 60       	ori	r24, 0x02	; 2
    1b0c:	8c 93       	st	X, r24
	SET_BIT(TCCR2,TCCR2_CS20);
    1b0e:	a5 e4       	ldi	r26, 0x45	; 69
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	e5 e4       	ldi	r30, 0x45	; 69
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	81 60       	ori	r24, 0x01	; 1
    1b1a:	8c 93       	st	X, r24

}
    1b1c:	cf 91       	pop	r28
    1b1e:	df 91       	pop	r29
    1b20:	08 95       	ret

00001b22 <TIMER2_voidSetOcrValue>:

void TIMER2_voidSetOcrValue(u8 Copy_u8Value)
{
    1b22:	df 93       	push	r29
    1b24:	cf 93       	push	r28
    1b26:	0f 92       	push	r0
    1b28:	cd b7       	in	r28, 0x3d	; 61
    1b2a:	de b7       	in	r29, 0x3e	; 62
    1b2c:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = Copy_u8Value;
    1b2e:	e3 e4       	ldi	r30, 0x43	; 67
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	89 81       	ldd	r24, Y+1	; 0x01
    1b34:	80 83       	st	Z, r24

}
    1b36:	0f 90       	pop	r0
    1b38:	cf 91       	pop	r28
    1b3a:	df 91       	pop	r29
    1b3c:	08 95       	ret

00001b3e <TIMER1_voidInit>:


void TIMER1_voidInit(void)
{
    1b3e:	df 93       	push	r29
    1b40:	cf 93       	push	r28
    1b42:	cd b7       	in	r28, 0x3d	; 61
    1b44:	de b7       	in	r29, 0x3e	; 62
	//WGM mode 14
	CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1b46:	af e4       	ldi	r26, 0x4F	; 79
    1b48:	b0 e0       	ldi	r27, 0x00	; 0
    1b4a:	ef e4       	ldi	r30, 0x4F	; 79
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	80 81       	ld	r24, Z
    1b50:	8e 7f       	andi	r24, 0xFE	; 254
    1b52:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_WGM11);
    1b54:	af e4       	ldi	r26, 0x4F	; 79
    1b56:	b0 e0       	ldi	r27, 0x00	; 0
    1b58:	ef e4       	ldi	r30, 0x4F	; 79
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	80 81       	ld	r24, Z
    1b5e:	82 60       	ori	r24, 0x02	; 2
    1b60:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM12);
    1b62:	ae e4       	ldi	r26, 0x4E	; 78
    1b64:	b0 e0       	ldi	r27, 0x00	; 0
    1b66:	ee e4       	ldi	r30, 0x4E	; 78
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 81       	ld	r24, Z
    1b6c:	88 60       	ori	r24, 0x08	; 8
    1b6e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM13);
    1b70:	ae e4       	ldi	r26, 0x4E	; 78
    1b72:	b0 e0       	ldi	r27, 0x00	; 0
    1b74:	ee e4       	ldi	r30, 0x4E	; 78
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	80 81       	ld	r24, Z
    1b7a:	80 61       	ori	r24, 0x10	; 16
    1b7c:	8c 93       	st	X, r24

	SET_BIT(TCCR1A,TCCR1A_COM1A1);
    1b7e:	af e4       	ldi	r26, 0x4F	; 79
    1b80:	b0 e0       	ldi	r27, 0x00	; 0
    1b82:	ef e4       	ldi	r30, 0x4F	; 79
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	80 81       	ld	r24, Z
    1b88:	80 68       	ori	r24, 0x80	; 128
    1b8a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    1b8c:	af e4       	ldi	r26, 0x4F	; 79
    1b8e:	b0 e0       	ldi	r27, 0x00	; 0
    1b90:	ef e4       	ldi	r30, 0x4F	; 79
    1b92:	f0 e0       	ldi	r31, 0x00	; 0
    1b94:	80 81       	ld	r24, Z
    1b96:	8f 7b       	andi	r24, 0xBF	; 191
    1b98:	8c 93       	st	X, r24

	// prescaler
	CLR_BIT(TCCR1B,TCCR1B_CS10);
    1b9a:	ae e4       	ldi	r26, 0x4E	; 78
    1b9c:	b0 e0       	ldi	r27, 0x00	; 0
    1b9e:	ee e4       	ldi	r30, 0x4E	; 78
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 81       	ld	r24, Z
    1ba4:	8e 7f       	andi	r24, 0xFE	; 254
    1ba6:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_CS11);
    1ba8:	ae e4       	ldi	r26, 0x4E	; 78
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	ee e4       	ldi	r30, 0x4E	; 78
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	82 60       	ori	r24, 0x02	; 2
    1bb4:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS12);
    1bb6:	ae e4       	ldi	r26, 0x4E	; 78
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
    1bba:	ee e4       	ldi	r30, 0x4E	; 78
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	80 81       	ld	r24, Z
    1bc0:	8b 7f       	andi	r24, 0xFB	; 251
    1bc2:	8c 93       	st	X, r24





}
    1bc4:	cf 91       	pop	r28
    1bc6:	df 91       	pop	r29
    1bc8:	08 95       	ret

00001bca <TIMER1_voidSetOcrValue>:
void TIMER1_voidSetOcrValue(u16 Copy_u16value)
{
    1bca:	df 93       	push	r29
    1bcc:	cf 93       	push	r28
    1bce:	00 d0       	rcall	.+0      	; 0x1bd0 <TIMER1_voidSetOcrValue+0x6>
    1bd0:	cd b7       	in	r28, 0x3d	; 61
    1bd2:	de b7       	in	r29, 0x3e	; 62
    1bd4:	9a 83       	std	Y+2, r25	; 0x02
    1bd6:	89 83       	std	Y+1, r24	; 0x01

	OCR1A =Copy_u16value;
    1bd8:	ea e4       	ldi	r30, 0x4A	; 74
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	89 81       	ldd	r24, Y+1	; 0x01
    1bde:	9a 81       	ldd	r25, Y+2	; 0x02
    1be0:	91 83       	std	Z+1, r25	; 0x01
    1be2:	80 83       	st	Z, r24

}
    1be4:	0f 90       	pop	r0
    1be6:	0f 90       	pop	r0
    1be8:	cf 91       	pop	r28
    1bea:	df 91       	pop	r29
    1bec:	08 95       	ret

00001bee <TIMER1_voidSetIcrValue>:
void TIMER1_voidSetIcrValue(u16 Copy_u16value)
{
    1bee:	df 93       	push	r29
    1bf0:	cf 93       	push	r28
    1bf2:	00 d0       	rcall	.+0      	; 0x1bf4 <TIMER1_voidSetIcrValue+0x6>
    1bf4:	cd b7       	in	r28, 0x3d	; 61
    1bf6:	de b7       	in	r29, 0x3e	; 62
    1bf8:	9a 83       	std	Y+2, r25	; 0x02
    1bfa:	89 83       	std	Y+1, r24	; 0x01
	ICR1 =Copy_u16value;
    1bfc:	e6 e4       	ldi	r30, 0x46	; 70
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	89 81       	ldd	r24, Y+1	; 0x01
    1c02:	9a 81       	ldd	r25, Y+2	; 0x02
    1c04:	91 83       	std	Z+1, r25	; 0x01
    1c06:	80 83       	st	Z, r24
}
    1c08:	0f 90       	pop	r0
    1c0a:	0f 90       	pop	r0
    1c0c:	cf 91       	pop	r28
    1c0e:	df 91       	pop	r29
    1c10:	08 95       	ret

00001c12 <USART_voidInit>:




void USART_voidInit(void)
{
    1c12:	df 93       	push	r29
    1c14:	cf 93       	push	r28
    1c16:	00 d0       	rcall	.+0      	; 0x1c18 <USART_voidInit+0x6>
    1c18:	0f 92       	push	r0
    1c1a:	cd b7       	in	r28, 0x3d	; 61
    1c1c:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8UCSRC=0;
    1c1e:	1b 82       	std	Y+3, r1	; 0x03

	/*Calculate The Baud Rate From The Equation */
	u16 Local_u8UBRR=(u16)((SYSTEM_FREQUENCY/(16*USART_BOUND_RATE))-1);
    1c20:	83 e3       	ldi	r24, 0x33	; 51
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	9a 83       	std	Y+2, r25	; 0x02
    1c26:	89 83       	std	Y+1, r24	; 0x01

	UBRRH=(u8)(Local_u8UBRR>>8);
    1c28:	e0 e4       	ldi	r30, 0x40	; 64
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	89 81       	ldd	r24, Y+1	; 0x01
    1c2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c30:	89 2f       	mov	r24, r25
    1c32:	99 27       	eor	r25, r25
    1c34:	80 83       	st	Z, r24
	UBRRL=(u8)Local_u8UBRR;
    1c36:	e9 e2       	ldi	r30, 0x29	; 41
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	89 81       	ldd	r24, Y+1	; 0x01
    1c3c:	80 83       	st	Z, r24




#if(USART_MODE==ASYNCHRONOUS)&&(USART_SYSTEM_SPEED==USART_LOWSPEED)
	CLR_BIT(UCSRA,UCSRA_U2X);
    1c3e:	ab e2       	ldi	r26, 0x2B	; 43
    1c40:	b0 e0       	ldi	r27, 0x00	; 0
    1c42:	eb e2       	ldi	r30, 0x2B	; 43
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	80 81       	ld	r24, Z
    1c48:	8d 7f       	andi	r24, 0xFD	; 253
    1c4a:	8c 93       	st	X, r24




#if USART_MODE==ASYNCHRONOUS
	CLR_BIT(Local_u8UCSRC,UCSRC_UMSEL);
    1c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4e:	8f 7b       	andi	r24, 0xBF	; 191
    1c50:	8b 83       	std	Y+3, r24	; 0x03




#if USART_PARITY_MODE==DISABLE
    CLR_BIT(Local_u8UCSRC,UCSRC_UPM1);
    1c52:	8b 81       	ldd	r24, Y+3	; 0x03
    1c54:	8f 7d       	andi	r24, 0xDF	; 223
    1c56:	8b 83       	std	Y+3, r24	; 0x03
    CLR_BIT(Local_u8UCSRC,UCSRC_UPM0);
    1c58:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5a:	8f 7e       	andi	r24, 0xEF	; 239
    1c5c:	8b 83       	std	Y+3, r24	; 0x03
     CLR_BIT(Local_u8UCSRC,UCSRC_UCSZ0);
     CLR_BIT(UCSRB,UCSRB_UCSZ2);

#elif USART_DATA_SIZE==DATA_SIZE_8_BIT

     SET_BIT(Local_u8UCSRC,UCSRC_UCSZ0);
    1c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c60:	82 60       	ori	r24, 0x02	; 2
    1c62:	8b 83       	std	Y+3, r24	; 0x03
     SET_BIT(Local_u8UCSRC,UCSRC_UCSZ1);
    1c64:	8b 81       	ldd	r24, Y+3	; 0x03
    1c66:	84 60       	ori	r24, 0x04	; 4
    1c68:	8b 83       	std	Y+3, r24	; 0x03
     CLR_BIT(UCSRB,UCSRB_UCSZ2);
    1c6a:	aa e2       	ldi	r26, 0x2A	; 42
    1c6c:	b0 e0       	ldi	r27, 0x00	; 0
    1c6e:	ea e2       	ldi	r30, 0x2A	; 42
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	80 81       	ld	r24, Z
    1c74:	8b 7f       	andi	r24, 0xFB	; 251
    1c76:	8c 93       	st	X, r24



#if USART_STOP_BIT==STOP_BIT_1

        CLR_BIT(Local_u8UCSRC,UCSRC_USBS);
    1c78:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7a:	87 7f       	andi	r24, 0xF7	; 247
    1c7c:	8b 83       	std	Y+3, r24	; 0x03
#else
		#error "Wrong USART_STOP_BIT config"
	#endif


     SET_BIT(Local_u8UCSRC,UCSRC_URSEL);
    1c7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c80:	80 68       	ori	r24, 0x80	; 128
    1c82:	8b 83       	std	Y+3, r24	; 0x03
     UCSRC=Local_u8UCSRC;
    1c84:	e0 e4       	ldi	r30, 0x40	; 64
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8a:	80 83       	st	Z, r24

     SET_BIT(UCSRB,UCSRB_TXEN);
    1c8c:	aa e2       	ldi	r26, 0x2A	; 42
    1c8e:	b0 e0       	ldi	r27, 0x00	; 0
    1c90:	ea e2       	ldi	r30, 0x2A	; 42
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	80 81       	ld	r24, Z
    1c96:	88 60       	ori	r24, 0x08	; 8
    1c98:	8c 93       	st	X, r24
     SET_BIT(UCSRB,UCSRB_RXEN);
    1c9a:	aa e2       	ldi	r26, 0x2A	; 42
    1c9c:	b0 e0       	ldi	r27, 0x00	; 0
    1c9e:	ea e2       	ldi	r30, 0x2A	; 42
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	80 81       	ld	r24, Z
    1ca4:	80 61       	ori	r24, 0x10	; 16
    1ca6:	8c 93       	st	X, r24


}
    1ca8:	0f 90       	pop	r0
    1caa:	0f 90       	pop	r0
    1cac:	0f 90       	pop	r0
    1cae:	cf 91       	pop	r28
    1cb0:	df 91       	pop	r29
    1cb2:	08 95       	ret

00001cb4 <USART_voidSendByte>:




void USART_voidSendByte(u8 data)
{
    1cb4:	df 93       	push	r29
    1cb6:	cf 93       	push	r28
    1cb8:	0f 92       	push	r0
    1cba:	cd b7       	in	r28, 0x3d	; 61
    1cbc:	de b7       	in	r29, 0x3e	; 62
    1cbe:	89 83       	std	Y+1, r24	; 0x01
	while(!(GET_BIT(UCSRA,UCSRA_UDRE)));
    1cc0:	eb e2       	ldi	r30, 0x2B	; 43
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 81       	ld	r24, Z
    1cc6:	82 95       	swap	r24
    1cc8:	86 95       	lsr	r24
    1cca:	87 70       	andi	r24, 0x07	; 7
    1ccc:	88 2f       	mov	r24, r24
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	81 70       	andi	r24, 0x01	; 1
    1cd2:	90 70       	andi	r25, 0x00	; 0
    1cd4:	00 97       	sbiw	r24, 0x00	; 0
    1cd6:	a1 f3       	breq	.-24     	; 0x1cc0 <USART_voidSendByte+0xc>
	UDR=data;
    1cd8:	ec e2       	ldi	r30, 0x2C	; 44
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	89 81       	ldd	r24, Y+1	; 0x01
    1cde:	80 83       	st	Z, r24

}
    1ce0:	0f 90       	pop	r0
    1ce2:	cf 91       	pop	r28
    1ce4:	df 91       	pop	r29
    1ce6:	08 95       	ret

00001ce8 <USART_voidRecieveByte>:




u8 USART_voidRecieveByte(void)
{
    1ce8:	df 93       	push	r29
    1cea:	cf 93       	push	r28
    1cec:	cd b7       	in	r28, 0x3d	; 61
    1cee:	de b7       	in	r29, 0x3e	; 62
	while(!(GET_BIT(UCSRA,UCSRA_RXC)));
    1cf0:	eb e2       	ldi	r30, 0x2B	; 43
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	80 81       	ld	r24, Z
    1cf6:	88 23       	and	r24, r24
    1cf8:	dc f7       	brge	.-10     	; 0x1cf0 <USART_voidRecieveByte+0x8>

 return UDR;
    1cfa:	ec e2       	ldi	r30, 0x2C	; 44
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	80 81       	ld	r24, Z
}
    1d00:	cf 91       	pop	r28
    1d02:	df 91       	pop	r29
    1d04:	08 95       	ret

00001d06 <USART_voidSendString>:



void USART_voidSendString(u8 *Copy_u8String)
{
    1d06:	df 93       	push	r29
    1d08:	cf 93       	push	r28
    1d0a:	00 d0       	rcall	.+0      	; 0x1d0c <USART_voidSendString+0x6>
    1d0c:	0f 92       	push	r0
    1d0e:	cd b7       	in	r28, 0x3d	; 61
    1d10:	de b7       	in	r29, 0x3e	; 62
    1d12:	9b 83       	std	Y+3, r25	; 0x03
    1d14:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    1d16:	19 82       	std	Y+1, r1	; 0x01
    1d18:	0e c0       	rjmp	.+28     	; 0x1d36 <USART_voidSendString+0x30>
	while(Copy_u8String[i] !='\0')
	{
		USART_voidSendByte(Copy_u8String[i]);
    1d1a:	89 81       	ldd	r24, Y+1	; 0x01
    1d1c:	28 2f       	mov	r18, r24
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	8a 81       	ldd	r24, Y+2	; 0x02
    1d22:	9b 81       	ldd	r25, Y+3	; 0x03
    1d24:	fc 01       	movw	r30, r24
    1d26:	e2 0f       	add	r30, r18
    1d28:	f3 1f       	adc	r31, r19
    1d2a:	80 81       	ld	r24, Z
    1d2c:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <USART_voidSendByte>
		i++;
    1d30:	89 81       	ldd	r24, Y+1	; 0x01
    1d32:	8f 5f       	subi	r24, 0xFF	; 255
    1d34:	89 83       	std	Y+1, r24	; 0x01


void USART_voidSendString(u8 *Copy_u8String)
{
	u8 i=0;
	while(Copy_u8String[i] !='\0')
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
    1d38:	28 2f       	mov	r18, r24
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d40:	fc 01       	movw	r30, r24
    1d42:	e2 0f       	add	r30, r18
    1d44:	f3 1f       	adc	r31, r19
    1d46:	80 81       	ld	r24, Z
    1d48:	88 23       	and	r24, r24
    1d4a:	39 f7       	brne	.-50     	; 0x1d1a <USART_voidSendString+0x14>
	{
		USART_voidSendByte(Copy_u8String[i]);
		i++;
	}
}
    1d4c:	0f 90       	pop	r0
    1d4e:	0f 90       	pop	r0
    1d50:	0f 90       	pop	r0
    1d52:	cf 91       	pop	r28
    1d54:	df 91       	pop	r29
    1d56:	08 95       	ret

00001d58 <USART_voidReceiveString>:
void USART_voidReceiveString(u8 *Copy_u8String)
{
    1d58:	0f 93       	push	r16
    1d5a:	1f 93       	push	r17
    1d5c:	df 93       	push	r29
    1d5e:	cf 93       	push	r28
    1d60:	00 d0       	rcall	.+0      	; 0x1d62 <USART_voidReceiveString+0xa>
    1d62:	0f 92       	push	r0
    1d64:	cd b7       	in	r28, 0x3d	; 61
    1d66:	de b7       	in	r29, 0x3e	; 62
    1d68:	9b 83       	std	Y+3, r25	; 0x03
    1d6a:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    1d6c:	19 82       	std	Y+1, r1	; 0x01
	Copy_u8String[i]=USART_voidRecieveByte();
    1d6e:	89 81       	ldd	r24, Y+1	; 0x01
    1d70:	28 2f       	mov	r18, r24
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	8a 81       	ldd	r24, Y+2	; 0x02
    1d76:	9b 81       	ldd	r25, Y+3	; 0x03
    1d78:	8c 01       	movw	r16, r24
    1d7a:	02 0f       	add	r16, r18
    1d7c:	13 1f       	adc	r17, r19
    1d7e:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <USART_voidRecieveByte>
    1d82:	f8 01       	movw	r30, r16
    1d84:	80 83       	st	Z, r24
    1d86:	0f c0       	rjmp	.+30     	; 0x1da6 <USART_voidReceiveString+0x4e>

	while(Copy_u8String[i] !=' ')
	{
		i++;
    1d88:	89 81       	ldd	r24, Y+1	; 0x01
    1d8a:	8f 5f       	subi	r24, 0xFF	; 255
    1d8c:	89 83       	std	Y+1, r24	; 0x01
		Copy_u8String[i]=USART_voidRecieveByte();
    1d8e:	89 81       	ldd	r24, Y+1	; 0x01
    1d90:	28 2f       	mov	r18, r24
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	8a 81       	ldd	r24, Y+2	; 0x02
    1d96:	9b 81       	ldd	r25, Y+3	; 0x03
    1d98:	8c 01       	movw	r16, r24
    1d9a:	02 0f       	add	r16, r18
    1d9c:	13 1f       	adc	r17, r19
    1d9e:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <USART_voidRecieveByte>
    1da2:	f8 01       	movw	r30, r16
    1da4:	80 83       	st	Z, r24
void USART_voidReceiveString(u8 *Copy_u8String)
{
	u8 i=0;
	Copy_u8String[i]=USART_voidRecieveByte();

	while(Copy_u8String[i] !=' ')
    1da6:	89 81       	ldd	r24, Y+1	; 0x01
    1da8:	28 2f       	mov	r18, r24
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	8a 81       	ldd	r24, Y+2	; 0x02
    1dae:	9b 81       	ldd	r25, Y+3	; 0x03
    1db0:	fc 01       	movw	r30, r24
    1db2:	e2 0f       	add	r30, r18
    1db4:	f3 1f       	adc	r31, r19
    1db6:	80 81       	ld	r24, Z
    1db8:	80 32       	cpi	r24, 0x20	; 32
    1dba:	31 f7       	brne	.-52     	; 0x1d88 <USART_voidReceiveString+0x30>
		i++;
		Copy_u8String[i]=USART_voidRecieveByte();


	}
	Copy_u8String[i]='\0';
    1dbc:	89 81       	ldd	r24, Y+1	; 0x01
    1dbe:	28 2f       	mov	r18, r24
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc4:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc6:	fc 01       	movw	r30, r24
    1dc8:	e2 0f       	add	r30, r18
    1dca:	f3 1f       	adc	r31, r19
    1dcc:	10 82       	st	Z, r1


}
    1dce:	0f 90       	pop	r0
    1dd0:	0f 90       	pop	r0
    1dd2:	0f 90       	pop	r0
    1dd4:	cf 91       	pop	r28
    1dd6:	df 91       	pop	r29
    1dd8:	1f 91       	pop	r17
    1dda:	0f 91       	pop	r16
    1ddc:	08 95       	ret

00001dde <Compare_string>:
//   }
//   return flag;
//
//}
u8 Compare_string(u8 *str1,u8 *str2)
{
    1dde:	df 93       	push	r29
    1de0:	cf 93       	push	r28
    1de2:	00 d0       	rcall	.+0      	; 0x1de4 <Compare_string+0x6>
    1de4:	00 d0       	rcall	.+0      	; 0x1de6 <Compare_string+0x8>
    1de6:	00 d0       	rcall	.+0      	; 0x1de8 <Compare_string+0xa>
    1de8:	cd b7       	in	r28, 0x3d	; 61
    1dea:	de b7       	in	r29, 0x3e	; 62
    1dec:	9c 83       	std	Y+4, r25	; 0x04
    1dee:	8b 83       	std	Y+3, r24	; 0x03
    1df0:	7e 83       	std	Y+6, r23	; 0x06
    1df2:	6d 83       	std	Y+5, r22	; 0x05

   u8 i=0;
    1df4:	1a 82       	std	Y+2, r1	; 0x02
   u8 flag=1;
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	89 83       	std	Y+1, r24	; 0x01
    1dfa:	1c c0       	rjmp	.+56     	; 0x1e34 <Compare_string+0x56>
   while(str2[i]!='\0')
   {
	  if(str1[i]==str2[i])
    1dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfe:	28 2f       	mov	r18, r24
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	8b 81       	ldd	r24, Y+3	; 0x03
    1e04:	9c 81       	ldd	r25, Y+4	; 0x04
    1e06:	fc 01       	movw	r30, r24
    1e08:	e2 0f       	add	r30, r18
    1e0a:	f3 1f       	adc	r31, r19
    1e0c:	40 81       	ld	r20, Z
    1e0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e10:	28 2f       	mov	r18, r24
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	8d 81       	ldd	r24, Y+5	; 0x05
    1e16:	9e 81       	ldd	r25, Y+6	; 0x06
    1e18:	fc 01       	movw	r30, r24
    1e1a:	e2 0f       	add	r30, r18
    1e1c:	f3 1f       	adc	r31, r19
    1e1e:	80 81       	ld	r24, Z
    1e20:	48 17       	cp	r20, r24
    1e22:	31 f4       	brne	.+12     	; 0x1e30 <Compare_string+0x52>
	  {
		  flag=1;
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	89 83       	std	Y+1, r24	; 0x01
	  {
		  flag=0;
		  break;
	  }

	  i++;
    1e28:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2a:	8f 5f       	subi	r24, 0xFF	; 255
    1e2c:	8a 83       	std	Y+2, r24	; 0x02
    1e2e:	02 c0       	rjmp	.+4      	; 0x1e34 <Compare_string+0x56>
	  {
		  flag=1;
	  }
	  else
	  {
		  flag=0;
    1e30:	19 82       	std	Y+1, r1	; 0x01
    1e32:	0b c0       	rjmp	.+22     	; 0x1e4a <Compare_string+0x6c>
u8 Compare_string(u8 *str1,u8 *str2)
{

   u8 i=0;
   u8 flag=1;
   while(str2[i]!='\0')
    1e34:	8a 81       	ldd	r24, Y+2	; 0x02
    1e36:	28 2f       	mov	r18, r24
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e3e:	fc 01       	movw	r30, r24
    1e40:	e2 0f       	add	r30, r18
    1e42:	f3 1f       	adc	r31, r19
    1e44:	80 81       	ld	r24, Z
    1e46:	88 23       	and	r24, r24
    1e48:	c9 f6       	brne	.-78     	; 0x1dfc <Compare_string+0x1e>
		  break;
	  }

	  i++;
   }
   return flag;
    1e4a:	89 81       	ldd	r24, Y+1	; 0x01

}
    1e4c:	26 96       	adiw	r28, 0x06	; 6
    1e4e:	0f b6       	in	r0, 0x3f	; 63
    1e50:	f8 94       	cli
    1e52:	de bf       	out	0x3e, r29	; 62
    1e54:	0f be       	out	0x3f, r0	; 63
    1e56:	cd bf       	out	0x3d, r28	; 61
    1e58:	cf 91       	pop	r28
    1e5a:	df 91       	pop	r29
    1e5c:	08 95       	ret

00001e5e <main>:
		{"AHMED","1122"}};

u8 static flag = 0;

void main(void)
{
    1e5e:	df 93       	push	r29
    1e60:	cf 93       	push	r28
    1e62:	cd b7       	in	r28, 0x3d	; 61
    1e64:	de b7       	in	r29, 0x3e	; 62
    1e66:	a6 97       	sbiw	r28, 0x26	; 38
    1e68:	0f b6       	in	r0, 0x3f	; 63
    1e6a:	f8 94       	cli
    1e6c:	de bf       	out	0x3e, r29	; 62
    1e6e:	0f be       	out	0x3f, r0	; 63
    1e70:	cd bf       	out	0x3d, r28	; 61
	/*Direction*/
	DIO_voidSetPortDir(PORTA_REG,PORT_DIR_OUT);
    1e72:	81 e0       	ldi	r24, 0x01	; 1
    1e74:	6f ef       	ldi	r22, 0xFF	; 255
    1e76:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPortDir>
	DIO_voidSetPortDir(PORTC_REG,PORT_DIR_OUT);
    1e7a:	83 e0       	ldi	r24, 0x03	; 3
    1e7c:	6f ef       	ldi	r22, 0xFF	; 255
    1e7e:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPortDir>

	DIO_voidSetPinDir(PORTD_REG,PIN7,PIN_DIR_OUT);
    1e82:	84 e0       	ldi	r24, 0x04	; 4
    1e84:	67 e0       	ldi	r22, 0x07	; 7
    1e86:	41 e0       	ldi	r20, 0x01	; 1
    1e88:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(PORTD_REG,PIN5,PIN_DIR_OUT);
    1e8c:	84 e0       	ldi	r24, 0x04	; 4
    1e8e:	65 e0       	ldi	r22, 0x05	; 5
    1e90:	41 e0       	ldi	r20, 0x01	; 1
    1e92:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(PORTD_REG,PIN0,PIN_DIR_IN);
    1e96:	84 e0       	ldi	r24, 0x04	; 4
    1e98:	60 e0       	ldi	r22, 0x00	; 0
    1e9a:	40 e0       	ldi	r20, 0x00	; 0
    1e9c:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(PORTD_REG,PIN1,PIN_DIR_OUT);
    1ea0:	84 e0       	ldi	r24, 0x04	; 4
    1ea2:	61 e0       	ldi	r22, 0x01	; 1
    1ea4:	41 e0       	ldi	r20, 0x01	; 1
    1ea6:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(PORTB_REG,PIN3,PIN_DIR_OUT);
    1eaa:	82 e0       	ldi	r24, 0x02	; 2
    1eac:	63 e0       	ldi	r22, 0x03	; 3
    1eae:	41 e0       	ldi	r20, 0x01	; 1
    1eb0:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinDir>

	/*select master output*/
	DIO_voidSetPinDir(PORTB_REG,PIN0,PIN_DIR_OUT);
    1eb4:	82 e0       	ldi	r24, 0x02	; 2
    1eb6:	60 e0       	ldi	r22, 0x00	; 0
    1eb8:	41 e0       	ldi	r20, 0x01	; 1
    1eba:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinDir>

	DIO_voidSetPinDir(PORTB_REG,PIN5,PIN_DIR_OUT);
    1ebe:	82 e0       	ldi	r24, 0x02	; 2
    1ec0:	65 e0       	ldi	r22, 0x05	; 5
    1ec2:	41 e0       	ldi	r20, 0x01	; 1
    1ec4:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinDir>
	/**/
	DIO_voidSetPinDir(PORTB_REG,PIN4,PIN_DIR_OUT);
    1ec8:	82 e0       	ldi	r24, 0x02	; 2
    1eca:	64 e0       	ldi	r22, 0x04	; 4
    1ecc:	41 e0       	ldi	r20, 0x01	; 1
    1ece:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinDir>
	DIO_voidSetPinVal(PORTB_REG,PIN4,PIN_VAL_LOW);
    1ed2:	82 e0       	ldi	r24, 0x02	; 2
    1ed4:	64 e0       	ldi	r22, 0x04	; 4
    1ed6:	40 e0       	ldi	r20, 0x00	; 0
    1ed8:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_voidSetPinVal>
	DIO_voidSetPinDir(PORTB_REG,PIN6,PIN_DIR_IN);
    1edc:	82 e0       	ldi	r24, 0x02	; 2
    1ede:	66 e0       	ldi	r22, 0x06	; 6
    1ee0:	40 e0       	ldi	r20, 0x00	; 0
    1ee2:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinDir>
	/*CS*/
	DIO_voidSetPinDir(PORTB_REG,PIN7,PIN_DIR_OUT);
    1ee6:	82 e0       	ldi	r24, 0x02	; 2
    1ee8:	67 e0       	ldi	r22, 0x07	; 7
    1eea:	41 e0       	ldi	r20, 0x01	; 1
    1eec:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinDir>



	/*Initial*/
	CLCD_voidInit();
    1ef0:	0e 94 df 06 	call	0xdbe	; 0xdbe <CLCD_voidInit>
	USART_voidInit();
    1ef4:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <USART_voidInit>
	TIMER1_voidInit();
    1ef8:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <TIMER1_voidInit>
	TIMER1_voidSetIcrValue(20000);
    1efc:	80 e2       	ldi	r24, 0x20	; 32
    1efe:	9e e4       	ldi	r25, 0x4E	; 78
    1f00:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <TIMER1_voidSetIcrValue>
	SPI_voidInitMstr();
    1f04:	0e 94 be 0c 	call	0x197c	; 0x197c <SPI_voidInitMstr>
	{
		user_name[10];



		CLCD_voidSetClear();
    1f08:	0e 94 a2 09 	call	0x1344	; 0x1344 <CLCD_voidSetClear>
		CLCD_voidSendString("Enter username");
    1f0c:	80 e6       	ldi	r24, 0x60	; 96
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	0e 94 c3 08 	call	0x1186	; 0x1186 <CLCD_voidSendString>

		USART_voidSendString("Enter The User Name\r\n");
    1f14:	8f e6       	ldi	r24, 0x6F	; 111
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <USART_voidSendString>
    1f1c:	80 e0       	ldi	r24, 0x00	; 0
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	a8 ec       	ldi	r26, 0xC8	; 200
    1f22:	b2 e4       	ldi	r27, 0x42	; 66
    1f24:	89 8f       	std	Y+25, r24	; 0x19
    1f26:	9a 8f       	std	Y+26, r25	; 0x1a
    1f28:	ab 8f       	std	Y+27, r26	; 0x1b
    1f2a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f2c:	69 8d       	ldd	r22, Y+25	; 0x19
    1f2e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f32:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	4a ef       	ldi	r20, 0xFA	; 250
    1f3a:	54 e4       	ldi	r21, 0x44	; 68
    1f3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f40:	dc 01       	movw	r26, r24
    1f42:	cb 01       	movw	r24, r22
    1f44:	8d 8b       	std	Y+21, r24	; 0x15
    1f46:	9e 8b       	std	Y+22, r25	; 0x16
    1f48:	af 8b       	std	Y+23, r26	; 0x17
    1f4a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f4c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f4e:	7e 89       	ldd	r23, Y+22	; 0x16
    1f50:	8f 89       	ldd	r24, Y+23	; 0x17
    1f52:	98 8d       	ldd	r25, Y+24	; 0x18
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	40 e8       	ldi	r20, 0x80	; 128
    1f5a:	5f e3       	ldi	r21, 0x3F	; 63
    1f5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f60:	88 23       	and	r24, r24
    1f62:	2c f4       	brge	.+10     	; 0x1f6e <main+0x110>
		__ticks = 1;
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	9c 8b       	std	Y+20, r25	; 0x14
    1f6a:	8b 8b       	std	Y+19, r24	; 0x13
    1f6c:	3f c0       	rjmp	.+126    	; 0x1fec <main+0x18e>
	else if (__tmp > 65535)
    1f6e:	6d 89       	ldd	r22, Y+21	; 0x15
    1f70:	7e 89       	ldd	r23, Y+22	; 0x16
    1f72:	8f 89       	ldd	r24, Y+23	; 0x17
    1f74:	98 8d       	ldd	r25, Y+24	; 0x18
    1f76:	20 e0       	ldi	r18, 0x00	; 0
    1f78:	3f ef       	ldi	r19, 0xFF	; 255
    1f7a:	4f e7       	ldi	r20, 0x7F	; 127
    1f7c:	57 e4       	ldi	r21, 0x47	; 71
    1f7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f82:	18 16       	cp	r1, r24
    1f84:	4c f5       	brge	.+82     	; 0x1fd8 <main+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f86:	69 8d       	ldd	r22, Y+25	; 0x19
    1f88:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f8e:	20 e0       	ldi	r18, 0x00	; 0
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	40 e2       	ldi	r20, 0x20	; 32
    1f94:	51 e4       	ldi	r21, 0x41	; 65
    1f96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f9a:	dc 01       	movw	r26, r24
    1f9c:	cb 01       	movw	r24, r22
    1f9e:	bc 01       	movw	r22, r24
    1fa0:	cd 01       	movw	r24, r26
    1fa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	cb 01       	movw	r24, r22
    1faa:	9c 8b       	std	Y+20, r25	; 0x14
    1fac:	8b 8b       	std	Y+19, r24	; 0x13
    1fae:	0f c0       	rjmp	.+30     	; 0x1fce <main+0x170>
    1fb0:	88 ec       	ldi	r24, 0xC8	; 200
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	9a 8b       	std	Y+18, r25	; 0x12
    1fb6:	89 8b       	std	Y+17, r24	; 0x11
    1fb8:	89 89       	ldd	r24, Y+17	; 0x11
    1fba:	9a 89       	ldd	r25, Y+18	; 0x12
    1fbc:	01 97       	sbiw	r24, 0x01	; 1
    1fbe:	f1 f7       	brne	.-4      	; 0x1fbc <main+0x15e>
    1fc0:	9a 8b       	std	Y+18, r25	; 0x12
    1fc2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc4:	8b 89       	ldd	r24, Y+19	; 0x13
    1fc6:	9c 89       	ldd	r25, Y+20	; 0x14
    1fc8:	01 97       	sbiw	r24, 0x01	; 1
    1fca:	9c 8b       	std	Y+20, r25	; 0x14
    1fcc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fce:	8b 89       	ldd	r24, Y+19	; 0x13
    1fd0:	9c 89       	ldd	r25, Y+20	; 0x14
    1fd2:	00 97       	sbiw	r24, 0x00	; 0
    1fd4:	69 f7       	brne	.-38     	; 0x1fb0 <main+0x152>
    1fd6:	14 c0       	rjmp	.+40     	; 0x2000 <main+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd8:	6d 89       	ldd	r22, Y+21	; 0x15
    1fda:	7e 89       	ldd	r23, Y+22	; 0x16
    1fdc:	8f 89       	ldd	r24, Y+23	; 0x17
    1fde:	98 8d       	ldd	r25, Y+24	; 0x18
    1fe0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	cb 01       	movw	r24, r22
    1fe8:	9c 8b       	std	Y+20, r25	; 0x14
    1fea:	8b 8b       	std	Y+19, r24	; 0x13
    1fec:	8b 89       	ldd	r24, Y+19	; 0x13
    1fee:	9c 89       	ldd	r25, Y+20	; 0x14
    1ff0:	98 8b       	std	Y+16, r25	; 0x10
    1ff2:	8f 87       	std	Y+15, r24	; 0x0f
    1ff4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ff6:	98 89       	ldd	r25, Y+16	; 0x10
    1ff8:	01 97       	sbiw	r24, 0x01	; 1
    1ffa:	f1 f7       	brne	.-4      	; 0x1ff8 <main+0x19a>
    1ffc:	98 8b       	std	Y+16, r25	; 0x10
    1ffe:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);

		USART_voidReceiveString(user_name);
    2000:	ce 01       	movw	r24, r28
    2002:	4d 96       	adiw	r24, 0x1d	; 29
    2004:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <USART_voidReceiveString>
    2008:	80 e0       	ldi	r24, 0x00	; 0
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	a8 ec       	ldi	r26, 0xC8	; 200
    200e:	b2 e4       	ldi	r27, 0x42	; 66
    2010:	8b 87       	std	Y+11, r24	; 0x0b
    2012:	9c 87       	std	Y+12, r25	; 0x0c
    2014:	ad 87       	std	Y+13, r26	; 0x0d
    2016:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2018:	6b 85       	ldd	r22, Y+11	; 0x0b
    201a:	7c 85       	ldd	r23, Y+12	; 0x0c
    201c:	8d 85       	ldd	r24, Y+13	; 0x0d
    201e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2020:	20 e0       	ldi	r18, 0x00	; 0
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	4a ef       	ldi	r20, 0xFA	; 250
    2026:	54 e4       	ldi	r21, 0x44	; 68
    2028:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    202c:	dc 01       	movw	r26, r24
    202e:	cb 01       	movw	r24, r22
    2030:	8f 83       	std	Y+7, r24	; 0x07
    2032:	98 87       	std	Y+8, r25	; 0x08
    2034:	a9 87       	std	Y+9, r26	; 0x09
    2036:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2038:	6f 81       	ldd	r22, Y+7	; 0x07
    203a:	78 85       	ldd	r23, Y+8	; 0x08
    203c:	89 85       	ldd	r24, Y+9	; 0x09
    203e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2040:	20 e0       	ldi	r18, 0x00	; 0
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	40 e8       	ldi	r20, 0x80	; 128
    2046:	5f e3       	ldi	r21, 0x3F	; 63
    2048:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    204c:	88 23       	and	r24, r24
    204e:	2c f4       	brge	.+10     	; 0x205a <main+0x1fc>
		__ticks = 1;
    2050:	81 e0       	ldi	r24, 0x01	; 1
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	9e 83       	std	Y+6, r25	; 0x06
    2056:	8d 83       	std	Y+5, r24	; 0x05
    2058:	3f c0       	rjmp	.+126    	; 0x20d8 <main+0x27a>
	else if (__tmp > 65535)
    205a:	6f 81       	ldd	r22, Y+7	; 0x07
    205c:	78 85       	ldd	r23, Y+8	; 0x08
    205e:	89 85       	ldd	r24, Y+9	; 0x09
    2060:	9a 85       	ldd	r25, Y+10	; 0x0a
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	3f ef       	ldi	r19, 0xFF	; 255
    2066:	4f e7       	ldi	r20, 0x7F	; 127
    2068:	57 e4       	ldi	r21, 0x47	; 71
    206a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    206e:	18 16       	cp	r1, r24
    2070:	4c f5       	brge	.+82     	; 0x20c4 <main+0x266>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2072:	6b 85       	ldd	r22, Y+11	; 0x0b
    2074:	7c 85       	ldd	r23, Y+12	; 0x0c
    2076:	8d 85       	ldd	r24, Y+13	; 0x0d
    2078:	9e 85       	ldd	r25, Y+14	; 0x0e
    207a:	20 e0       	ldi	r18, 0x00	; 0
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	40 e2       	ldi	r20, 0x20	; 32
    2080:	51 e4       	ldi	r21, 0x41	; 65
    2082:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2086:	dc 01       	movw	r26, r24
    2088:	cb 01       	movw	r24, r22
    208a:	bc 01       	movw	r22, r24
    208c:	cd 01       	movw	r24, r26
    208e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2092:	dc 01       	movw	r26, r24
    2094:	cb 01       	movw	r24, r22
    2096:	9e 83       	std	Y+6, r25	; 0x06
    2098:	8d 83       	std	Y+5, r24	; 0x05
    209a:	0f c0       	rjmp	.+30     	; 0x20ba <main+0x25c>
    209c:	88 ec       	ldi	r24, 0xC8	; 200
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	9c 83       	std	Y+4, r25	; 0x04
    20a2:	8b 83       	std	Y+3, r24	; 0x03
    20a4:	8b 81       	ldd	r24, Y+3	; 0x03
    20a6:	9c 81       	ldd	r25, Y+4	; 0x04
    20a8:	01 97       	sbiw	r24, 0x01	; 1
    20aa:	f1 f7       	brne	.-4      	; 0x20a8 <main+0x24a>
    20ac:	9c 83       	std	Y+4, r25	; 0x04
    20ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20b0:	8d 81       	ldd	r24, Y+5	; 0x05
    20b2:	9e 81       	ldd	r25, Y+6	; 0x06
    20b4:	01 97       	sbiw	r24, 0x01	; 1
    20b6:	9e 83       	std	Y+6, r25	; 0x06
    20b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ba:	8d 81       	ldd	r24, Y+5	; 0x05
    20bc:	9e 81       	ldd	r25, Y+6	; 0x06
    20be:	00 97       	sbiw	r24, 0x00	; 0
    20c0:	69 f7       	brne	.-38     	; 0x209c <main+0x23e>
    20c2:	14 c0       	rjmp	.+40     	; 0x20ec <main+0x28e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20c4:	6f 81       	ldd	r22, Y+7	; 0x07
    20c6:	78 85       	ldd	r23, Y+8	; 0x08
    20c8:	89 85       	ldd	r24, Y+9	; 0x09
    20ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    20cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d0:	dc 01       	movw	r26, r24
    20d2:	cb 01       	movw	r24, r22
    20d4:	9e 83       	std	Y+6, r25	; 0x06
    20d6:	8d 83       	std	Y+5, r24	; 0x05
    20d8:	8d 81       	ldd	r24, Y+5	; 0x05
    20da:	9e 81       	ldd	r25, Y+6	; 0x06
    20dc:	9a 83       	std	Y+2, r25	; 0x02
    20de:	89 83       	std	Y+1, r24	; 0x01
    20e0:	89 81       	ldd	r24, Y+1	; 0x01
    20e2:	9a 81       	ldd	r25, Y+2	; 0x02
    20e4:	01 97       	sbiw	r24, 0x01	; 1
    20e6:	f1 f7       	brne	.-4      	; 0x20e4 <main+0x286>
    20e8:	9a 83       	std	Y+2, r25	; 0x02
    20ea:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);



		if(Compare_string(user_name,user_arr[0].username))
    20ec:	ce 01       	movw	r24, r28
    20ee:	4d 96       	adiw	r24, 0x1d	; 29
    20f0:	22 e4       	ldi	r18, 0x42	; 66
    20f2:	32 e0       	ldi	r19, 0x02	; 2
    20f4:	b9 01       	movw	r22, r18
    20f6:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <Compare_string>
    20fa:	88 23       	and	r24, r24
    20fc:	29 f0       	breq	.+10     	; 0x2108 <main+0x2aa>
		{

			func(user_arr[0].password);
    20fe:	8c e4       	ldi	r24, 0x4C	; 76
    2100:	92 e0       	ldi	r25, 0x02	; 2
    2102:	0e 94 08 11 	call	0x2210	; 0x2210 <func>
    2106:	00 cf       	rjmp	.-512    	; 0x1f08 <main+0xaa>

		}

		else if(Compare_string(user_name,user_arr[1].username))
    2108:	ce 01       	movw	r24, r28
    210a:	4d 96       	adiw	r24, 0x1d	; 29
    210c:	26 e5       	ldi	r18, 0x56	; 86
    210e:	32 e0       	ldi	r19, 0x02	; 2
    2110:	b9 01       	movw	r22, r18
    2112:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <Compare_string>
    2116:	88 23       	and	r24, r24
    2118:	29 f0       	breq	.+10     	; 0x2124 <main+0x2c6>
		{

			func(user_arr[1].password);
    211a:	80 e6       	ldi	r24, 0x60	; 96
    211c:	92 e0       	ldi	r25, 0x02	; 2
    211e:	0e 94 08 11 	call	0x2210	; 0x2210 <func>
    2122:	f2 ce       	rjmp	.-540    	; 0x1f08 <main+0xaa>

		}
		else if(Compare_string(user_name,user_arr[2].username))
    2124:	ce 01       	movw	r24, r28
    2126:	4d 96       	adiw	r24, 0x1d	; 29
    2128:	2a e6       	ldi	r18, 0x6A	; 106
    212a:	32 e0       	ldi	r19, 0x02	; 2
    212c:	b9 01       	movw	r22, r18
    212e:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <Compare_string>
    2132:	88 23       	and	r24, r24
    2134:	29 f0       	breq	.+10     	; 0x2140 <main+0x2e2>
		{

			func(user_arr[2].password);
    2136:	84 e7       	ldi	r24, 0x74	; 116
    2138:	92 e0       	ldi	r25, 0x02	; 2
    213a:	0e 94 08 11 	call	0x2210	; 0x2210 <func>
    213e:	e4 ce       	rjmp	.-568    	; 0x1f08 <main+0xaa>

		}
		else if(Compare_string(user_name,user_arr[3].username))
    2140:	ce 01       	movw	r24, r28
    2142:	4d 96       	adiw	r24, 0x1d	; 29
    2144:	2e e7       	ldi	r18, 0x7E	; 126
    2146:	32 e0       	ldi	r19, 0x02	; 2
    2148:	b9 01       	movw	r22, r18
    214a:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <Compare_string>
    214e:	88 23       	and	r24, r24
    2150:	29 f0       	breq	.+10     	; 0x215c <main+0x2fe>
		{

			func(user_arr[3].password);
    2152:	88 e8       	ldi	r24, 0x88	; 136
    2154:	92 e0       	ldi	r25, 0x02	; 2
    2156:	0e 94 08 11 	call	0x2210	; 0x2210 <func>
    215a:	d6 ce       	rjmp	.-596    	; 0x1f08 <main+0xaa>

		}
		else if(Compare_string(user_name,user_arr[4].username))
    215c:	ce 01       	movw	r24, r28
    215e:	4d 96       	adiw	r24, 0x1d	; 29
    2160:	22 e9       	ldi	r18, 0x92	; 146
    2162:	32 e0       	ldi	r19, 0x02	; 2
    2164:	b9 01       	movw	r22, r18
    2166:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <Compare_string>
    216a:	88 23       	and	r24, r24
    216c:	29 f0       	breq	.+10     	; 0x2178 <main+0x31a>
		{

			func(user_arr[4].password);
    216e:	8c e9       	ldi	r24, 0x9C	; 156
    2170:	92 e0       	ldi	r25, 0x02	; 2
    2172:	0e 94 08 11 	call	0x2210	; 0x2210 <func>
    2176:	c8 ce       	rjmp	.-624    	; 0x1f08 <main+0xaa>

		}
		else if(Compare_string(user_name,user_arr[5].username))
    2178:	ce 01       	movw	r24, r28
    217a:	4d 96       	adiw	r24, 0x1d	; 29
    217c:	26 ea       	ldi	r18, 0xA6	; 166
    217e:	32 e0       	ldi	r19, 0x02	; 2
    2180:	b9 01       	movw	r22, r18
    2182:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <Compare_string>
    2186:	88 23       	and	r24, r24
    2188:	29 f0       	breq	.+10     	; 0x2194 <main+0x336>
		{

			func(user_arr[5].password);
    218a:	80 eb       	ldi	r24, 0xB0	; 176
    218c:	92 e0       	ldi	r25, 0x02	; 2
    218e:	0e 94 08 11 	call	0x2210	; 0x2210 <func>
    2192:	ba ce       	rjmp	.-652    	; 0x1f08 <main+0xaa>

		}
		else if(Compare_string(user_name,user_arr[6].username))
    2194:	ce 01       	movw	r24, r28
    2196:	4d 96       	adiw	r24, 0x1d	; 29
    2198:	2a eb       	ldi	r18, 0xBA	; 186
    219a:	32 e0       	ldi	r19, 0x02	; 2
    219c:	b9 01       	movw	r22, r18
    219e:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <Compare_string>
    21a2:	88 23       	and	r24, r24
    21a4:	29 f0       	breq	.+10     	; 0x21b0 <main+0x352>
		{

			func(user_arr[6].password);
    21a6:	84 ec       	ldi	r24, 0xC4	; 196
    21a8:	92 e0       	ldi	r25, 0x02	; 2
    21aa:	0e 94 08 11 	call	0x2210	; 0x2210 <func>
    21ae:	ac ce       	rjmp	.-680    	; 0x1f08 <main+0xaa>

		}

		else if(Compare_string(user_name,user_arr[7].username))
    21b0:	ce 01       	movw	r24, r28
    21b2:	4d 96       	adiw	r24, 0x1d	; 29
    21b4:	2e ec       	ldi	r18, 0xCE	; 206
    21b6:	32 e0       	ldi	r19, 0x02	; 2
    21b8:	b9 01       	movw	r22, r18
    21ba:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <Compare_string>
    21be:	88 23       	and	r24, r24
    21c0:	29 f0       	breq	.+10     	; 0x21cc <main+0x36e>
		{

			func(user_arr[7].password);
    21c2:	88 ed       	ldi	r24, 0xD8	; 216
    21c4:	92 e0       	ldi	r25, 0x02	; 2
    21c6:	0e 94 08 11 	call	0x2210	; 0x2210 <func>
    21ca:	9e ce       	rjmp	.-708    	; 0x1f08 <main+0xaa>

		}
		else if(Compare_string(user_name+2,user_arr[8].username))
    21cc:	ce 01       	movw	r24, r28
    21ce:	4d 96       	adiw	r24, 0x1d	; 29
    21d0:	02 96       	adiw	r24, 0x02	; 2
    21d2:	22 ee       	ldi	r18, 0xE2	; 226
    21d4:	32 e0       	ldi	r19, 0x02	; 2
    21d6:	b9 01       	movw	r22, r18
    21d8:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <Compare_string>
    21dc:	88 23       	and	r24, r24
    21de:	29 f0       	breq	.+10     	; 0x21ea <main+0x38c>
		{

			func(user_arr[8].password);
    21e0:	8c ee       	ldi	r24, 0xEC	; 236
    21e2:	92 e0       	ldi	r25, 0x02	; 2
    21e4:	0e 94 08 11 	call	0x2210	; 0x2210 <func>
    21e8:	8f ce       	rjmp	.-738    	; 0x1f08 <main+0xaa>

		}
		else if(Compare_string(user_name,user_arr[9].username))
    21ea:	ce 01       	movw	r24, r28
    21ec:	4d 96       	adiw	r24, 0x1d	; 29
    21ee:	26 ef       	ldi	r18, 0xF6	; 246
    21f0:	32 e0       	ldi	r19, 0x02	; 2
    21f2:	b9 01       	movw	r22, r18
    21f4:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <Compare_string>
    21f8:	88 23       	and	r24, r24
    21fa:	29 f0       	breq	.+10     	; 0x2206 <main+0x3a8>
		{

			func(user_arr[9].password);
    21fc:	80 e0       	ldi	r24, 0x00	; 0
    21fe:	93 e0       	ldi	r25, 0x03	; 3
    2200:	0e 94 08 11 	call	0x2210	; 0x2210 <func>
    2204:	81 ce       	rjmp	.-766    	; 0x1f08 <main+0xaa>

		}
		else
		{
			USART_voidSendString("\r\nusername not found\r\n");
    2206:	85 e8       	ldi	r24, 0x85	; 133
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <USART_voidSendString>
    220e:	7c ce       	rjmp	.-776    	; 0x1f08 <main+0xaa>

00002210 <func>:
	}

}

void func(u8 *PTR)
{
    2210:	0f 93       	push	r16
    2212:	1f 93       	push	r17
    2214:	df 93       	push	r29
    2216:	cf 93       	push	r28
    2218:	cd b7       	in	r28, 0x3d	; 61
    221a:	de b7       	in	r29, 0x3e	; 62
    221c:	c9 55       	subi	r28, 0x59	; 89
    221e:	d0 40       	sbci	r29, 0x00	; 0
    2220:	0f b6       	in	r0, 0x3f	; 63
    2222:	f8 94       	cli
    2224:	de bf       	out	0x3e, r29	; 62
    2226:	0f be       	out	0x3f, r0	; 63
    2228:	cd bf       	out	0x3d, r28	; 61
    222a:	fe 01       	movw	r30, r28
    222c:	e8 5a       	subi	r30, 0xA8	; 168
    222e:	ff 4f       	sbci	r31, 0xFF	; 255
    2230:	91 83       	std	Z+1, r25	; 0x01
    2232:	80 83       	st	Z, r24
	u8 copy_u8tries = 3;
    2234:	fe 01       	movw	r30, r28
    2236:	e3 5b       	subi	r30, 0xB3	; 179
    2238:	ff 4f       	sbci	r31, 0xFF	; 255
    223a:	83 e0       	ldi	r24, 0x03	; 3
    223c:	80 83       	st	Z, r24
    223e:	57 c1       	rjmp	.+686    	; 0x24ee <func+0x2de>
	u8 pass[10];

	while(copy_u8tries)
	{
		CLCD_voidSetClear();
    2240:	0e 94 a2 09 	call	0x1344	; 0x1344 <CLCD_voidSetClear>

		CLCD_voidSendString("Enter Passward");
    2244:	8c e9       	ldi	r24, 0x9C	; 156
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	0e 94 c3 08 	call	0x1186	; 0x1186 <CLCD_voidSendString>
		CLCD_voidSetPos(1,0);
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	60 e0       	ldi	r22, 0x00	; 0
    2252:	70 e0       	ldi	r23, 0x00	; 0
    2254:	0e 94 43 09 	call	0x1286	; 0x1286 <CLCD_voidSetPos>
		CLCD_voidSendString("tries :");
    2258:	8b ea       	ldi	r24, 0xAB	; 171
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	0e 94 c3 08 	call	0x1186	; 0x1186 <CLCD_voidSendString>
		CLCD_voidSetPos(1,6);
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	66 e0       	ldi	r22, 0x06	; 6
    2266:	70 e0       	ldi	r23, 0x00	; 0
    2268:	0e 94 43 09 	call	0x1286	; 0x1286 <CLCD_voidSetPos>
		CLCD_voidSendNum(copy_u8tries);
    226c:	fe 01       	movw	r30, r28
    226e:	e3 5b       	subi	r30, 0xB3	; 179
    2270:	ff 4f       	sbci	r31, 0xFF	; 255
    2272:	80 81       	ld	r24, Z
    2274:	88 2f       	mov	r24, r24
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <CLCD_voidSendNum>

		USART_voidSendString("\r\nEnter Your Passward\r\n");
    227c:	83 eb       	ldi	r24, 0xB3	; 179
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <USART_voidSendString>
    2284:	fe 01       	movw	r30, r28
    2286:	ed 5b       	subi	r30, 0xBD	; 189
    2288:	ff 4f       	sbci	r31, 0xFF	; 255
    228a:	80 e0       	ldi	r24, 0x00	; 0
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	a8 ec       	ldi	r26, 0xC8	; 200
    2290:	b2 e4       	ldi	r27, 0x42	; 66
    2292:	80 83       	st	Z, r24
    2294:	91 83       	std	Z+1, r25	; 0x01
    2296:	a2 83       	std	Z+2, r26	; 0x02
    2298:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    229a:	8e 01       	movw	r16, r28
    229c:	01 5c       	subi	r16, 0xC1	; 193
    229e:	1f 4f       	sbci	r17, 0xFF	; 255
    22a0:	fe 01       	movw	r30, r28
    22a2:	ed 5b       	subi	r30, 0xBD	; 189
    22a4:	ff 4f       	sbci	r31, 0xFF	; 255
    22a6:	60 81       	ld	r22, Z
    22a8:	71 81       	ldd	r23, Z+1	; 0x01
    22aa:	82 81       	ldd	r24, Z+2	; 0x02
    22ac:	93 81       	ldd	r25, Z+3	; 0x03
    22ae:	20 e0       	ldi	r18, 0x00	; 0
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	4a ef       	ldi	r20, 0xFA	; 250
    22b4:	54 e4       	ldi	r21, 0x44	; 68
    22b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ba:	dc 01       	movw	r26, r24
    22bc:	cb 01       	movw	r24, r22
    22be:	f8 01       	movw	r30, r16
    22c0:	80 83       	st	Z, r24
    22c2:	91 83       	std	Z+1, r25	; 0x01
    22c4:	a2 83       	std	Z+2, r26	; 0x02
    22c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22c8:	fe 01       	movw	r30, r28
    22ca:	ff 96       	adiw	r30, 0x3f	; 63
    22cc:	60 81       	ld	r22, Z
    22ce:	71 81       	ldd	r23, Z+1	; 0x01
    22d0:	82 81       	ldd	r24, Z+2	; 0x02
    22d2:	93 81       	ldd	r25, Z+3	; 0x03
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	40 e8       	ldi	r20, 0x80	; 128
    22da:	5f e3       	ldi	r21, 0x3F	; 63
    22dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22e0:	88 23       	and	r24, r24
    22e2:	2c f4       	brge	.+10     	; 0x22ee <func+0xde>
		__ticks = 1;
    22e4:	81 e0       	ldi	r24, 0x01	; 1
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	9e af       	std	Y+62, r25	; 0x3e
    22ea:	8d af       	std	Y+61, r24	; 0x3d
    22ec:	46 c0       	rjmp	.+140    	; 0x237a <func+0x16a>
	else if (__tmp > 65535)
    22ee:	fe 01       	movw	r30, r28
    22f0:	ff 96       	adiw	r30, 0x3f	; 63
    22f2:	60 81       	ld	r22, Z
    22f4:	71 81       	ldd	r23, Z+1	; 0x01
    22f6:	82 81       	ldd	r24, Z+2	; 0x02
    22f8:	93 81       	ldd	r25, Z+3	; 0x03
    22fa:	20 e0       	ldi	r18, 0x00	; 0
    22fc:	3f ef       	ldi	r19, 0xFF	; 255
    22fe:	4f e7       	ldi	r20, 0x7F	; 127
    2300:	57 e4       	ldi	r21, 0x47	; 71
    2302:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2306:	18 16       	cp	r1, r24
    2308:	64 f5       	brge	.+88     	; 0x2362 <func+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    230a:	fe 01       	movw	r30, r28
    230c:	ed 5b       	subi	r30, 0xBD	; 189
    230e:	ff 4f       	sbci	r31, 0xFF	; 255
    2310:	60 81       	ld	r22, Z
    2312:	71 81       	ldd	r23, Z+1	; 0x01
    2314:	82 81       	ldd	r24, Z+2	; 0x02
    2316:	93 81       	ldd	r25, Z+3	; 0x03
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	40 e2       	ldi	r20, 0x20	; 32
    231e:	51 e4       	ldi	r21, 0x41	; 65
    2320:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	bc 01       	movw	r22, r24
    232a:	cd 01       	movw	r24, r26
    232c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2330:	dc 01       	movw	r26, r24
    2332:	cb 01       	movw	r24, r22
    2334:	9e af       	std	Y+62, r25	; 0x3e
    2336:	8d af       	std	Y+61, r24	; 0x3d
    2338:	0f c0       	rjmp	.+30     	; 0x2358 <func+0x148>
    233a:	88 ec       	ldi	r24, 0xC8	; 200
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	9c af       	std	Y+60, r25	; 0x3c
    2340:	8b af       	std	Y+59, r24	; 0x3b
    2342:	8b ad       	ldd	r24, Y+59	; 0x3b
    2344:	9c ad       	ldd	r25, Y+60	; 0x3c
    2346:	01 97       	sbiw	r24, 0x01	; 1
    2348:	f1 f7       	brne	.-4      	; 0x2346 <func+0x136>
    234a:	9c af       	std	Y+60, r25	; 0x3c
    234c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    234e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2350:	9e ad       	ldd	r25, Y+62	; 0x3e
    2352:	01 97       	sbiw	r24, 0x01	; 1
    2354:	9e af       	std	Y+62, r25	; 0x3e
    2356:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2358:	8d ad       	ldd	r24, Y+61	; 0x3d
    235a:	9e ad       	ldd	r25, Y+62	; 0x3e
    235c:	00 97       	sbiw	r24, 0x00	; 0
    235e:	69 f7       	brne	.-38     	; 0x233a <func+0x12a>
    2360:	16 c0       	rjmp	.+44     	; 0x238e <func+0x17e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2362:	fe 01       	movw	r30, r28
    2364:	ff 96       	adiw	r30, 0x3f	; 63
    2366:	60 81       	ld	r22, Z
    2368:	71 81       	ldd	r23, Z+1	; 0x01
    236a:	82 81       	ldd	r24, Z+2	; 0x02
    236c:	93 81       	ldd	r25, Z+3	; 0x03
    236e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2372:	dc 01       	movw	r26, r24
    2374:	cb 01       	movw	r24, r22
    2376:	9e af       	std	Y+62, r25	; 0x3e
    2378:	8d af       	std	Y+61, r24	; 0x3d
    237a:	8d ad       	ldd	r24, Y+61	; 0x3d
    237c:	9e ad       	ldd	r25, Y+62	; 0x3e
    237e:	9a af       	std	Y+58, r25	; 0x3a
    2380:	89 af       	std	Y+57, r24	; 0x39
    2382:	89 ad       	ldd	r24, Y+57	; 0x39
    2384:	9a ad       	ldd	r25, Y+58	; 0x3a
    2386:	01 97       	sbiw	r24, 0x01	; 1
    2388:	f1 f7       	brne	.-4      	; 0x2386 <func+0x176>
    238a:	9a af       	std	Y+58, r25	; 0x3a
    238c:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(100);

		USART_voidReceiveString(pass);
    238e:	ce 01       	movw	r24, r28
    2390:	82 5b       	subi	r24, 0xB2	; 178
    2392:	9f 4f       	sbci	r25, 0xFF	; 255
    2394:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <USART_voidReceiveString>



		if(Compare_string(pass,PTR))
    2398:	ce 01       	movw	r24, r28
    239a:	82 5b       	subi	r24, 0xB2	; 178
    239c:	9f 4f       	sbci	r25, 0xFF	; 255
    239e:	fe 01       	movw	r30, r28
    23a0:	e8 5a       	subi	r30, 0xA8	; 168
    23a2:	ff 4f       	sbci	r31, 0xFF	; 255
    23a4:	20 81       	ld	r18, Z
    23a6:	31 81       	ldd	r19, Z+1	; 0x01
    23a8:	b9 01       	movw	r22, r18
    23aa:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <Compare_string>
    23ae:	88 23       	and	r24, r24
    23b0:	71 f0       	breq	.+28     	; 0x23ce <func+0x1be>
		{
			flag = 1;
    23b2:	81 e0       	ldi	r24, 0x01	; 1
    23b4:	80 93 0a 03 	sts	0x030A, r24

			CLCD_voidSetClear();
    23b8:	0e 94 a2 09 	call	0x1344	; 0x1344 <CLCD_voidSetClear>
			CLCD_voidSendString("welcome");
    23bc:	8b ec       	ldi	r24, 0xCB	; 203
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	0e 94 c3 08 	call	0x1186	; 0x1186 <CLCD_voidSendString>
			USART_voidSendString("\r\nwelcome\r\n");
    23c4:	83 ed       	ldi	r24, 0xD3	; 211
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <USART_voidSendString>
    23cc:	11 c3       	rjmp	.+1570   	; 0x29f0 <func+0x7e0>
		}
		else
		{


			copy_u8tries--;
    23ce:	de 01       	movw	r26, r28
    23d0:	a3 5b       	subi	r26, 0xB3	; 179
    23d2:	bf 4f       	sbci	r27, 0xFF	; 255
    23d4:	fe 01       	movw	r30, r28
    23d6:	e3 5b       	subi	r30, 0xB3	; 179
    23d8:	ff 4f       	sbci	r31, 0xFF	; 255
    23da:	80 81       	ld	r24, Z
    23dc:	81 50       	subi	r24, 0x01	; 1
    23de:	8c 93       	st	X, r24
			if(copy_u8tries == 0)
    23e0:	fe 01       	movw	r30, r28
    23e2:	e3 5b       	subi	r30, 0xB3	; 179
    23e4:	ff 4f       	sbci	r31, 0xFF	; 255
    23e6:	80 81       	ld	r24, Z
    23e8:	88 23       	and	r24, r24
    23ea:	49 f4       	brne	.+18     	; 0x23fe <func+0x1ee>
			{
				CLCD_voidSetClear();
    23ec:	0e 94 a2 09 	call	0x1344	; 0x1344 <CLCD_voidSetClear>
				CLCD_voidSendString("ALARM");
    23f0:	8f ed       	ldi	r24, 0xDF	; 223
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	0e 94 c3 08 	call	0x1186	; 0x1186 <CLCD_voidSendString>
				while(1)
				{
					Alarm();
    23f8:	0e 94 09 15 	call	0x2a12	; 0x2a12 <Alarm>
    23fc:	fd cf       	rjmp	.-6      	; 0x23f8 <func+0x1e8>

				}
			}
			else
			{
				CLCD_voidSetClear();
    23fe:	0e 94 a2 09 	call	0x1344	; 0x1344 <CLCD_voidSetClear>
				CLCD_voidSendString("wrong password");
    2402:	85 ee       	ldi	r24, 0xE5	; 229
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	0e 94 c3 08 	call	0x1186	; 0x1186 <CLCD_voidSendString>
    240a:	80 e0       	ldi	r24, 0x00	; 0
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	a8 e4       	ldi	r26, 0x48	; 72
    2410:	b3 e4       	ldi	r27, 0x43	; 67
    2412:	8d ab       	std	Y+53, r24	; 0x35
    2414:	9e ab       	std	Y+54, r25	; 0x36
    2416:	af ab       	std	Y+55, r26	; 0x37
    2418:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    241a:	6d a9       	ldd	r22, Y+53	; 0x35
    241c:	7e a9       	ldd	r23, Y+54	; 0x36
    241e:	8f a9       	ldd	r24, Y+55	; 0x37
    2420:	98 ad       	ldd	r25, Y+56	; 0x38
    2422:	20 e0       	ldi	r18, 0x00	; 0
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	4a ef       	ldi	r20, 0xFA	; 250
    2428:	54 e4       	ldi	r21, 0x44	; 68
    242a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    242e:	dc 01       	movw	r26, r24
    2430:	cb 01       	movw	r24, r22
    2432:	89 ab       	std	Y+49, r24	; 0x31
    2434:	9a ab       	std	Y+50, r25	; 0x32
    2436:	ab ab       	std	Y+51, r26	; 0x33
    2438:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    243a:	69 a9       	ldd	r22, Y+49	; 0x31
    243c:	7a a9       	ldd	r23, Y+50	; 0x32
    243e:	8b a9       	ldd	r24, Y+51	; 0x33
    2440:	9c a9       	ldd	r25, Y+52	; 0x34
    2442:	20 e0       	ldi	r18, 0x00	; 0
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	40 e8       	ldi	r20, 0x80	; 128
    2448:	5f e3       	ldi	r21, 0x3F	; 63
    244a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    244e:	88 23       	and	r24, r24
    2450:	2c f4       	brge	.+10     	; 0x245c <func+0x24c>
		__ticks = 1;
    2452:	81 e0       	ldi	r24, 0x01	; 1
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	98 ab       	std	Y+48, r25	; 0x30
    2458:	8f a7       	std	Y+47, r24	; 0x2f
    245a:	3f c0       	rjmp	.+126    	; 0x24da <func+0x2ca>
	else if (__tmp > 65535)
    245c:	69 a9       	ldd	r22, Y+49	; 0x31
    245e:	7a a9       	ldd	r23, Y+50	; 0x32
    2460:	8b a9       	ldd	r24, Y+51	; 0x33
    2462:	9c a9       	ldd	r25, Y+52	; 0x34
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	3f ef       	ldi	r19, 0xFF	; 255
    2468:	4f e7       	ldi	r20, 0x7F	; 127
    246a:	57 e4       	ldi	r21, 0x47	; 71
    246c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2470:	18 16       	cp	r1, r24
    2472:	4c f5       	brge	.+82     	; 0x24c6 <func+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2474:	6d a9       	ldd	r22, Y+53	; 0x35
    2476:	7e a9       	ldd	r23, Y+54	; 0x36
    2478:	8f a9       	ldd	r24, Y+55	; 0x37
    247a:	98 ad       	ldd	r25, Y+56	; 0x38
    247c:	20 e0       	ldi	r18, 0x00	; 0
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	40 e2       	ldi	r20, 0x20	; 32
    2482:	51 e4       	ldi	r21, 0x41	; 65
    2484:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2488:	dc 01       	movw	r26, r24
    248a:	cb 01       	movw	r24, r22
    248c:	bc 01       	movw	r22, r24
    248e:	cd 01       	movw	r24, r26
    2490:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2494:	dc 01       	movw	r26, r24
    2496:	cb 01       	movw	r24, r22
    2498:	98 ab       	std	Y+48, r25	; 0x30
    249a:	8f a7       	std	Y+47, r24	; 0x2f
    249c:	0f c0       	rjmp	.+30     	; 0x24bc <func+0x2ac>
    249e:	88 ec       	ldi	r24, 0xC8	; 200
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	9e a7       	std	Y+46, r25	; 0x2e
    24a4:	8d a7       	std	Y+45, r24	; 0x2d
    24a6:	8d a5       	ldd	r24, Y+45	; 0x2d
    24a8:	9e a5       	ldd	r25, Y+46	; 0x2e
    24aa:	01 97       	sbiw	r24, 0x01	; 1
    24ac:	f1 f7       	brne	.-4      	; 0x24aa <func+0x29a>
    24ae:	9e a7       	std	Y+46, r25	; 0x2e
    24b0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    24b4:	98 a9       	ldd	r25, Y+48	; 0x30
    24b6:	01 97       	sbiw	r24, 0x01	; 1
    24b8:	98 ab       	std	Y+48, r25	; 0x30
    24ba:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    24be:	98 a9       	ldd	r25, Y+48	; 0x30
    24c0:	00 97       	sbiw	r24, 0x00	; 0
    24c2:	69 f7       	brne	.-38     	; 0x249e <func+0x28e>
    24c4:	14 c0       	rjmp	.+40     	; 0x24ee <func+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24c6:	69 a9       	ldd	r22, Y+49	; 0x31
    24c8:	7a a9       	ldd	r23, Y+50	; 0x32
    24ca:	8b a9       	ldd	r24, Y+51	; 0x33
    24cc:	9c a9       	ldd	r25, Y+52	; 0x34
    24ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d2:	dc 01       	movw	r26, r24
    24d4:	cb 01       	movw	r24, r22
    24d6:	98 ab       	std	Y+48, r25	; 0x30
    24d8:	8f a7       	std	Y+47, r24	; 0x2f
    24da:	8f a5       	ldd	r24, Y+47	; 0x2f
    24dc:	98 a9       	ldd	r25, Y+48	; 0x30
    24de:	9c a7       	std	Y+44, r25	; 0x2c
    24e0:	8b a7       	std	Y+43, r24	; 0x2b
    24e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    24e4:	9c a5       	ldd	r25, Y+44	; 0x2c
    24e6:	01 97       	sbiw	r24, 0x01	; 1
    24e8:	f1 f7       	brne	.-4      	; 0x24e6 <func+0x2d6>
    24ea:	9c a7       	std	Y+44, r25	; 0x2c
    24ec:	8b a7       	std	Y+43, r24	; 0x2b
void func(u8 *PTR)
{
	u8 copy_u8tries = 3;
	u8 pass[10];

	while(copy_u8tries)
    24ee:	fe 01       	movw	r30, r28
    24f0:	e3 5b       	subi	r30, 0xB3	; 179
    24f2:	ff 4f       	sbci	r31, 0xFF	; 255
    24f4:	80 81       	ld	r24, Z
    24f6:	88 23       	and	r24, r24
    24f8:	09 f0       	breq	.+2      	; 0x24fc <func+0x2ec>
    24fa:	a2 ce       	rjmp	.-700    	; 0x2240 <func+0x30>
    24fc:	79 c2       	rjmp	.+1266   	; 0x29f0 <func+0x7e0>
	}
	while(flag)
	{

		u8 Local_u8choise ;
		u8 Local_u8Data = 0;
    24fe:	fe 01       	movw	r30, r28
    2500:	e5 5b       	subi	r30, 0xB5	; 181
    2502:	ff 4f       	sbci	r31, 0xFF	; 255
    2504:	10 82       	st	Z, r1
		USART_voidSendString("\r\nchoose:\r\n");
    2506:	84 ef       	ldi	r24, 0xF4	; 244
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <USART_voidSendString>
		USART_voidSendString("1 for open the door");
    250e:	80 e0       	ldi	r24, 0x00	; 0
    2510:	91 e0       	ldi	r25, 0x01	; 1
    2512:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <USART_voidSendString>
		USART_voidSendString("\r\n");
    2516:	84 e1       	ldi	r24, 0x14	; 20
    2518:	91 e0       	ldi	r25, 0x01	; 1
    251a:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <USART_voidSendString>

		USART_voidSendString("2 for close the door");
    251e:	87 e1       	ldi	r24, 0x17	; 23
    2520:	91 e0       	ldi	r25, 0x01	; 1
    2522:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <USART_voidSendString>
		USART_voidSendString("\r\n");
    2526:	84 e1       	ldi	r24, 0x14	; 20
    2528:	91 e0       	ldi	r25, 0x01	; 1
    252a:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <USART_voidSendString>

		USART_voidSendString("3 for open the light");
    252e:	8c e2       	ldi	r24, 0x2C	; 44
    2530:	91 e0       	ldi	r25, 0x01	; 1
    2532:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <USART_voidSendString>
		USART_voidSendString("\r\n");
    2536:	84 e1       	ldi	r24, 0x14	; 20
    2538:	91 e0       	ldi	r25, 0x01	; 1
    253a:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <USART_voidSendString>

		USART_voidSendString("4 for close the light");
    253e:	81 e4       	ldi	r24, 0x41	; 65
    2540:	91 e0       	ldi	r25, 0x01	; 1
    2542:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <USART_voidSendString>
		USART_voidSendString("\r\n");
    2546:	84 e1       	ldi	r24, 0x14	; 20
    2548:	91 e0       	ldi	r25, 0x01	; 1
    254a:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <USART_voidSendString>

		USART_voidSendString("5 for open the fan");
    254e:	87 e5       	ldi	r24, 0x57	; 87
    2550:	91 e0       	ldi	r25, 0x01	; 1
    2552:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <USART_voidSendString>
		USART_voidSendString("\r\n");
    2556:	84 e1       	ldi	r24, 0x14	; 20
    2558:	91 e0       	ldi	r25, 0x01	; 1
    255a:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <USART_voidSendString>

		USART_voidSendString("6 for close the fan");
    255e:	8a e6       	ldi	r24, 0x6A	; 106
    2560:	91 e0       	ldi	r25, 0x01	; 1
    2562:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <USART_voidSendString>
		USART_voidSendString("\r\n");
    2566:	84 e1       	ldi	r24, 0x14	; 20
    2568:	91 e0       	ldi	r25, 0x01	; 1
    256a:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <USART_voidSendString>

		USART_voidSendString("7 for adjust brightness");
    256e:	8e e7       	ldi	r24, 0x7E	; 126
    2570:	91 e0       	ldi	r25, 0x01	; 1
    2572:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <USART_voidSendString>
		USART_voidSendString("\r\n");
    2576:	84 e1       	ldi	r24, 0x14	; 20
    2578:	91 e0       	ldi	r25, 0x01	; 1
    257a:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <USART_voidSendString>

		USART_voidSendString("8 for adjust fan speed");
    257e:	86 e9       	ldi	r24, 0x96	; 150
    2580:	91 e0       	ldi	r25, 0x01	; 1
    2582:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <USART_voidSendString>
		USART_voidSendString("\r\n");
    2586:	84 e1       	ldi	r24, 0x14	; 20
    2588:	91 e0       	ldi	r25, 0x01	; 1
    258a:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <USART_voidSendString>


		CLCD_voidSetClear();
    258e:	0e 94 a2 09 	call	0x1344	; 0x1344 <CLCD_voidSetClear>
		CLCD_voidSendString("choose:1or2or3");
    2592:	8d ea       	ldi	r24, 0xAD	; 173
    2594:	91 e0       	ldi	r25, 0x01	; 1
    2596:	0e 94 c3 08 	call	0x1186	; 0x1186 <CLCD_voidSendString>
		CLCD_voidSetPos(1,0);
    259a:	81 e0       	ldi	r24, 0x01	; 1
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	60 e0       	ldi	r22, 0x00	; 0
    25a0:	70 e0       	ldi	r23, 0x00	; 0
    25a2:	0e 94 43 09 	call	0x1286	; 0x1286 <CLCD_voidSetPos>
		CLCD_voidSendString("4or5or6or7or8");
    25a6:	8c eb       	ldi	r24, 0xBC	; 188
    25a8:	91 e0       	ldi	r25, 0x01	; 1
    25aa:	0e 94 c3 08 	call	0x1186	; 0x1186 <CLCD_voidSendString>
		Local_u8choise = USART_voidRecieveByte();
    25ae:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <USART_voidRecieveByte>
    25b2:	fe 01       	movw	r30, r28
    25b4:	e4 5b       	subi	r30, 0xB4	; 180
    25b6:	ff 4f       	sbci	r31, 0xFF	; 255
    25b8:	80 83       	st	Z, r24
	//	USART_voidReceiveString(Local_u8choise);
//		CLCD_voidSendString("your choise is");
//		CLCD_voidSetPos(1,0);
//		CLCD_voidSendString(Local_u8choise);
//		_delay_ms(1000);
		if(Local_u8choise == '1')
    25ba:	fe 01       	movw	r30, r28
    25bc:	e4 5b       	subi	r30, 0xB4	; 180
    25be:	ff 4f       	sbci	r31, 0xFF	; 255
    25c0:	80 81       	ld	r24, Z
    25c2:	81 33       	cpi	r24, 0x31	; 49
    25c4:	09 f0       	breq	.+2      	; 0x25c8 <func+0x3b8>
    25c6:	a3 c0       	rjmp	.+326    	; 0x270e <func+0x4fe>
		{
			CLCD_voidSetClear();
    25c8:	0e 94 a2 09 	call	0x1344	; 0x1344 <CLCD_voidSetClear>
			CLCD_voidSendString("The door opened");
    25cc:	8a ec       	ldi	r24, 0xCA	; 202
    25ce:	91 e0       	ldi	r25, 0x01	; 1
    25d0:	0e 94 c3 08 	call	0x1186	; 0x1186 <CLCD_voidSendString>
			DIO_voidSetPinVal(PORTB_REG,PIN0,PIN_VAL_HIGH);
    25d4:	82 e0       	ldi	r24, 0x02	; 2
    25d6:	60 e0       	ldi	r22, 0x00	; 0
    25d8:	41 e0       	ldi	r20, 0x01	; 1
    25da:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_voidSetPinVal>
			for(u16 j= 750;j<1500;j++)
    25de:	fe 01       	movw	r30, r28
    25e0:	e7 5b       	subi	r30, 0xB7	; 183
    25e2:	ff 4f       	sbci	r31, 0xFF	; 255
    25e4:	8e ee       	ldi	r24, 0xEE	; 238
    25e6:	92 e0       	ldi	r25, 0x02	; 2
    25e8:	91 83       	std	Z+1, r25	; 0x01
    25ea:	80 83       	st	Z, r24
    25ec:	85 c0       	rjmp	.+266    	; 0x26f8 <func+0x4e8>
			{


				TIMER1_voidSetOcrValue(j);
    25ee:	fe 01       	movw	r30, r28
    25f0:	e7 5b       	subi	r30, 0xB7	; 183
    25f2:	ff 4f       	sbci	r31, 0xFF	; 255
    25f4:	80 81       	ld	r24, Z
    25f6:	91 81       	ldd	r25, Z+1	; 0x01
    25f8:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <TIMER1_voidSetOcrValue>
    25fc:	80 e0       	ldi	r24, 0x00	; 0
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	a0 e8       	ldi	r26, 0x80	; 128
    2602:	bf e3       	ldi	r27, 0x3F	; 63
    2604:	8f a3       	std	Y+39, r24	; 0x27
    2606:	98 a7       	std	Y+40, r25	; 0x28
    2608:	a9 a7       	std	Y+41, r26	; 0x29
    260a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    260c:	6f a1       	ldd	r22, Y+39	; 0x27
    260e:	78 a5       	ldd	r23, Y+40	; 0x28
    2610:	89 a5       	ldd	r24, Y+41	; 0x29
    2612:	9a a5       	ldd	r25, Y+42	; 0x2a
    2614:	20 e0       	ldi	r18, 0x00	; 0
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	4a ef       	ldi	r20, 0xFA	; 250
    261a:	54 e4       	ldi	r21, 0x44	; 68
    261c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2620:	dc 01       	movw	r26, r24
    2622:	cb 01       	movw	r24, r22
    2624:	8b a3       	std	Y+35, r24	; 0x23
    2626:	9c a3       	std	Y+36, r25	; 0x24
    2628:	ad a3       	std	Y+37, r26	; 0x25
    262a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    262c:	6b a1       	ldd	r22, Y+35	; 0x23
    262e:	7c a1       	ldd	r23, Y+36	; 0x24
    2630:	8d a1       	ldd	r24, Y+37	; 0x25
    2632:	9e a1       	ldd	r25, Y+38	; 0x26
    2634:	20 e0       	ldi	r18, 0x00	; 0
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	40 e8       	ldi	r20, 0x80	; 128
    263a:	5f e3       	ldi	r21, 0x3F	; 63
    263c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2640:	88 23       	and	r24, r24
    2642:	2c f4       	brge	.+10     	; 0x264e <func+0x43e>
		__ticks = 1;
    2644:	81 e0       	ldi	r24, 0x01	; 1
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	9a a3       	std	Y+34, r25	; 0x22
    264a:	89 a3       	std	Y+33, r24	; 0x21
    264c:	3f c0       	rjmp	.+126    	; 0x26cc <func+0x4bc>
	else if (__tmp > 65535)
    264e:	6b a1       	ldd	r22, Y+35	; 0x23
    2650:	7c a1       	ldd	r23, Y+36	; 0x24
    2652:	8d a1       	ldd	r24, Y+37	; 0x25
    2654:	9e a1       	ldd	r25, Y+38	; 0x26
    2656:	20 e0       	ldi	r18, 0x00	; 0
    2658:	3f ef       	ldi	r19, 0xFF	; 255
    265a:	4f e7       	ldi	r20, 0x7F	; 127
    265c:	57 e4       	ldi	r21, 0x47	; 71
    265e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2662:	18 16       	cp	r1, r24
    2664:	4c f5       	brge	.+82     	; 0x26b8 <func+0x4a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2666:	6f a1       	ldd	r22, Y+39	; 0x27
    2668:	78 a5       	ldd	r23, Y+40	; 0x28
    266a:	89 a5       	ldd	r24, Y+41	; 0x29
    266c:	9a a5       	ldd	r25, Y+42	; 0x2a
    266e:	20 e0       	ldi	r18, 0x00	; 0
    2670:	30 e0       	ldi	r19, 0x00	; 0
    2672:	40 e2       	ldi	r20, 0x20	; 32
    2674:	51 e4       	ldi	r21, 0x41	; 65
    2676:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    267a:	dc 01       	movw	r26, r24
    267c:	cb 01       	movw	r24, r22
    267e:	bc 01       	movw	r22, r24
    2680:	cd 01       	movw	r24, r26
    2682:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2686:	dc 01       	movw	r26, r24
    2688:	cb 01       	movw	r24, r22
    268a:	9a a3       	std	Y+34, r25	; 0x22
    268c:	89 a3       	std	Y+33, r24	; 0x21
    268e:	0f c0       	rjmp	.+30     	; 0x26ae <func+0x49e>
    2690:	88 ec       	ldi	r24, 0xC8	; 200
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	98 a3       	std	Y+32, r25	; 0x20
    2696:	8f 8f       	std	Y+31, r24	; 0x1f
    2698:	8f 8d       	ldd	r24, Y+31	; 0x1f
    269a:	98 a1       	ldd	r25, Y+32	; 0x20
    269c:	01 97       	sbiw	r24, 0x01	; 1
    269e:	f1 f7       	brne	.-4      	; 0x269c <func+0x48c>
    26a0:	98 a3       	std	Y+32, r25	; 0x20
    26a2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26a4:	89 a1       	ldd	r24, Y+33	; 0x21
    26a6:	9a a1       	ldd	r25, Y+34	; 0x22
    26a8:	01 97       	sbiw	r24, 0x01	; 1
    26aa:	9a a3       	std	Y+34, r25	; 0x22
    26ac:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ae:	89 a1       	ldd	r24, Y+33	; 0x21
    26b0:	9a a1       	ldd	r25, Y+34	; 0x22
    26b2:	00 97       	sbiw	r24, 0x00	; 0
    26b4:	69 f7       	brne	.-38     	; 0x2690 <func+0x480>
    26b6:	14 c0       	rjmp	.+40     	; 0x26e0 <func+0x4d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26b8:	6b a1       	ldd	r22, Y+35	; 0x23
    26ba:	7c a1       	ldd	r23, Y+36	; 0x24
    26bc:	8d a1       	ldd	r24, Y+37	; 0x25
    26be:	9e a1       	ldd	r25, Y+38	; 0x26
    26c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c4:	dc 01       	movw	r26, r24
    26c6:	cb 01       	movw	r24, r22
    26c8:	9a a3       	std	Y+34, r25	; 0x22
    26ca:	89 a3       	std	Y+33, r24	; 0x21
    26cc:	89 a1       	ldd	r24, Y+33	; 0x21
    26ce:	9a a1       	ldd	r25, Y+34	; 0x22
    26d0:	9e 8f       	std	Y+30, r25	; 0x1e
    26d2:	8d 8f       	std	Y+29, r24	; 0x1d
    26d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26d6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26d8:	01 97       	sbiw	r24, 0x01	; 1
    26da:	f1 f7       	brne	.-4      	; 0x26d8 <func+0x4c8>
    26dc:	9e 8f       	std	Y+30, r25	; 0x1e
    26de:	8d 8f       	std	Y+29, r24	; 0x1d
		if(Local_u8choise == '1')
		{
			CLCD_voidSetClear();
			CLCD_voidSendString("The door opened");
			DIO_voidSetPinVal(PORTB_REG,PIN0,PIN_VAL_HIGH);
			for(u16 j= 750;j<1500;j++)
    26e0:	de 01       	movw	r26, r28
    26e2:	a7 5b       	subi	r26, 0xB7	; 183
    26e4:	bf 4f       	sbci	r27, 0xFF	; 255
    26e6:	fe 01       	movw	r30, r28
    26e8:	e7 5b       	subi	r30, 0xB7	; 183
    26ea:	ff 4f       	sbci	r31, 0xFF	; 255
    26ec:	80 81       	ld	r24, Z
    26ee:	91 81       	ldd	r25, Z+1	; 0x01
    26f0:	01 96       	adiw	r24, 0x01	; 1
    26f2:	11 96       	adiw	r26, 0x01	; 1
    26f4:	9c 93       	st	X, r25
    26f6:	8e 93       	st	-X, r24
    26f8:	fe 01       	movw	r30, r28
    26fa:	e7 5b       	subi	r30, 0xB7	; 183
    26fc:	ff 4f       	sbci	r31, 0xFF	; 255
    26fe:	80 81       	ld	r24, Z
    2700:	91 81       	ldd	r25, Z+1	; 0x01
    2702:	f5 e0       	ldi	r31, 0x05	; 5
    2704:	8c 3d       	cpi	r24, 0xDC	; 220
    2706:	9f 07       	cpc	r25, r31
    2708:	08 f4       	brcc	.+2      	; 0x270c <func+0x4fc>
    270a:	71 cf       	rjmp	.-286    	; 0x25ee <func+0x3de>
    270c:	71 c1       	rjmp	.+738    	; 0x29f0 <func+0x7e0>
				_delay_ms(1);
			}


		}
		else if(Local_u8choise == '2' )
    270e:	fe 01       	movw	r30, r28
    2710:	e4 5b       	subi	r30, 0xB4	; 180
    2712:	ff 4f       	sbci	r31, 0xFF	; 255
    2714:	80 81       	ld	r24, Z
    2716:	82 33       	cpi	r24, 0x32	; 50
    2718:	09 f0       	breq	.+2      	; 0x271c <func+0x50c>
    271a:	9e c0       	rjmp	.+316    	; 0x2858 <func+0x648>
		{
			CLCD_voidSetClear();
    271c:	0e 94 a2 09 	call	0x1344	; 0x1344 <CLCD_voidSetClear>
			CLCD_voidSendString("The door closed");
    2720:	8a ed       	ldi	r24, 0xDA	; 218
    2722:	91 e0       	ldi	r25, 0x01	; 1
    2724:	0e 94 c3 08 	call	0x1186	; 0x1186 <CLCD_voidSendString>
			for(u16 j= 1500;j>750;j--)
    2728:	fe 01       	movw	r30, r28
    272a:	e9 5b       	subi	r30, 0xB9	; 185
    272c:	ff 4f       	sbci	r31, 0xFF	; 255
    272e:	8c ed       	ldi	r24, 0xDC	; 220
    2730:	95 e0       	ldi	r25, 0x05	; 5
    2732:	91 83       	std	Z+1, r25	; 0x01
    2734:	80 83       	st	Z, r24
    2736:	85 c0       	rjmp	.+266    	; 0x2842 <func+0x632>
			{


				TIMER1_voidSetOcrValue(j);
    2738:	fe 01       	movw	r30, r28
    273a:	e9 5b       	subi	r30, 0xB9	; 185
    273c:	ff 4f       	sbci	r31, 0xFF	; 255
    273e:	80 81       	ld	r24, Z
    2740:	91 81       	ldd	r25, Z+1	; 0x01
    2742:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <TIMER1_voidSetOcrValue>
    2746:	80 e0       	ldi	r24, 0x00	; 0
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	a0 e8       	ldi	r26, 0x80	; 128
    274c:	bf e3       	ldi	r27, 0x3F	; 63
    274e:	89 8f       	std	Y+25, r24	; 0x19
    2750:	9a 8f       	std	Y+26, r25	; 0x1a
    2752:	ab 8f       	std	Y+27, r26	; 0x1b
    2754:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2756:	69 8d       	ldd	r22, Y+25	; 0x19
    2758:	7a 8d       	ldd	r23, Y+26	; 0x1a
    275a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    275c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    275e:	20 e0       	ldi	r18, 0x00	; 0
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	4a ef       	ldi	r20, 0xFA	; 250
    2764:	54 e4       	ldi	r21, 0x44	; 68
    2766:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276a:	dc 01       	movw	r26, r24
    276c:	cb 01       	movw	r24, r22
    276e:	8d 8b       	std	Y+21, r24	; 0x15
    2770:	9e 8b       	std	Y+22, r25	; 0x16
    2772:	af 8b       	std	Y+23, r26	; 0x17
    2774:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2776:	6d 89       	ldd	r22, Y+21	; 0x15
    2778:	7e 89       	ldd	r23, Y+22	; 0x16
    277a:	8f 89       	ldd	r24, Y+23	; 0x17
    277c:	98 8d       	ldd	r25, Y+24	; 0x18
    277e:	20 e0       	ldi	r18, 0x00	; 0
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	40 e8       	ldi	r20, 0x80	; 128
    2784:	5f e3       	ldi	r21, 0x3F	; 63
    2786:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    278a:	88 23       	and	r24, r24
    278c:	2c f4       	brge	.+10     	; 0x2798 <func+0x588>
		__ticks = 1;
    278e:	81 e0       	ldi	r24, 0x01	; 1
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	9c 8b       	std	Y+20, r25	; 0x14
    2794:	8b 8b       	std	Y+19, r24	; 0x13
    2796:	3f c0       	rjmp	.+126    	; 0x2816 <func+0x606>
	else if (__tmp > 65535)
    2798:	6d 89       	ldd	r22, Y+21	; 0x15
    279a:	7e 89       	ldd	r23, Y+22	; 0x16
    279c:	8f 89       	ldd	r24, Y+23	; 0x17
    279e:	98 8d       	ldd	r25, Y+24	; 0x18
    27a0:	20 e0       	ldi	r18, 0x00	; 0
    27a2:	3f ef       	ldi	r19, 0xFF	; 255
    27a4:	4f e7       	ldi	r20, 0x7F	; 127
    27a6:	57 e4       	ldi	r21, 0x47	; 71
    27a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27ac:	18 16       	cp	r1, r24
    27ae:	4c f5       	brge	.+82     	; 0x2802 <func+0x5f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27b0:	69 8d       	ldd	r22, Y+25	; 0x19
    27b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27b8:	20 e0       	ldi	r18, 0x00	; 0
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	40 e2       	ldi	r20, 0x20	; 32
    27be:	51 e4       	ldi	r21, 0x41	; 65
    27c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c4:	dc 01       	movw	r26, r24
    27c6:	cb 01       	movw	r24, r22
    27c8:	bc 01       	movw	r22, r24
    27ca:	cd 01       	movw	r24, r26
    27cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d0:	dc 01       	movw	r26, r24
    27d2:	cb 01       	movw	r24, r22
    27d4:	9c 8b       	std	Y+20, r25	; 0x14
    27d6:	8b 8b       	std	Y+19, r24	; 0x13
    27d8:	0f c0       	rjmp	.+30     	; 0x27f8 <func+0x5e8>
    27da:	88 ec       	ldi	r24, 0xC8	; 200
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	9a 8b       	std	Y+18, r25	; 0x12
    27e0:	89 8b       	std	Y+17, r24	; 0x11
    27e2:	89 89       	ldd	r24, Y+17	; 0x11
    27e4:	9a 89       	ldd	r25, Y+18	; 0x12
    27e6:	01 97       	sbiw	r24, 0x01	; 1
    27e8:	f1 f7       	brne	.-4      	; 0x27e6 <func+0x5d6>
    27ea:	9a 8b       	std	Y+18, r25	; 0x12
    27ec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ee:	8b 89       	ldd	r24, Y+19	; 0x13
    27f0:	9c 89       	ldd	r25, Y+20	; 0x14
    27f2:	01 97       	sbiw	r24, 0x01	; 1
    27f4:	9c 8b       	std	Y+20, r25	; 0x14
    27f6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27f8:	8b 89       	ldd	r24, Y+19	; 0x13
    27fa:	9c 89       	ldd	r25, Y+20	; 0x14
    27fc:	00 97       	sbiw	r24, 0x00	; 0
    27fe:	69 f7       	brne	.-38     	; 0x27da <func+0x5ca>
    2800:	14 c0       	rjmp	.+40     	; 0x282a <func+0x61a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2802:	6d 89       	ldd	r22, Y+21	; 0x15
    2804:	7e 89       	ldd	r23, Y+22	; 0x16
    2806:	8f 89       	ldd	r24, Y+23	; 0x17
    2808:	98 8d       	ldd	r25, Y+24	; 0x18
    280a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    280e:	dc 01       	movw	r26, r24
    2810:	cb 01       	movw	r24, r22
    2812:	9c 8b       	std	Y+20, r25	; 0x14
    2814:	8b 8b       	std	Y+19, r24	; 0x13
    2816:	8b 89       	ldd	r24, Y+19	; 0x13
    2818:	9c 89       	ldd	r25, Y+20	; 0x14
    281a:	98 8b       	std	Y+16, r25	; 0x10
    281c:	8f 87       	std	Y+15, r24	; 0x0f
    281e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2820:	98 89       	ldd	r25, Y+16	; 0x10
    2822:	01 97       	sbiw	r24, 0x01	; 1
    2824:	f1 f7       	brne	.-4      	; 0x2822 <func+0x612>
    2826:	98 8b       	std	Y+16, r25	; 0x10
    2828:	8f 87       	std	Y+15, r24	; 0x0f
		}
		else if(Local_u8choise == '2' )
		{
			CLCD_voidSetClear();
			CLCD_voidSendString("The door closed");
			for(u16 j= 1500;j>750;j--)
    282a:	de 01       	movw	r26, r28
    282c:	a9 5b       	subi	r26, 0xB9	; 185
    282e:	bf 4f       	sbci	r27, 0xFF	; 255
    2830:	fe 01       	movw	r30, r28
    2832:	e9 5b       	subi	r30, 0xB9	; 185
    2834:	ff 4f       	sbci	r31, 0xFF	; 255
    2836:	80 81       	ld	r24, Z
    2838:	91 81       	ldd	r25, Z+1	; 0x01
    283a:	01 97       	sbiw	r24, 0x01	; 1
    283c:	11 96       	adiw	r26, 0x01	; 1
    283e:	9c 93       	st	X, r25
    2840:	8e 93       	st	-X, r24
    2842:	fe 01       	movw	r30, r28
    2844:	e9 5b       	subi	r30, 0xB9	; 185
    2846:	ff 4f       	sbci	r31, 0xFF	; 255
    2848:	80 81       	ld	r24, Z
    284a:	91 81       	ldd	r25, Z+1	; 0x01
    284c:	22 e0       	ldi	r18, 0x02	; 2
    284e:	8f 3e       	cpi	r24, 0xEF	; 239
    2850:	92 07       	cpc	r25, r18
    2852:	08 f0       	brcs	.+2      	; 0x2856 <func+0x646>
    2854:	71 cf       	rjmp	.-286    	; 0x2738 <func+0x528>
    2856:	cc c0       	rjmp	.+408    	; 0x29f0 <func+0x7e0>
				TIMER1_voidSetOcrValue(j);
				_delay_ms(1);
			}

		}
		else if(Local_u8choise == '3' )
    2858:	fe 01       	movw	r30, r28
    285a:	e4 5b       	subi	r30, 0xB4	; 180
    285c:	ff 4f       	sbci	r31, 0xFF	; 255
    285e:	80 81       	ld	r24, Z
    2860:	83 33       	cpi	r24, 0x33	; 51
    2862:	51 f4       	brne	.+20     	; 0x2878 <func+0x668>
		{
			SPI_u8Tranceive(3);
    2864:	83 e0       	ldi	r24, 0x03	; 3
    2866:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <SPI_u8Tranceive>

			CLCD_voidSetClear();
    286a:	0e 94 a2 09 	call	0x1344	; 0x1344 <CLCD_voidSetClear>
			CLCD_voidSendString("The light opened");
    286e:	8a ee       	ldi	r24, 0xEA	; 234
    2870:	91 e0       	ldi	r25, 0x01	; 1
    2872:	0e 94 c3 08 	call	0x1186	; 0x1186 <CLCD_voidSendString>
    2876:	bc c0       	rjmp	.+376    	; 0x29f0 <func+0x7e0>
		}
		else if(Local_u8choise == '4' )
    2878:	fe 01       	movw	r30, r28
    287a:	e4 5b       	subi	r30, 0xB4	; 180
    287c:	ff 4f       	sbci	r31, 0xFF	; 255
    287e:	80 81       	ld	r24, Z
    2880:	84 33       	cpi	r24, 0x34	; 52
    2882:	51 f4       	brne	.+20     	; 0x2898 <func+0x688>
		{
			SPI_u8Tranceive(4);
    2884:	84 e0       	ldi	r24, 0x04	; 4
    2886:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <SPI_u8Tranceive>

			CLCD_voidSetClear();
    288a:	0e 94 a2 09 	call	0x1344	; 0x1344 <CLCD_voidSetClear>
			CLCD_voidSendString("The light closed");
    288e:	8b ef       	ldi	r24, 0xFB	; 251
    2890:	91 e0       	ldi	r25, 0x01	; 1
    2892:	0e 94 c3 08 	call	0x1186	; 0x1186 <CLCD_voidSendString>
    2896:	ac c0       	rjmp	.+344    	; 0x29f0 <func+0x7e0>


		}
		else if(Local_u8choise == '5')
    2898:	fe 01       	movw	r30, r28
    289a:	e4 5b       	subi	r30, 0xB4	; 180
    289c:	ff 4f       	sbci	r31, 0xFF	; 255
    289e:	80 81       	ld	r24, Z
    28a0:	85 33       	cpi	r24, 0x35	; 53
    28a2:	51 f4       	brne	.+20     	; 0x28b8 <func+0x6a8>
		{
			SPI_u8Tranceive(5);
    28a4:	85 e0       	ldi	r24, 0x05	; 5
    28a6:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <SPI_u8Tranceive>

			CLCD_voidSetClear();
    28aa:	0e 94 a2 09 	call	0x1344	; 0x1344 <CLCD_voidSetClear>
			CLCD_voidSendString("The fan opened");
    28ae:	8c e0       	ldi	r24, 0x0C	; 12
    28b0:	92 e0       	ldi	r25, 0x02	; 2
    28b2:	0e 94 c3 08 	call	0x1186	; 0x1186 <CLCD_voidSendString>
    28b6:	9c c0       	rjmp	.+312    	; 0x29f0 <func+0x7e0>


		}
		else if(Local_u8choise == '6')
    28b8:	fe 01       	movw	r30, r28
    28ba:	e4 5b       	subi	r30, 0xB4	; 180
    28bc:	ff 4f       	sbci	r31, 0xFF	; 255
    28be:	80 81       	ld	r24, Z
    28c0:	86 33       	cpi	r24, 0x36	; 54
    28c2:	51 f4       	brne	.+20     	; 0x28d8 <func+0x6c8>
		{
			SPI_u8Tranceive(6);
    28c4:	86 e0       	ldi	r24, 0x06	; 6
    28c6:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <SPI_u8Tranceive>

			CLCD_voidSetClear();
    28ca:	0e 94 a2 09 	call	0x1344	; 0x1344 <CLCD_voidSetClear>
			CLCD_voidSendString("The fan closed");
    28ce:	8b e1       	ldi	r24, 0x1B	; 27
    28d0:	92 e0       	ldi	r25, 0x02	; 2
    28d2:	0e 94 c3 08 	call	0x1186	; 0x1186 <CLCD_voidSendString>
    28d6:	8c c0       	rjmp	.+280    	; 0x29f0 <func+0x7e0>

		}
		else if(Local_u8choise == '7')
    28d8:	fe 01       	movw	r30, r28
    28da:	e4 5b       	subi	r30, 0xB4	; 180
    28dc:	ff 4f       	sbci	r31, 0xFF	; 255
    28de:	80 81       	ld	r24, Z
    28e0:	87 33       	cpi	r24, 0x37	; 55
    28e2:	21 f4       	brne	.+8      	; 0x28ec <func+0x6dc>
		{

			SPI_u8Tranceive(1);
    28e4:	81 e0       	ldi	r24, 0x01	; 1
    28e6:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <SPI_u8Tranceive>
    28ea:	82 c0       	rjmp	.+260    	; 0x29f0 <func+0x7e0>


		}
		else if(Local_u8choise == '8')
    28ec:	fe 01       	movw	r30, r28
    28ee:	e4 5b       	subi	r30, 0xB4	; 180
    28f0:	ff 4f       	sbci	r31, 0xFF	; 255
    28f2:	80 81       	ld	r24, Z
    28f4:	88 33       	cpi	r24, 0x38	; 56
    28f6:	21 f4       	brne	.+8      	; 0x2900 <func+0x6f0>
		{

			  SPI_u8Tranceive(2);
    28f8:	82 e0       	ldi	r24, 0x02	; 2
    28fa:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <SPI_u8Tranceive>
    28fe:	78 c0       	rjmp	.+240    	; 0x29f0 <func+0x7e0>

		}
		else
		{
			CLCD_voidSetClear();
    2900:	0e 94 a2 09 	call	0x1344	; 0x1344 <CLCD_voidSetClear>
			CLCD_voidSendString("Wrong choise !!");
    2904:	8a e2       	ldi	r24, 0x2A	; 42
    2906:	92 e0       	ldi	r25, 0x02	; 2
    2908:	0e 94 c3 08 	call	0x1186	; 0x1186 <CLCD_voidSendString>
    290c:	80 e0       	ldi	r24, 0x00	; 0
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	aa ef       	ldi	r26, 0xFA	; 250
    2912:	b4 e4       	ldi	r27, 0x44	; 68
    2914:	8b 87       	std	Y+11, r24	; 0x0b
    2916:	9c 87       	std	Y+12, r25	; 0x0c
    2918:	ad 87       	std	Y+13, r26	; 0x0d
    291a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    291c:	6b 85       	ldd	r22, Y+11	; 0x0b
    291e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2920:	8d 85       	ldd	r24, Y+13	; 0x0d
    2922:	9e 85       	ldd	r25, Y+14	; 0x0e
    2924:	20 e0       	ldi	r18, 0x00	; 0
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	4a ef       	ldi	r20, 0xFA	; 250
    292a:	54 e4       	ldi	r21, 0x44	; 68
    292c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2930:	dc 01       	movw	r26, r24
    2932:	cb 01       	movw	r24, r22
    2934:	8f 83       	std	Y+7, r24	; 0x07
    2936:	98 87       	std	Y+8, r25	; 0x08
    2938:	a9 87       	std	Y+9, r26	; 0x09
    293a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    293c:	6f 81       	ldd	r22, Y+7	; 0x07
    293e:	78 85       	ldd	r23, Y+8	; 0x08
    2940:	89 85       	ldd	r24, Y+9	; 0x09
    2942:	9a 85       	ldd	r25, Y+10	; 0x0a
    2944:	20 e0       	ldi	r18, 0x00	; 0
    2946:	30 e0       	ldi	r19, 0x00	; 0
    2948:	40 e8       	ldi	r20, 0x80	; 128
    294a:	5f e3       	ldi	r21, 0x3F	; 63
    294c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2950:	88 23       	and	r24, r24
    2952:	2c f4       	brge	.+10     	; 0x295e <func+0x74e>
		__ticks = 1;
    2954:	81 e0       	ldi	r24, 0x01	; 1
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	9e 83       	std	Y+6, r25	; 0x06
    295a:	8d 83       	std	Y+5, r24	; 0x05
    295c:	3f c0       	rjmp	.+126    	; 0x29dc <func+0x7cc>
	else if (__tmp > 65535)
    295e:	6f 81       	ldd	r22, Y+7	; 0x07
    2960:	78 85       	ldd	r23, Y+8	; 0x08
    2962:	89 85       	ldd	r24, Y+9	; 0x09
    2964:	9a 85       	ldd	r25, Y+10	; 0x0a
    2966:	20 e0       	ldi	r18, 0x00	; 0
    2968:	3f ef       	ldi	r19, 0xFF	; 255
    296a:	4f e7       	ldi	r20, 0x7F	; 127
    296c:	57 e4       	ldi	r21, 0x47	; 71
    296e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2972:	18 16       	cp	r1, r24
    2974:	4c f5       	brge	.+82     	; 0x29c8 <func+0x7b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2976:	6b 85       	ldd	r22, Y+11	; 0x0b
    2978:	7c 85       	ldd	r23, Y+12	; 0x0c
    297a:	8d 85       	ldd	r24, Y+13	; 0x0d
    297c:	9e 85       	ldd	r25, Y+14	; 0x0e
    297e:	20 e0       	ldi	r18, 0x00	; 0
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	40 e2       	ldi	r20, 0x20	; 32
    2984:	51 e4       	ldi	r21, 0x41	; 65
    2986:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    298a:	dc 01       	movw	r26, r24
    298c:	cb 01       	movw	r24, r22
    298e:	bc 01       	movw	r22, r24
    2990:	cd 01       	movw	r24, r26
    2992:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2996:	dc 01       	movw	r26, r24
    2998:	cb 01       	movw	r24, r22
    299a:	9e 83       	std	Y+6, r25	; 0x06
    299c:	8d 83       	std	Y+5, r24	; 0x05
    299e:	0f c0       	rjmp	.+30     	; 0x29be <func+0x7ae>
    29a0:	88 ec       	ldi	r24, 0xC8	; 200
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	9c 83       	std	Y+4, r25	; 0x04
    29a6:	8b 83       	std	Y+3, r24	; 0x03
    29a8:	8b 81       	ldd	r24, Y+3	; 0x03
    29aa:	9c 81       	ldd	r25, Y+4	; 0x04
    29ac:	01 97       	sbiw	r24, 0x01	; 1
    29ae:	f1 f7       	brne	.-4      	; 0x29ac <func+0x79c>
    29b0:	9c 83       	std	Y+4, r25	; 0x04
    29b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29b4:	8d 81       	ldd	r24, Y+5	; 0x05
    29b6:	9e 81       	ldd	r25, Y+6	; 0x06
    29b8:	01 97       	sbiw	r24, 0x01	; 1
    29ba:	9e 83       	std	Y+6, r25	; 0x06
    29bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29be:	8d 81       	ldd	r24, Y+5	; 0x05
    29c0:	9e 81       	ldd	r25, Y+6	; 0x06
    29c2:	00 97       	sbiw	r24, 0x00	; 0
    29c4:	69 f7       	brne	.-38     	; 0x29a0 <func+0x790>
    29c6:	14 c0       	rjmp	.+40     	; 0x29f0 <func+0x7e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29c8:	6f 81       	ldd	r22, Y+7	; 0x07
    29ca:	78 85       	ldd	r23, Y+8	; 0x08
    29cc:	89 85       	ldd	r24, Y+9	; 0x09
    29ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d4:	dc 01       	movw	r26, r24
    29d6:	cb 01       	movw	r24, r22
    29d8:	9e 83       	std	Y+6, r25	; 0x06
    29da:	8d 83       	std	Y+5, r24	; 0x05
    29dc:	8d 81       	ldd	r24, Y+5	; 0x05
    29de:	9e 81       	ldd	r25, Y+6	; 0x06
    29e0:	9a 83       	std	Y+2, r25	; 0x02
    29e2:	89 83       	std	Y+1, r24	; 0x01
    29e4:	89 81       	ldd	r24, Y+1	; 0x01
    29e6:	9a 81       	ldd	r25, Y+2	; 0x02
    29e8:	01 97       	sbiw	r24, 0x01	; 1
    29ea:	f1 f7       	brne	.-4      	; 0x29e8 <func+0x7d8>
    29ec:	9a 83       	std	Y+2, r25	; 0x02
    29ee:	89 83       	std	Y+1, r24	; 0x01


		}

	}
	while(flag)
    29f0:	80 91 0a 03 	lds	r24, 0x030A
    29f4:	88 23       	and	r24, r24
    29f6:	09 f0       	breq	.+2      	; 0x29fa <func+0x7ea>
    29f8:	82 cd       	rjmp	.-1276   	; 0x24fe <func+0x2ee>

		}

	}

}
    29fa:	c7 5a       	subi	r28, 0xA7	; 167
    29fc:	df 4f       	sbci	r29, 0xFF	; 255
    29fe:	0f b6       	in	r0, 0x3f	; 63
    2a00:	f8 94       	cli
    2a02:	de bf       	out	0x3e, r29	; 62
    2a04:	0f be       	out	0x3f, r0	; 63
    2a06:	cd bf       	out	0x3d, r28	; 61
    2a08:	cf 91       	pop	r28
    2a0a:	df 91       	pop	r29
    2a0c:	1f 91       	pop	r17
    2a0e:	0f 91       	pop	r16
    2a10:	08 95       	ret

00002a12 <Alarm>:
void Alarm(void)
{
    2a12:	df 93       	push	r29
    2a14:	cf 93       	push	r28
    2a16:	cd b7       	in	r28, 0x3d	; 61
    2a18:	de b7       	in	r29, 0x3e	; 62
    2a1a:	aa 97       	sbiw	r28, 0x2a	; 42
    2a1c:	0f b6       	in	r0, 0x3f	; 63
    2a1e:	f8 94       	cli
    2a20:	de bf       	out	0x3e, r29	; 62
    2a22:	0f be       	out	0x3f, r0	; 63
    2a24:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinVal(PORTC_REG,PIN5,PIN_VAL_HIGH);
    2a26:	83 e0       	ldi	r24, 0x03	; 3
    2a28:	65 e0       	ldi	r22, 0x05	; 5
    2a2a:	41 e0       	ldi	r20, 0x01	; 1
    2a2c:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_voidSetPinVal>
	DIO_voidSetPinVal(PORTC_REG,PIN3,PIN_VAL_HIGH);
    2a30:	83 e0       	ldi	r24, 0x03	; 3
    2a32:	63 e0       	ldi	r22, 0x03	; 3
    2a34:	41 e0       	ldi	r20, 0x01	; 1
    2a36:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_voidSetPinVal>
    2a3a:	80 e0       	ldi	r24, 0x00	; 0
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	a8 e4       	ldi	r26, 0x48	; 72
    2a40:	b3 e4       	ldi	r27, 0x43	; 67
    2a42:	8f a3       	std	Y+39, r24	; 0x27
    2a44:	98 a7       	std	Y+40, r25	; 0x28
    2a46:	a9 a7       	std	Y+41, r26	; 0x29
    2a48:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a4a:	6f a1       	ldd	r22, Y+39	; 0x27
    2a4c:	78 a5       	ldd	r23, Y+40	; 0x28
    2a4e:	89 a5       	ldd	r24, Y+41	; 0x29
    2a50:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a52:	20 e0       	ldi	r18, 0x00	; 0
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	4a ef       	ldi	r20, 0xFA	; 250
    2a58:	54 e4       	ldi	r21, 0x44	; 68
    2a5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a5e:	dc 01       	movw	r26, r24
    2a60:	cb 01       	movw	r24, r22
    2a62:	8b a3       	std	Y+35, r24	; 0x23
    2a64:	9c a3       	std	Y+36, r25	; 0x24
    2a66:	ad a3       	std	Y+37, r26	; 0x25
    2a68:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a6a:	6b a1       	ldd	r22, Y+35	; 0x23
    2a6c:	7c a1       	ldd	r23, Y+36	; 0x24
    2a6e:	8d a1       	ldd	r24, Y+37	; 0x25
    2a70:	9e a1       	ldd	r25, Y+38	; 0x26
    2a72:	20 e0       	ldi	r18, 0x00	; 0
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	40 e8       	ldi	r20, 0x80	; 128
    2a78:	5f e3       	ldi	r21, 0x3F	; 63
    2a7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a7e:	88 23       	and	r24, r24
    2a80:	2c f4       	brge	.+10     	; 0x2a8c <Alarm+0x7a>
		__ticks = 1;
    2a82:	81 e0       	ldi	r24, 0x01	; 1
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	9a a3       	std	Y+34, r25	; 0x22
    2a88:	89 a3       	std	Y+33, r24	; 0x21
    2a8a:	3f c0       	rjmp	.+126    	; 0x2b0a <Alarm+0xf8>
	else if (__tmp > 65535)
    2a8c:	6b a1       	ldd	r22, Y+35	; 0x23
    2a8e:	7c a1       	ldd	r23, Y+36	; 0x24
    2a90:	8d a1       	ldd	r24, Y+37	; 0x25
    2a92:	9e a1       	ldd	r25, Y+38	; 0x26
    2a94:	20 e0       	ldi	r18, 0x00	; 0
    2a96:	3f ef       	ldi	r19, 0xFF	; 255
    2a98:	4f e7       	ldi	r20, 0x7F	; 127
    2a9a:	57 e4       	ldi	r21, 0x47	; 71
    2a9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2aa0:	18 16       	cp	r1, r24
    2aa2:	4c f5       	brge	.+82     	; 0x2af6 <Alarm+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aa4:	6f a1       	ldd	r22, Y+39	; 0x27
    2aa6:	78 a5       	ldd	r23, Y+40	; 0x28
    2aa8:	89 a5       	ldd	r24, Y+41	; 0x29
    2aaa:	9a a5       	ldd	r25, Y+42	; 0x2a
    2aac:	20 e0       	ldi	r18, 0x00	; 0
    2aae:	30 e0       	ldi	r19, 0x00	; 0
    2ab0:	40 e2       	ldi	r20, 0x20	; 32
    2ab2:	51 e4       	ldi	r21, 0x41	; 65
    2ab4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab8:	dc 01       	movw	r26, r24
    2aba:	cb 01       	movw	r24, r22
    2abc:	bc 01       	movw	r22, r24
    2abe:	cd 01       	movw	r24, r26
    2ac0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac4:	dc 01       	movw	r26, r24
    2ac6:	cb 01       	movw	r24, r22
    2ac8:	9a a3       	std	Y+34, r25	; 0x22
    2aca:	89 a3       	std	Y+33, r24	; 0x21
    2acc:	0f c0       	rjmp	.+30     	; 0x2aec <Alarm+0xda>
    2ace:	88 ec       	ldi	r24, 0xC8	; 200
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	98 a3       	std	Y+32, r25	; 0x20
    2ad4:	8f 8f       	std	Y+31, r24	; 0x1f
    2ad6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ad8:	98 a1       	ldd	r25, Y+32	; 0x20
    2ada:	01 97       	sbiw	r24, 0x01	; 1
    2adc:	f1 f7       	brne	.-4      	; 0x2ada <Alarm+0xc8>
    2ade:	98 a3       	std	Y+32, r25	; 0x20
    2ae0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ae2:	89 a1       	ldd	r24, Y+33	; 0x21
    2ae4:	9a a1       	ldd	r25, Y+34	; 0x22
    2ae6:	01 97       	sbiw	r24, 0x01	; 1
    2ae8:	9a a3       	std	Y+34, r25	; 0x22
    2aea:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aec:	89 a1       	ldd	r24, Y+33	; 0x21
    2aee:	9a a1       	ldd	r25, Y+34	; 0x22
    2af0:	00 97       	sbiw	r24, 0x00	; 0
    2af2:	69 f7       	brne	.-38     	; 0x2ace <Alarm+0xbc>
    2af4:	14 c0       	rjmp	.+40     	; 0x2b1e <Alarm+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2af6:	6b a1       	ldd	r22, Y+35	; 0x23
    2af8:	7c a1       	ldd	r23, Y+36	; 0x24
    2afa:	8d a1       	ldd	r24, Y+37	; 0x25
    2afc:	9e a1       	ldd	r25, Y+38	; 0x26
    2afe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b02:	dc 01       	movw	r26, r24
    2b04:	cb 01       	movw	r24, r22
    2b06:	9a a3       	std	Y+34, r25	; 0x22
    2b08:	89 a3       	std	Y+33, r24	; 0x21
    2b0a:	89 a1       	ldd	r24, Y+33	; 0x21
    2b0c:	9a a1       	ldd	r25, Y+34	; 0x22
    2b0e:	9e 8f       	std	Y+30, r25	; 0x1e
    2b10:	8d 8f       	std	Y+29, r24	; 0x1d
    2b12:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b14:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b16:	01 97       	sbiw	r24, 0x01	; 1
    2b18:	f1 f7       	brne	.-4      	; 0x2b16 <Alarm+0x104>
    2b1a:	9e 8f       	std	Y+30, r25	; 0x1e
    2b1c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(200);
	DIO_voidSetPinVal(PORTC_REG,PIN5,PIN_VAL_LOW);
    2b1e:	83 e0       	ldi	r24, 0x03	; 3
    2b20:	65 e0       	ldi	r22, 0x05	; 5
    2b22:	40 e0       	ldi	r20, 0x00	; 0
    2b24:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_voidSetPinVal>
	DIO_voidSetPinVal(PORTC_REG,PIN3,PIN_VAL_LOW);
    2b28:	83 e0       	ldi	r24, 0x03	; 3
    2b2a:	63 e0       	ldi	r22, 0x03	; 3
    2b2c:	40 e0       	ldi	r20, 0x00	; 0
    2b2e:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_voidSetPinVal>
    2b32:	80 e0       	ldi	r24, 0x00	; 0
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	a8 e4       	ldi	r26, 0x48	; 72
    2b38:	b3 e4       	ldi	r27, 0x43	; 67
    2b3a:	89 8f       	std	Y+25, r24	; 0x19
    2b3c:	9a 8f       	std	Y+26, r25	; 0x1a
    2b3e:	ab 8f       	std	Y+27, r26	; 0x1b
    2b40:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b42:	69 8d       	ldd	r22, Y+25	; 0x19
    2b44:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b46:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b48:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b4a:	20 e0       	ldi	r18, 0x00	; 0
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	4a ef       	ldi	r20, 0xFA	; 250
    2b50:	54 e4       	ldi	r21, 0x44	; 68
    2b52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b56:	dc 01       	movw	r26, r24
    2b58:	cb 01       	movw	r24, r22
    2b5a:	8d 8b       	std	Y+21, r24	; 0x15
    2b5c:	9e 8b       	std	Y+22, r25	; 0x16
    2b5e:	af 8b       	std	Y+23, r26	; 0x17
    2b60:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b62:	6d 89       	ldd	r22, Y+21	; 0x15
    2b64:	7e 89       	ldd	r23, Y+22	; 0x16
    2b66:	8f 89       	ldd	r24, Y+23	; 0x17
    2b68:	98 8d       	ldd	r25, Y+24	; 0x18
    2b6a:	20 e0       	ldi	r18, 0x00	; 0
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	40 e8       	ldi	r20, 0x80	; 128
    2b70:	5f e3       	ldi	r21, 0x3F	; 63
    2b72:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b76:	88 23       	and	r24, r24
    2b78:	2c f4       	brge	.+10     	; 0x2b84 <Alarm+0x172>
		__ticks = 1;
    2b7a:	81 e0       	ldi	r24, 0x01	; 1
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	9c 8b       	std	Y+20, r25	; 0x14
    2b80:	8b 8b       	std	Y+19, r24	; 0x13
    2b82:	3f c0       	rjmp	.+126    	; 0x2c02 <Alarm+0x1f0>
	else if (__tmp > 65535)
    2b84:	6d 89       	ldd	r22, Y+21	; 0x15
    2b86:	7e 89       	ldd	r23, Y+22	; 0x16
    2b88:	8f 89       	ldd	r24, Y+23	; 0x17
    2b8a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b8c:	20 e0       	ldi	r18, 0x00	; 0
    2b8e:	3f ef       	ldi	r19, 0xFF	; 255
    2b90:	4f e7       	ldi	r20, 0x7F	; 127
    2b92:	57 e4       	ldi	r21, 0x47	; 71
    2b94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b98:	18 16       	cp	r1, r24
    2b9a:	4c f5       	brge	.+82     	; 0x2bee <Alarm+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b9c:	69 8d       	ldd	r22, Y+25	; 0x19
    2b9e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ba0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ba2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ba4:	20 e0       	ldi	r18, 0x00	; 0
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	40 e2       	ldi	r20, 0x20	; 32
    2baa:	51 e4       	ldi	r21, 0x41	; 65
    2bac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb0:	dc 01       	movw	r26, r24
    2bb2:	cb 01       	movw	r24, r22
    2bb4:	bc 01       	movw	r22, r24
    2bb6:	cd 01       	movw	r24, r26
    2bb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bbc:	dc 01       	movw	r26, r24
    2bbe:	cb 01       	movw	r24, r22
    2bc0:	9c 8b       	std	Y+20, r25	; 0x14
    2bc2:	8b 8b       	std	Y+19, r24	; 0x13
    2bc4:	0f c0       	rjmp	.+30     	; 0x2be4 <Alarm+0x1d2>
    2bc6:	88 ec       	ldi	r24, 0xC8	; 200
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	9a 8b       	std	Y+18, r25	; 0x12
    2bcc:	89 8b       	std	Y+17, r24	; 0x11
    2bce:	89 89       	ldd	r24, Y+17	; 0x11
    2bd0:	9a 89       	ldd	r25, Y+18	; 0x12
    2bd2:	01 97       	sbiw	r24, 0x01	; 1
    2bd4:	f1 f7       	brne	.-4      	; 0x2bd2 <Alarm+0x1c0>
    2bd6:	9a 8b       	std	Y+18, r25	; 0x12
    2bd8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bda:	8b 89       	ldd	r24, Y+19	; 0x13
    2bdc:	9c 89       	ldd	r25, Y+20	; 0x14
    2bde:	01 97       	sbiw	r24, 0x01	; 1
    2be0:	9c 8b       	std	Y+20, r25	; 0x14
    2be2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2be4:	8b 89       	ldd	r24, Y+19	; 0x13
    2be6:	9c 89       	ldd	r25, Y+20	; 0x14
    2be8:	00 97       	sbiw	r24, 0x00	; 0
    2bea:	69 f7       	brne	.-38     	; 0x2bc6 <Alarm+0x1b4>
    2bec:	14 c0       	rjmp	.+40     	; 0x2c16 <Alarm+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bee:	6d 89       	ldd	r22, Y+21	; 0x15
    2bf0:	7e 89       	ldd	r23, Y+22	; 0x16
    2bf2:	8f 89       	ldd	r24, Y+23	; 0x17
    2bf4:	98 8d       	ldd	r25, Y+24	; 0x18
    2bf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bfa:	dc 01       	movw	r26, r24
    2bfc:	cb 01       	movw	r24, r22
    2bfe:	9c 8b       	std	Y+20, r25	; 0x14
    2c00:	8b 8b       	std	Y+19, r24	; 0x13
    2c02:	8b 89       	ldd	r24, Y+19	; 0x13
    2c04:	9c 89       	ldd	r25, Y+20	; 0x14
    2c06:	98 8b       	std	Y+16, r25	; 0x10
    2c08:	8f 87       	std	Y+15, r24	; 0x0f
    2c0a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c0c:	98 89       	ldd	r25, Y+16	; 0x10
    2c0e:	01 97       	sbiw	r24, 0x01	; 1
    2c10:	f1 f7       	brne	.-4      	; 0x2c0e <Alarm+0x1fc>
    2c12:	98 8b       	std	Y+16, r25	; 0x10
    2c14:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(200);
	DIO_voidSetPinVal(PORTC_REG,PIN5,PIN_VAL_HIGH);
    2c16:	83 e0       	ldi	r24, 0x03	; 3
    2c18:	65 e0       	ldi	r22, 0x05	; 5
    2c1a:	41 e0       	ldi	r20, 0x01	; 1
    2c1c:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_voidSetPinVal>
	DIO_voidSetPinVal(PORTC_REG,PIN3,PIN_VAL_HIGH);
    2c20:	83 e0       	ldi	r24, 0x03	; 3
    2c22:	63 e0       	ldi	r22, 0x03	; 3
    2c24:	41 e0       	ldi	r20, 0x01	; 1
    2c26:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_voidSetPinVal>
    2c2a:	80 e0       	ldi	r24, 0x00	; 0
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	a8 e4       	ldi	r26, 0x48	; 72
    2c30:	b3 e4       	ldi	r27, 0x43	; 67
    2c32:	8b 87       	std	Y+11, r24	; 0x0b
    2c34:	9c 87       	std	Y+12, r25	; 0x0c
    2c36:	ad 87       	std	Y+13, r26	; 0x0d
    2c38:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c40:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c42:	20 e0       	ldi	r18, 0x00	; 0
    2c44:	30 e0       	ldi	r19, 0x00	; 0
    2c46:	4a ef       	ldi	r20, 0xFA	; 250
    2c48:	54 e4       	ldi	r21, 0x44	; 68
    2c4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c4e:	dc 01       	movw	r26, r24
    2c50:	cb 01       	movw	r24, r22
    2c52:	8f 83       	std	Y+7, r24	; 0x07
    2c54:	98 87       	std	Y+8, r25	; 0x08
    2c56:	a9 87       	std	Y+9, r26	; 0x09
    2c58:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c5a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c5c:	78 85       	ldd	r23, Y+8	; 0x08
    2c5e:	89 85       	ldd	r24, Y+9	; 0x09
    2c60:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c62:	20 e0       	ldi	r18, 0x00	; 0
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	40 e8       	ldi	r20, 0x80	; 128
    2c68:	5f e3       	ldi	r21, 0x3F	; 63
    2c6a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c6e:	88 23       	and	r24, r24
    2c70:	2c f4       	brge	.+10     	; 0x2c7c <Alarm+0x26a>
		__ticks = 1;
    2c72:	81 e0       	ldi	r24, 0x01	; 1
    2c74:	90 e0       	ldi	r25, 0x00	; 0
    2c76:	9e 83       	std	Y+6, r25	; 0x06
    2c78:	8d 83       	std	Y+5, r24	; 0x05
    2c7a:	3f c0       	rjmp	.+126    	; 0x2cfa <Alarm+0x2e8>
	else if (__tmp > 65535)
    2c7c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c7e:	78 85       	ldd	r23, Y+8	; 0x08
    2c80:	89 85       	ldd	r24, Y+9	; 0x09
    2c82:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c84:	20 e0       	ldi	r18, 0x00	; 0
    2c86:	3f ef       	ldi	r19, 0xFF	; 255
    2c88:	4f e7       	ldi	r20, 0x7F	; 127
    2c8a:	57 e4       	ldi	r21, 0x47	; 71
    2c8c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c90:	18 16       	cp	r1, r24
    2c92:	4c f5       	brge	.+82     	; 0x2ce6 <Alarm+0x2d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c94:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c96:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c98:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c9c:	20 e0       	ldi	r18, 0x00	; 0
    2c9e:	30 e0       	ldi	r19, 0x00	; 0
    2ca0:	40 e2       	ldi	r20, 0x20	; 32
    2ca2:	51 e4       	ldi	r21, 0x41	; 65
    2ca4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ca8:	dc 01       	movw	r26, r24
    2caa:	cb 01       	movw	r24, r22
    2cac:	bc 01       	movw	r22, r24
    2cae:	cd 01       	movw	r24, r26
    2cb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb4:	dc 01       	movw	r26, r24
    2cb6:	cb 01       	movw	r24, r22
    2cb8:	9e 83       	std	Y+6, r25	; 0x06
    2cba:	8d 83       	std	Y+5, r24	; 0x05
    2cbc:	0f c0       	rjmp	.+30     	; 0x2cdc <Alarm+0x2ca>
    2cbe:	88 ec       	ldi	r24, 0xC8	; 200
    2cc0:	90 e0       	ldi	r25, 0x00	; 0
    2cc2:	9c 83       	std	Y+4, r25	; 0x04
    2cc4:	8b 83       	std	Y+3, r24	; 0x03
    2cc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cca:	01 97       	sbiw	r24, 0x01	; 1
    2ccc:	f1 f7       	brne	.-4      	; 0x2cca <Alarm+0x2b8>
    2cce:	9c 83       	std	Y+4, r25	; 0x04
    2cd0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cd2:	8d 81       	ldd	r24, Y+5	; 0x05
    2cd4:	9e 81       	ldd	r25, Y+6	; 0x06
    2cd6:	01 97       	sbiw	r24, 0x01	; 1
    2cd8:	9e 83       	std	Y+6, r25	; 0x06
    2cda:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cdc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cde:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce0:	00 97       	sbiw	r24, 0x00	; 0
    2ce2:	69 f7       	brne	.-38     	; 0x2cbe <Alarm+0x2ac>
    2ce4:	14 c0       	rjmp	.+40     	; 0x2d0e <Alarm+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ce6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ce8:	78 85       	ldd	r23, Y+8	; 0x08
    2cea:	89 85       	ldd	r24, Y+9	; 0x09
    2cec:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cf2:	dc 01       	movw	r26, r24
    2cf4:	cb 01       	movw	r24, r22
    2cf6:	9e 83       	std	Y+6, r25	; 0x06
    2cf8:	8d 83       	std	Y+5, r24	; 0x05
    2cfa:	8d 81       	ldd	r24, Y+5	; 0x05
    2cfc:	9e 81       	ldd	r25, Y+6	; 0x06
    2cfe:	9a 83       	std	Y+2, r25	; 0x02
    2d00:	89 83       	std	Y+1, r24	; 0x01
    2d02:	89 81       	ldd	r24, Y+1	; 0x01
    2d04:	9a 81       	ldd	r25, Y+2	; 0x02
    2d06:	01 97       	sbiw	r24, 0x01	; 1
    2d08:	f1 f7       	brne	.-4      	; 0x2d06 <Alarm+0x2f4>
    2d0a:	9a 83       	std	Y+2, r25	; 0x02
    2d0c:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(200);


}
    2d0e:	aa 96       	adiw	r28, 0x2a	; 42
    2d10:	0f b6       	in	r0, 0x3f	; 63
    2d12:	f8 94       	cli
    2d14:	de bf       	out	0x3e, r29	; 62
    2d16:	0f be       	out	0x3f, r0	; 63
    2d18:	cd bf       	out	0x3d, r28	; 61
    2d1a:	cf 91       	pop	r28
    2d1c:	df 91       	pop	r29
    2d1e:	08 95       	ret

00002d20 <__udivmodhi4>:
    2d20:	aa 1b       	sub	r26, r26
    2d22:	bb 1b       	sub	r27, r27
    2d24:	51 e1       	ldi	r21, 0x11	; 17
    2d26:	07 c0       	rjmp	.+14     	; 0x2d36 <__udivmodhi4_ep>

00002d28 <__udivmodhi4_loop>:
    2d28:	aa 1f       	adc	r26, r26
    2d2a:	bb 1f       	adc	r27, r27
    2d2c:	a6 17       	cp	r26, r22
    2d2e:	b7 07       	cpc	r27, r23
    2d30:	10 f0       	brcs	.+4      	; 0x2d36 <__udivmodhi4_ep>
    2d32:	a6 1b       	sub	r26, r22
    2d34:	b7 0b       	sbc	r27, r23

00002d36 <__udivmodhi4_ep>:
    2d36:	88 1f       	adc	r24, r24
    2d38:	99 1f       	adc	r25, r25
    2d3a:	5a 95       	dec	r21
    2d3c:	a9 f7       	brne	.-22     	; 0x2d28 <__udivmodhi4_loop>
    2d3e:	80 95       	com	r24
    2d40:	90 95       	com	r25
    2d42:	bc 01       	movw	r22, r24
    2d44:	cd 01       	movw	r24, r26
    2d46:	08 95       	ret

00002d48 <__prologue_saves__>:
    2d48:	2f 92       	push	r2
    2d4a:	3f 92       	push	r3
    2d4c:	4f 92       	push	r4
    2d4e:	5f 92       	push	r5
    2d50:	6f 92       	push	r6
    2d52:	7f 92       	push	r7
    2d54:	8f 92       	push	r8
    2d56:	9f 92       	push	r9
    2d58:	af 92       	push	r10
    2d5a:	bf 92       	push	r11
    2d5c:	cf 92       	push	r12
    2d5e:	df 92       	push	r13
    2d60:	ef 92       	push	r14
    2d62:	ff 92       	push	r15
    2d64:	0f 93       	push	r16
    2d66:	1f 93       	push	r17
    2d68:	cf 93       	push	r28
    2d6a:	df 93       	push	r29
    2d6c:	cd b7       	in	r28, 0x3d	; 61
    2d6e:	de b7       	in	r29, 0x3e	; 62
    2d70:	ca 1b       	sub	r28, r26
    2d72:	db 0b       	sbc	r29, r27
    2d74:	0f b6       	in	r0, 0x3f	; 63
    2d76:	f8 94       	cli
    2d78:	de bf       	out	0x3e, r29	; 62
    2d7a:	0f be       	out	0x3f, r0	; 63
    2d7c:	cd bf       	out	0x3d, r28	; 61
    2d7e:	09 94       	ijmp

00002d80 <__epilogue_restores__>:
    2d80:	2a 88       	ldd	r2, Y+18	; 0x12
    2d82:	39 88       	ldd	r3, Y+17	; 0x11
    2d84:	48 88       	ldd	r4, Y+16	; 0x10
    2d86:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d88:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d8a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d8c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d8e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d90:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d92:	b9 84       	ldd	r11, Y+9	; 0x09
    2d94:	c8 84       	ldd	r12, Y+8	; 0x08
    2d96:	df 80       	ldd	r13, Y+7	; 0x07
    2d98:	ee 80       	ldd	r14, Y+6	; 0x06
    2d9a:	fd 80       	ldd	r15, Y+5	; 0x05
    2d9c:	0c 81       	ldd	r16, Y+4	; 0x04
    2d9e:	1b 81       	ldd	r17, Y+3	; 0x03
    2da0:	aa 81       	ldd	r26, Y+2	; 0x02
    2da2:	b9 81       	ldd	r27, Y+1	; 0x01
    2da4:	ce 0f       	add	r28, r30
    2da6:	d1 1d       	adc	r29, r1
    2da8:	0f b6       	in	r0, 0x3f	; 63
    2daa:	f8 94       	cli
    2dac:	de bf       	out	0x3e, r29	; 62
    2dae:	0f be       	out	0x3f, r0	; 63
    2db0:	cd bf       	out	0x3d, r28	; 61
    2db2:	ed 01       	movw	r28, r26
    2db4:	08 95       	ret

00002db6 <_exit>:
    2db6:	f8 94       	cli

00002db8 <__stop_program>:
    2db8:	ff cf       	rjmp	.-2      	; 0x2db8 <__stop_program>
