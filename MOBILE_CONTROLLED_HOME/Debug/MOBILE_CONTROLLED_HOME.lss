
MOBILE_CONTROLLED_HOME.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000326a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002c4  00800060  0000326a  000032fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800324  00800324  000035c2  2**0
                  ALLOC
  3 .stab         00002c70  00000000  00000000  000035c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d99  00000000  00000000  00006234  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006fcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000710d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000727d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008ec6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009db1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ab60  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000acc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000af4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b71b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e6       	ldi	r30, 0x6A	; 106
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 32       	cpi	r26, 0x24	; 36
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a4 e2       	ldi	r26, 0x24	; 36
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 32       	cpi	r26, 0x25	; 37
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <main>
      8a:	0c 94 33 19 	jmp	0x3266	; 0x3266 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 fc 18 	jmp	0x31f8	; 0x31f8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e5       	ldi	r26, 0x53	; 83
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 18 19 	jmp	0x3230	; 0x3230 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 08 19 	jmp	0x3210	; 0x3210 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 24 19 	jmp	0x3248	; 0x3248 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 08 19 	jmp	0x3210	; 0x3210 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 24 19 	jmp	0x3248	; 0x3248 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 fc 18 	jmp	0x31f8	; 0x31f8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e5       	ldi	r24, 0x53	; 83
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 18 19 	jmp	0x3230	; 0x3230 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 08 19 	jmp	0x3210	; 0x3210 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 24 19 	jmp	0x3248	; 0x3248 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 08 19 	jmp	0x3210	; 0x3210 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 24 19 	jmp	0x3248	; 0x3248 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 08 19 	jmp	0x3210	; 0x3210 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 24 19 	jmp	0x3248	; 0x3248 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 0c 19 	jmp	0x3218	; 0x3218 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 28 19 	jmp	0x3250	; 0x3250 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <CLCD_voidSendData>:
#include "CLCD_interface.h"
#include "CLCD_private.h"


void CLCD_voidSendData(u8 Copy_u8Data)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2f 97       	sbiw	r28, 0x0f	; 15
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8f 87       	std	Y+15, r24	; 0x0f
	//RS -> 1 SEND COMMAND
	DIO_voidSetPinVal(CTRL_PORT,RS,PIN_VAL_HIGH);
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	41 e0       	ldi	r20, 0x01	; 1
     b62:	0e 94 47 0b 	call	0x168e	; 0x168e <DIO_voidSetPinVal>
	//RW -> 0 SEND COMMAND
	DIO_voidSetPinVal(CTRL_PORT,RW,PIN_VAL_LOW);
     b66:	83 e0       	ldi	r24, 0x03	; 3
     b68:	61 e0       	ldi	r22, 0x01	; 1
     b6a:	40 e0       	ldi	r20, 0x00	; 0
     b6c:	0e 94 47 0b 	call	0x168e	; 0x168e <DIO_voidSetPinVal>
	//SET COMMAND TO DATA PORT
	DIO_voidSetPortVal(DATA_PORT,Copy_u8Data);
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	6f 85       	ldd	r22, Y+15	; 0x0f
     b74:	0e 94 05 0b 	call	0x160a	; 0x160a <DIO_voidSetPortVal>
	DIO_voidSetPinVal(CTRL_PORT,E,PIN_VAL_HIGH);
     b78:	83 e0       	ldi	r24, 0x03	; 3
     b7a:	62 e0       	ldi	r22, 0x02	; 2
     b7c:	41 e0       	ldi	r20, 0x01	; 1
     b7e:	0e 94 47 0b 	call	0x168e	; 0x168e <DIO_voidSetPinVal>
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	a0 e8       	ldi	r26, 0x80	; 128
     b88:	bf e3       	ldi	r27, 0x3F	; 63
     b8a:	8b 87       	std	Y+11, r24	; 0x0b
     b8c:	9c 87       	std	Y+12, r25	; 0x0c
     b8e:	ad 87       	std	Y+13, r26	; 0x0d
     b90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b92:	6b 85       	ldd	r22, Y+11	; 0x0b
     b94:	7c 85       	ldd	r23, Y+12	; 0x0c
     b96:	8d 85       	ldd	r24, Y+13	; 0x0d
     b98:	9e 85       	ldd	r25, Y+14	; 0x0e
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	4a ef       	ldi	r20, 0xFA	; 250
     ba0:	54 e4       	ldi	r21, 0x44	; 68
     ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ba6:	dc 01       	movw	r26, r24
     ba8:	cb 01       	movw	r24, r22
     baa:	8f 83       	std	Y+7, r24	; 0x07
     bac:	98 87       	std	Y+8, r25	; 0x08
     bae:	a9 87       	std	Y+9, r26	; 0x09
     bb0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bb2:	6f 81       	ldd	r22, Y+7	; 0x07
     bb4:	78 85       	ldd	r23, Y+8	; 0x08
     bb6:	89 85       	ldd	r24, Y+9	; 0x09
     bb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	40 e8       	ldi	r20, 0x80	; 128
     bc0:	5f e3       	ldi	r21, 0x3F	; 63
     bc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bc6:	88 23       	and	r24, r24
     bc8:	2c f4       	brge	.+10     	; 0xbd4 <CLCD_voidSendData+0x8e>
		__ticks = 1;
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	9e 83       	std	Y+6, r25	; 0x06
     bd0:	8d 83       	std	Y+5, r24	; 0x05
     bd2:	3f c0       	rjmp	.+126    	; 0xc52 <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
     bd4:	6f 81       	ldd	r22, Y+7	; 0x07
     bd6:	78 85       	ldd	r23, Y+8	; 0x08
     bd8:	89 85       	ldd	r24, Y+9	; 0x09
     bda:	9a 85       	ldd	r25, Y+10	; 0x0a
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	3f ef       	ldi	r19, 0xFF	; 255
     be0:	4f e7       	ldi	r20, 0x7F	; 127
     be2:	57 e4       	ldi	r21, 0x47	; 71
     be4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     be8:	18 16       	cp	r1, r24
     bea:	4c f5       	brge	.+82     	; 0xc3e <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bec:	6b 85       	ldd	r22, Y+11	; 0x0b
     bee:	7c 85       	ldd	r23, Y+12	; 0x0c
     bf0:	8d 85       	ldd	r24, Y+13	; 0x0d
     bf2:	9e 85       	ldd	r25, Y+14	; 0x0e
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	40 e2       	ldi	r20, 0x20	; 32
     bfa:	51 e4       	ldi	r21, 0x41	; 65
     bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c00:	dc 01       	movw	r26, r24
     c02:	cb 01       	movw	r24, r22
     c04:	bc 01       	movw	r22, r24
     c06:	cd 01       	movw	r24, r26
     c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c0c:	dc 01       	movw	r26, r24
     c0e:	cb 01       	movw	r24, r22
     c10:	9e 83       	std	Y+6, r25	; 0x06
     c12:	8d 83       	std	Y+5, r24	; 0x05
     c14:	0f c0       	rjmp	.+30     	; 0xc34 <CLCD_voidSendData+0xee>
     c16:	88 ec       	ldi	r24, 0xC8	; 200
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	9c 83       	std	Y+4, r25	; 0x04
     c1c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c1e:	8b 81       	ldd	r24, Y+3	; 0x03
     c20:	9c 81       	ldd	r25, Y+4	; 0x04
     c22:	01 97       	sbiw	r24, 0x01	; 1
     c24:	f1 f7       	brne	.-4      	; 0xc22 <CLCD_voidSendData+0xdc>
     c26:	9c 83       	std	Y+4, r25	; 0x04
     c28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c2a:	8d 81       	ldd	r24, Y+5	; 0x05
     c2c:	9e 81       	ldd	r25, Y+6	; 0x06
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	9e 83       	std	Y+6, r25	; 0x06
     c32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c34:	8d 81       	ldd	r24, Y+5	; 0x05
     c36:	9e 81       	ldd	r25, Y+6	; 0x06
     c38:	00 97       	sbiw	r24, 0x00	; 0
     c3a:	69 f7       	brne	.-38     	; 0xc16 <CLCD_voidSendData+0xd0>
     c3c:	14 c0       	rjmp	.+40     	; 0xc66 <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c3e:	6f 81       	ldd	r22, Y+7	; 0x07
     c40:	78 85       	ldd	r23, Y+8	; 0x08
     c42:	89 85       	ldd	r24, Y+9	; 0x09
     c44:	9a 85       	ldd	r25, Y+10	; 0x0a
     c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c4a:	dc 01       	movw	r26, r24
     c4c:	cb 01       	movw	r24, r22
     c4e:	9e 83       	std	Y+6, r25	; 0x06
     c50:	8d 83       	std	Y+5, r24	; 0x05
     c52:	8d 81       	ldd	r24, Y+5	; 0x05
     c54:	9e 81       	ldd	r25, Y+6	; 0x06
     c56:	9a 83       	std	Y+2, r25	; 0x02
     c58:	89 83       	std	Y+1, r24	; 0x01
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	9a 81       	ldd	r25, Y+2	; 0x02
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	f1 f7       	brne	.-4      	; 0xc5e <CLCD_voidSendData+0x118>
     c62:	9a 83       	std	Y+2, r25	; 0x02
     c64:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_voidSetPinVal(CTRL_PORT,E,PIN_VAL_LOW);
     c66:	83 e0       	ldi	r24, 0x03	; 3
     c68:	62 e0       	ldi	r22, 0x02	; 2
     c6a:	40 e0       	ldi	r20, 0x00	; 0
     c6c:	0e 94 47 0b 	call	0x168e	; 0x168e <DIO_voidSetPinVal>
}
     c70:	2f 96       	adiw	r28, 0x0f	; 15
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	de bf       	out	0x3e, r29	; 62
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	cd bf       	out	0x3d, r28	; 61
     c7c:	cf 91       	pop	r28
     c7e:	df 91       	pop	r29
     c80:	08 95       	ret

00000c82 <CLCD_voidSendCommand>:

void CLCD_voidSendCommand(u8 Copy_u8Command)
{
     c82:	df 93       	push	r29
     c84:	cf 93       	push	r28
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	2f 97       	sbiw	r28, 0x0f	; 15
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	cd bf       	out	0x3d, r28	; 61
     c96:	8f 87       	std	Y+15, r24	; 0x0f
	//RS -> 0 SEND COMMAND
	DIO_voidSetPinVal(CTRL_PORT,RS,PIN_VAL_LOW);
     c98:	83 e0       	ldi	r24, 0x03	; 3
     c9a:	60 e0       	ldi	r22, 0x00	; 0
     c9c:	40 e0       	ldi	r20, 0x00	; 0
     c9e:	0e 94 47 0b 	call	0x168e	; 0x168e <DIO_voidSetPinVal>
	//RW -> 0 SEND COMMAND
	DIO_voidSetPinVal(CTRL_PORT,RW,PIN_VAL_LOW);
     ca2:	83 e0       	ldi	r24, 0x03	; 3
     ca4:	61 e0       	ldi	r22, 0x01	; 1
     ca6:	40 e0       	ldi	r20, 0x00	; 0
     ca8:	0e 94 47 0b 	call	0x168e	; 0x168e <DIO_voidSetPinVal>
	//SET COMMAND TO DATA PORT
	DIO_voidSetPortVal(DATA_PORT,Copy_u8Command);
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	6f 85       	ldd	r22, Y+15	; 0x0f
     cb0:	0e 94 05 0b 	call	0x160a	; 0x160a <DIO_voidSetPortVal>

	DIO_voidSetPinVal(CTRL_PORT,E,PIN_VAL_HIGH);
     cb4:	83 e0       	ldi	r24, 0x03	; 3
     cb6:	62 e0       	ldi	r22, 0x02	; 2
     cb8:	41 e0       	ldi	r20, 0x01	; 1
     cba:	0e 94 47 0b 	call	0x168e	; 0x168e <DIO_voidSetPinVal>
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	a0 e8       	ldi	r26, 0x80	; 128
     cc4:	bf e3       	ldi	r27, 0x3F	; 63
     cc6:	8b 87       	std	Y+11, r24	; 0x0b
     cc8:	9c 87       	std	Y+12, r25	; 0x0c
     cca:	ad 87       	std	Y+13, r26	; 0x0d
     ccc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cce:	6b 85       	ldd	r22, Y+11	; 0x0b
     cd0:	7c 85       	ldd	r23, Y+12	; 0x0c
     cd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     cd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	4a ef       	ldi	r20, 0xFA	; 250
     cdc:	54 e4       	ldi	r21, 0x44	; 68
     cde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ce2:	dc 01       	movw	r26, r24
     ce4:	cb 01       	movw	r24, r22
     ce6:	8f 83       	std	Y+7, r24	; 0x07
     ce8:	98 87       	std	Y+8, r25	; 0x08
     cea:	a9 87       	std	Y+9, r26	; 0x09
     cec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cee:	6f 81       	ldd	r22, Y+7	; 0x07
     cf0:	78 85       	ldd	r23, Y+8	; 0x08
     cf2:	89 85       	ldd	r24, Y+9	; 0x09
     cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	40 e8       	ldi	r20, 0x80	; 128
     cfc:	5f e3       	ldi	r21, 0x3F	; 63
     cfe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d02:	88 23       	and	r24, r24
     d04:	2c f4       	brge	.+10     	; 0xd10 <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	9e 83       	std	Y+6, r25	; 0x06
     d0c:	8d 83       	std	Y+5, r24	; 0x05
     d0e:	3f c0       	rjmp	.+126    	; 0xd8e <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     d10:	6f 81       	ldd	r22, Y+7	; 0x07
     d12:	78 85       	ldd	r23, Y+8	; 0x08
     d14:	89 85       	ldd	r24, Y+9	; 0x09
     d16:	9a 85       	ldd	r25, Y+10	; 0x0a
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	3f ef       	ldi	r19, 0xFF	; 255
     d1c:	4f e7       	ldi	r20, 0x7F	; 127
     d1e:	57 e4       	ldi	r21, 0x47	; 71
     d20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d24:	18 16       	cp	r1, r24
     d26:	4c f5       	brge	.+82     	; 0xd7a <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d28:	6b 85       	ldd	r22, Y+11	; 0x0b
     d2a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	40 e2       	ldi	r20, 0x20	; 32
     d36:	51 e4       	ldi	r21, 0x41	; 65
     d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d3c:	dc 01       	movw	r26, r24
     d3e:	cb 01       	movw	r24, r22
     d40:	bc 01       	movw	r22, r24
     d42:	cd 01       	movw	r24, r26
     d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d48:	dc 01       	movw	r26, r24
     d4a:	cb 01       	movw	r24, r22
     d4c:	9e 83       	std	Y+6, r25	; 0x06
     d4e:	8d 83       	std	Y+5, r24	; 0x05
     d50:	0f c0       	rjmp	.+30     	; 0xd70 <CLCD_voidSendCommand+0xee>
     d52:	88 ec       	ldi	r24, 0xC8	; 200
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	9c 83       	std	Y+4, r25	; 0x04
     d58:	8b 83       	std	Y+3, r24	; 0x03
     d5a:	8b 81       	ldd	r24, Y+3	; 0x03
     d5c:	9c 81       	ldd	r25, Y+4	; 0x04
     d5e:	01 97       	sbiw	r24, 0x01	; 1
     d60:	f1 f7       	brne	.-4      	; 0xd5e <CLCD_voidSendCommand+0xdc>
     d62:	9c 83       	std	Y+4, r25	; 0x04
     d64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d66:	8d 81       	ldd	r24, Y+5	; 0x05
     d68:	9e 81       	ldd	r25, Y+6	; 0x06
     d6a:	01 97       	sbiw	r24, 0x01	; 1
     d6c:	9e 83       	std	Y+6, r25	; 0x06
     d6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d70:	8d 81       	ldd	r24, Y+5	; 0x05
     d72:	9e 81       	ldd	r25, Y+6	; 0x06
     d74:	00 97       	sbiw	r24, 0x00	; 0
     d76:	69 f7       	brne	.-38     	; 0xd52 <CLCD_voidSendCommand+0xd0>
     d78:	14 c0       	rjmp	.+40     	; 0xda2 <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d7a:	6f 81       	ldd	r22, Y+7	; 0x07
     d7c:	78 85       	ldd	r23, Y+8	; 0x08
     d7e:	89 85       	ldd	r24, Y+9	; 0x09
     d80:	9a 85       	ldd	r25, Y+10	; 0x0a
     d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d86:	dc 01       	movw	r26, r24
     d88:	cb 01       	movw	r24, r22
     d8a:	9e 83       	std	Y+6, r25	; 0x06
     d8c:	8d 83       	std	Y+5, r24	; 0x05
     d8e:	8d 81       	ldd	r24, Y+5	; 0x05
     d90:	9e 81       	ldd	r25, Y+6	; 0x06
     d92:	9a 83       	std	Y+2, r25	; 0x02
     d94:	89 83       	std	Y+1, r24	; 0x01
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	9a 81       	ldd	r25, Y+2	; 0x02
     d9a:	01 97       	sbiw	r24, 0x01	; 1
     d9c:	f1 f7       	brne	.-4      	; 0xd9a <CLCD_voidSendCommand+0x118>
     d9e:	9a 83       	std	Y+2, r25	; 0x02
     da0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_voidSetPinVal(CTRL_PORT,E,PIN_VAL_LOW);
     da2:	83 e0       	ldi	r24, 0x03	; 3
     da4:	62 e0       	ldi	r22, 0x02	; 2
     da6:	40 e0       	ldi	r20, 0x00	; 0
     da8:	0e 94 47 0b 	call	0x168e	; 0x168e <DIO_voidSetPinVal>
}
     dac:	2f 96       	adiw	r28, 0x0f	; 15
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	f8 94       	cli
     db2:	de bf       	out	0x3e, r29	; 62
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	cd bf       	out	0x3d, r28	; 61
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	08 95       	ret

00000dbe <CLCD_voidInit>:

void CLCD_voidInit(void)
{
     dbe:	df 93       	push	r29
     dc0:	cf 93       	push	r28
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
     dc6:	e8 97       	sbiw	r28, 0x38	; 56
     dc8:	0f b6       	in	r0, 0x3f	; 63
     dca:	f8 94       	cli
     dcc:	de bf       	out	0x3e, r29	; 62
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	cd bf       	out	0x3d, r28	; 61
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	a0 e2       	ldi	r26, 0x20	; 32
     dd8:	b2 e4       	ldi	r27, 0x42	; 66
     dda:	8d ab       	std	Y+53, r24	; 0x35
     ddc:	9e ab       	std	Y+54, r25	; 0x36
     dde:	af ab       	std	Y+55, r26	; 0x37
     de0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     de2:	6d a9       	ldd	r22, Y+53	; 0x35
     de4:	7e a9       	ldd	r23, Y+54	; 0x36
     de6:	8f a9       	ldd	r24, Y+55	; 0x37
     de8:	98 ad       	ldd	r25, Y+56	; 0x38
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	4a ef       	ldi	r20, 0xFA	; 250
     df0:	54 e4       	ldi	r21, 0x44	; 68
     df2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     df6:	dc 01       	movw	r26, r24
     df8:	cb 01       	movw	r24, r22
     dfa:	89 ab       	std	Y+49, r24	; 0x31
     dfc:	9a ab       	std	Y+50, r25	; 0x32
     dfe:	ab ab       	std	Y+51, r26	; 0x33
     e00:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     e02:	69 a9       	ldd	r22, Y+49	; 0x31
     e04:	7a a9       	ldd	r23, Y+50	; 0x32
     e06:	8b a9       	ldd	r24, Y+51	; 0x33
     e08:	9c a9       	ldd	r25, Y+52	; 0x34
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	40 e8       	ldi	r20, 0x80	; 128
     e10:	5f e3       	ldi	r21, 0x3F	; 63
     e12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e16:	88 23       	and	r24, r24
     e18:	2c f4       	brge	.+10     	; 0xe24 <CLCD_voidInit+0x66>
		__ticks = 1;
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	98 ab       	std	Y+48, r25	; 0x30
     e20:	8f a7       	std	Y+47, r24	; 0x2f
     e22:	3f c0       	rjmp	.+126    	; 0xea2 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
     e24:	69 a9       	ldd	r22, Y+49	; 0x31
     e26:	7a a9       	ldd	r23, Y+50	; 0x32
     e28:	8b a9       	ldd	r24, Y+51	; 0x33
     e2a:	9c a9       	ldd	r25, Y+52	; 0x34
     e2c:	20 e0       	ldi	r18, 0x00	; 0
     e2e:	3f ef       	ldi	r19, 0xFF	; 255
     e30:	4f e7       	ldi	r20, 0x7F	; 127
     e32:	57 e4       	ldi	r21, 0x47	; 71
     e34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e38:	18 16       	cp	r1, r24
     e3a:	4c f5       	brge	.+82     	; 0xe8e <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e3c:	6d a9       	ldd	r22, Y+53	; 0x35
     e3e:	7e a9       	ldd	r23, Y+54	; 0x36
     e40:	8f a9       	ldd	r24, Y+55	; 0x37
     e42:	98 ad       	ldd	r25, Y+56	; 0x38
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	40 e2       	ldi	r20, 0x20	; 32
     e4a:	51 e4       	ldi	r21, 0x41	; 65
     e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e50:	dc 01       	movw	r26, r24
     e52:	cb 01       	movw	r24, r22
     e54:	bc 01       	movw	r22, r24
     e56:	cd 01       	movw	r24, r26
     e58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e5c:	dc 01       	movw	r26, r24
     e5e:	cb 01       	movw	r24, r22
     e60:	98 ab       	std	Y+48, r25	; 0x30
     e62:	8f a7       	std	Y+47, r24	; 0x2f
     e64:	0f c0       	rjmp	.+30     	; 0xe84 <CLCD_voidInit+0xc6>
     e66:	88 ec       	ldi	r24, 0xC8	; 200
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	9e a7       	std	Y+46, r25	; 0x2e
     e6c:	8d a7       	std	Y+45, r24	; 0x2d
     e6e:	8d a5       	ldd	r24, Y+45	; 0x2d
     e70:	9e a5       	ldd	r25, Y+46	; 0x2e
     e72:	01 97       	sbiw	r24, 0x01	; 1
     e74:	f1 f7       	brne	.-4      	; 0xe72 <CLCD_voidInit+0xb4>
     e76:	9e a7       	std	Y+46, r25	; 0x2e
     e78:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e7a:	8f a5       	ldd	r24, Y+47	; 0x2f
     e7c:	98 a9       	ldd	r25, Y+48	; 0x30
     e7e:	01 97       	sbiw	r24, 0x01	; 1
     e80:	98 ab       	std	Y+48, r25	; 0x30
     e82:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e84:	8f a5       	ldd	r24, Y+47	; 0x2f
     e86:	98 a9       	ldd	r25, Y+48	; 0x30
     e88:	00 97       	sbiw	r24, 0x00	; 0
     e8a:	69 f7       	brne	.-38     	; 0xe66 <CLCD_voidInit+0xa8>
     e8c:	14 c0       	rjmp	.+40     	; 0xeb6 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e8e:	69 a9       	ldd	r22, Y+49	; 0x31
     e90:	7a a9       	ldd	r23, Y+50	; 0x32
     e92:	8b a9       	ldd	r24, Y+51	; 0x33
     e94:	9c a9       	ldd	r25, Y+52	; 0x34
     e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e9a:	dc 01       	movw	r26, r24
     e9c:	cb 01       	movw	r24, r22
     e9e:	98 ab       	std	Y+48, r25	; 0x30
     ea0:	8f a7       	std	Y+47, r24	; 0x2f
     ea2:	8f a5       	ldd	r24, Y+47	; 0x2f
     ea4:	98 a9       	ldd	r25, Y+48	; 0x30
     ea6:	9c a7       	std	Y+44, r25	; 0x2c
     ea8:	8b a7       	std	Y+43, r24	; 0x2b
     eaa:	8b a5       	ldd	r24, Y+43	; 0x2b
     eac:	9c a5       	ldd	r25, Y+44	; 0x2c
     eae:	01 97       	sbiw	r24, 0x01	; 1
     eb0:	f1 f7       	brne	.-4      	; 0xeae <CLCD_voidInit+0xf0>
     eb2:	9c a7       	std	Y+44, r25	; 0x2c
     eb4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(40);
	CLCD_voidSendCommand(0b00111000);
     eb6:	88 e3       	ldi	r24, 0x38	; 56
     eb8:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendCommand>
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	a0 e8       	ldi	r26, 0x80	; 128
     ec2:	bf e3       	ldi	r27, 0x3F	; 63
     ec4:	8f a3       	std	Y+39, r24	; 0x27
     ec6:	98 a7       	std	Y+40, r25	; 0x28
     ec8:	a9 a7       	std	Y+41, r26	; 0x29
     eca:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ecc:	6f a1       	ldd	r22, Y+39	; 0x27
     ece:	78 a5       	ldd	r23, Y+40	; 0x28
     ed0:	89 a5       	ldd	r24, Y+41	; 0x29
     ed2:	9a a5       	ldd	r25, Y+42	; 0x2a
     ed4:	20 e0       	ldi	r18, 0x00	; 0
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	4a ef       	ldi	r20, 0xFA	; 250
     eda:	54 e4       	ldi	r21, 0x44	; 68
     edc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ee0:	dc 01       	movw	r26, r24
     ee2:	cb 01       	movw	r24, r22
     ee4:	8b a3       	std	Y+35, r24	; 0x23
     ee6:	9c a3       	std	Y+36, r25	; 0x24
     ee8:	ad a3       	std	Y+37, r26	; 0x25
     eea:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     eec:	6b a1       	ldd	r22, Y+35	; 0x23
     eee:	7c a1       	ldd	r23, Y+36	; 0x24
     ef0:	8d a1       	ldd	r24, Y+37	; 0x25
     ef2:	9e a1       	ldd	r25, Y+38	; 0x26
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	40 e8       	ldi	r20, 0x80	; 128
     efa:	5f e3       	ldi	r21, 0x3F	; 63
     efc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f00:	88 23       	and	r24, r24
     f02:	2c f4       	brge	.+10     	; 0xf0e <CLCD_voidInit+0x150>
		__ticks = 1;
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	9a a3       	std	Y+34, r25	; 0x22
     f0a:	89 a3       	std	Y+33, r24	; 0x21
     f0c:	3f c0       	rjmp	.+126    	; 0xf8c <CLCD_voidInit+0x1ce>
	else if (__tmp > 65535)
     f0e:	6b a1       	ldd	r22, Y+35	; 0x23
     f10:	7c a1       	ldd	r23, Y+36	; 0x24
     f12:	8d a1       	ldd	r24, Y+37	; 0x25
     f14:	9e a1       	ldd	r25, Y+38	; 0x26
     f16:	20 e0       	ldi	r18, 0x00	; 0
     f18:	3f ef       	ldi	r19, 0xFF	; 255
     f1a:	4f e7       	ldi	r20, 0x7F	; 127
     f1c:	57 e4       	ldi	r21, 0x47	; 71
     f1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f22:	18 16       	cp	r1, r24
     f24:	4c f5       	brge	.+82     	; 0xf78 <CLCD_voidInit+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f26:	6f a1       	ldd	r22, Y+39	; 0x27
     f28:	78 a5       	ldd	r23, Y+40	; 0x28
     f2a:	89 a5       	ldd	r24, Y+41	; 0x29
     f2c:	9a a5       	ldd	r25, Y+42	; 0x2a
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	40 e2       	ldi	r20, 0x20	; 32
     f34:	51 e4       	ldi	r21, 0x41	; 65
     f36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f3a:	dc 01       	movw	r26, r24
     f3c:	cb 01       	movw	r24, r22
     f3e:	bc 01       	movw	r22, r24
     f40:	cd 01       	movw	r24, r26
     f42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f46:	dc 01       	movw	r26, r24
     f48:	cb 01       	movw	r24, r22
     f4a:	9a a3       	std	Y+34, r25	; 0x22
     f4c:	89 a3       	std	Y+33, r24	; 0x21
     f4e:	0f c0       	rjmp	.+30     	; 0xf6e <CLCD_voidInit+0x1b0>
     f50:	88 ec       	ldi	r24, 0xC8	; 200
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	98 a3       	std	Y+32, r25	; 0x20
     f56:	8f 8f       	std	Y+31, r24	; 0x1f
     f58:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f5a:	98 a1       	ldd	r25, Y+32	; 0x20
     f5c:	01 97       	sbiw	r24, 0x01	; 1
     f5e:	f1 f7       	brne	.-4      	; 0xf5c <CLCD_voidInit+0x19e>
     f60:	98 a3       	std	Y+32, r25	; 0x20
     f62:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f64:	89 a1       	ldd	r24, Y+33	; 0x21
     f66:	9a a1       	ldd	r25, Y+34	; 0x22
     f68:	01 97       	sbiw	r24, 0x01	; 1
     f6a:	9a a3       	std	Y+34, r25	; 0x22
     f6c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f6e:	89 a1       	ldd	r24, Y+33	; 0x21
     f70:	9a a1       	ldd	r25, Y+34	; 0x22
     f72:	00 97       	sbiw	r24, 0x00	; 0
     f74:	69 f7       	brne	.-38     	; 0xf50 <CLCD_voidInit+0x192>
     f76:	14 c0       	rjmp	.+40     	; 0xfa0 <CLCD_voidInit+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f78:	6b a1       	ldd	r22, Y+35	; 0x23
     f7a:	7c a1       	ldd	r23, Y+36	; 0x24
     f7c:	8d a1       	ldd	r24, Y+37	; 0x25
     f7e:	9e a1       	ldd	r25, Y+38	; 0x26
     f80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f84:	dc 01       	movw	r26, r24
     f86:	cb 01       	movw	r24, r22
     f88:	9a a3       	std	Y+34, r25	; 0x22
     f8a:	89 a3       	std	Y+33, r24	; 0x21
     f8c:	89 a1       	ldd	r24, Y+33	; 0x21
     f8e:	9a a1       	ldd	r25, Y+34	; 0x22
     f90:	9e 8f       	std	Y+30, r25	; 0x1e
     f92:	8d 8f       	std	Y+29, r24	; 0x1d
     f94:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f96:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f98:	01 97       	sbiw	r24, 0x01	; 1
     f9a:	f1 f7       	brne	.-4      	; 0xf98 <CLCD_voidInit+0x1da>
     f9c:	9e 8f       	std	Y+30, r25	; 0x1e
     f9e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	CLCD_voidSendCommand(0b00001100);
     fa0:	8c e0       	ldi	r24, 0x0C	; 12
     fa2:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendCommand>
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	a0 e8       	ldi	r26, 0x80	; 128
     fac:	bf e3       	ldi	r27, 0x3F	; 63
     fae:	89 8f       	std	Y+25, r24	; 0x19
     fb0:	9a 8f       	std	Y+26, r25	; 0x1a
     fb2:	ab 8f       	std	Y+27, r26	; 0x1b
     fb4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fb6:	69 8d       	ldd	r22, Y+25	; 0x19
     fb8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fba:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fbc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	4a ef       	ldi	r20, 0xFA	; 250
     fc4:	54 e4       	ldi	r21, 0x44	; 68
     fc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fca:	dc 01       	movw	r26, r24
     fcc:	cb 01       	movw	r24, r22
     fce:	8d 8b       	std	Y+21, r24	; 0x15
     fd0:	9e 8b       	std	Y+22, r25	; 0x16
     fd2:	af 8b       	std	Y+23, r26	; 0x17
     fd4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     fd6:	6d 89       	ldd	r22, Y+21	; 0x15
     fd8:	7e 89       	ldd	r23, Y+22	; 0x16
     fda:	8f 89       	ldd	r24, Y+23	; 0x17
     fdc:	98 8d       	ldd	r25, Y+24	; 0x18
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	40 e8       	ldi	r20, 0x80	; 128
     fe4:	5f e3       	ldi	r21, 0x3F	; 63
     fe6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fea:	88 23       	and	r24, r24
     fec:	2c f4       	brge	.+10     	; 0xff8 <CLCD_voidInit+0x23a>
		__ticks = 1;
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	9c 8b       	std	Y+20, r25	; 0x14
     ff4:	8b 8b       	std	Y+19, r24	; 0x13
     ff6:	3f c0       	rjmp	.+126    	; 0x1076 <CLCD_voidInit+0x2b8>
	else if (__tmp > 65535)
     ff8:	6d 89       	ldd	r22, Y+21	; 0x15
     ffa:	7e 89       	ldd	r23, Y+22	; 0x16
     ffc:	8f 89       	ldd	r24, Y+23	; 0x17
     ffe:	98 8d       	ldd	r25, Y+24	; 0x18
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	3f ef       	ldi	r19, 0xFF	; 255
    1004:	4f e7       	ldi	r20, 0x7F	; 127
    1006:	57 e4       	ldi	r21, 0x47	; 71
    1008:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    100c:	18 16       	cp	r1, r24
    100e:	4c f5       	brge	.+82     	; 0x1062 <CLCD_voidInit+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1010:	69 8d       	ldd	r22, Y+25	; 0x19
    1012:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1014:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1016:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1018:	20 e0       	ldi	r18, 0x00	; 0
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	40 e2       	ldi	r20, 0x20	; 32
    101e:	51 e4       	ldi	r21, 0x41	; 65
    1020:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1024:	dc 01       	movw	r26, r24
    1026:	cb 01       	movw	r24, r22
    1028:	bc 01       	movw	r22, r24
    102a:	cd 01       	movw	r24, r26
    102c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1030:	dc 01       	movw	r26, r24
    1032:	cb 01       	movw	r24, r22
    1034:	9c 8b       	std	Y+20, r25	; 0x14
    1036:	8b 8b       	std	Y+19, r24	; 0x13
    1038:	0f c0       	rjmp	.+30     	; 0x1058 <CLCD_voidInit+0x29a>
    103a:	88 ec       	ldi	r24, 0xC8	; 200
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	9a 8b       	std	Y+18, r25	; 0x12
    1040:	89 8b       	std	Y+17, r24	; 0x11
    1042:	89 89       	ldd	r24, Y+17	; 0x11
    1044:	9a 89       	ldd	r25, Y+18	; 0x12
    1046:	01 97       	sbiw	r24, 0x01	; 1
    1048:	f1 f7       	brne	.-4      	; 0x1046 <CLCD_voidInit+0x288>
    104a:	9a 8b       	std	Y+18, r25	; 0x12
    104c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    104e:	8b 89       	ldd	r24, Y+19	; 0x13
    1050:	9c 89       	ldd	r25, Y+20	; 0x14
    1052:	01 97       	sbiw	r24, 0x01	; 1
    1054:	9c 8b       	std	Y+20, r25	; 0x14
    1056:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1058:	8b 89       	ldd	r24, Y+19	; 0x13
    105a:	9c 89       	ldd	r25, Y+20	; 0x14
    105c:	00 97       	sbiw	r24, 0x00	; 0
    105e:	69 f7       	brne	.-38     	; 0x103a <CLCD_voidInit+0x27c>
    1060:	14 c0       	rjmp	.+40     	; 0x108a <CLCD_voidInit+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1062:	6d 89       	ldd	r22, Y+21	; 0x15
    1064:	7e 89       	ldd	r23, Y+22	; 0x16
    1066:	8f 89       	ldd	r24, Y+23	; 0x17
    1068:	98 8d       	ldd	r25, Y+24	; 0x18
    106a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    106e:	dc 01       	movw	r26, r24
    1070:	cb 01       	movw	r24, r22
    1072:	9c 8b       	std	Y+20, r25	; 0x14
    1074:	8b 8b       	std	Y+19, r24	; 0x13
    1076:	8b 89       	ldd	r24, Y+19	; 0x13
    1078:	9c 89       	ldd	r25, Y+20	; 0x14
    107a:	98 8b       	std	Y+16, r25	; 0x10
    107c:	8f 87       	std	Y+15, r24	; 0x0f
    107e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1080:	98 89       	ldd	r25, Y+16	; 0x10
    1082:	01 97       	sbiw	r24, 0x01	; 1
    1084:	f1 f7       	brne	.-4      	; 0x1082 <CLCD_voidInit+0x2c4>
    1086:	98 8b       	std	Y+16, r25	; 0x10
    1088:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	CLCD_voidSendCommand(0b00000001);
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendCommand>
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	a0 e0       	ldi	r26, 0x00	; 0
    1096:	b0 e4       	ldi	r27, 0x40	; 64
    1098:	8b 87       	std	Y+11, r24	; 0x0b
    109a:	9c 87       	std	Y+12, r25	; 0x0c
    109c:	ad 87       	std	Y+13, r26	; 0x0d
    109e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    10a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    10a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    10a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    10a8:	20 e0       	ldi	r18, 0x00	; 0
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	4a ef       	ldi	r20, 0xFA	; 250
    10ae:	54 e4       	ldi	r21, 0x44	; 68
    10b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10b4:	dc 01       	movw	r26, r24
    10b6:	cb 01       	movw	r24, r22
    10b8:	8f 83       	std	Y+7, r24	; 0x07
    10ba:	98 87       	std	Y+8, r25	; 0x08
    10bc:	a9 87       	std	Y+9, r26	; 0x09
    10be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10c0:	6f 81       	ldd	r22, Y+7	; 0x07
    10c2:	78 85       	ldd	r23, Y+8	; 0x08
    10c4:	89 85       	ldd	r24, Y+9	; 0x09
    10c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    10c8:	20 e0       	ldi	r18, 0x00	; 0
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	40 e8       	ldi	r20, 0x80	; 128
    10ce:	5f e3       	ldi	r21, 0x3F	; 63
    10d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10d4:	88 23       	and	r24, r24
    10d6:	2c f4       	brge	.+10     	; 0x10e2 <CLCD_voidInit+0x324>
		__ticks = 1;
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	9e 83       	std	Y+6, r25	; 0x06
    10de:	8d 83       	std	Y+5, r24	; 0x05
    10e0:	3f c0       	rjmp	.+126    	; 0x1160 <CLCD_voidInit+0x3a2>
	else if (__tmp > 65535)
    10e2:	6f 81       	ldd	r22, Y+7	; 0x07
    10e4:	78 85       	ldd	r23, Y+8	; 0x08
    10e6:	89 85       	ldd	r24, Y+9	; 0x09
    10e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ea:	20 e0       	ldi	r18, 0x00	; 0
    10ec:	3f ef       	ldi	r19, 0xFF	; 255
    10ee:	4f e7       	ldi	r20, 0x7F	; 127
    10f0:	57 e4       	ldi	r21, 0x47	; 71
    10f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10f6:	18 16       	cp	r1, r24
    10f8:	4c f5       	brge	.+82     	; 0x114c <CLCD_voidInit+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    10fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    10fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1100:	9e 85       	ldd	r25, Y+14	; 0x0e
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	40 e2       	ldi	r20, 0x20	; 32
    1108:	51 e4       	ldi	r21, 0x41	; 65
    110a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    110e:	dc 01       	movw	r26, r24
    1110:	cb 01       	movw	r24, r22
    1112:	bc 01       	movw	r22, r24
    1114:	cd 01       	movw	r24, r26
    1116:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    111a:	dc 01       	movw	r26, r24
    111c:	cb 01       	movw	r24, r22
    111e:	9e 83       	std	Y+6, r25	; 0x06
    1120:	8d 83       	std	Y+5, r24	; 0x05
    1122:	0f c0       	rjmp	.+30     	; 0x1142 <CLCD_voidInit+0x384>
    1124:	88 ec       	ldi	r24, 0xC8	; 200
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	9c 83       	std	Y+4, r25	; 0x04
    112a:	8b 83       	std	Y+3, r24	; 0x03
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	9c 81       	ldd	r25, Y+4	; 0x04
    1130:	01 97       	sbiw	r24, 0x01	; 1
    1132:	f1 f7       	brne	.-4      	; 0x1130 <CLCD_voidInit+0x372>
    1134:	9c 83       	std	Y+4, r25	; 0x04
    1136:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1138:	8d 81       	ldd	r24, Y+5	; 0x05
    113a:	9e 81       	ldd	r25, Y+6	; 0x06
    113c:	01 97       	sbiw	r24, 0x01	; 1
    113e:	9e 83       	std	Y+6, r25	; 0x06
    1140:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1142:	8d 81       	ldd	r24, Y+5	; 0x05
    1144:	9e 81       	ldd	r25, Y+6	; 0x06
    1146:	00 97       	sbiw	r24, 0x00	; 0
    1148:	69 f7       	brne	.-38     	; 0x1124 <CLCD_voidInit+0x366>
    114a:	14 c0       	rjmp	.+40     	; 0x1174 <CLCD_voidInit+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    114c:	6f 81       	ldd	r22, Y+7	; 0x07
    114e:	78 85       	ldd	r23, Y+8	; 0x08
    1150:	89 85       	ldd	r24, Y+9	; 0x09
    1152:	9a 85       	ldd	r25, Y+10	; 0x0a
    1154:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1158:	dc 01       	movw	r26, r24
    115a:	cb 01       	movw	r24, r22
    115c:	9e 83       	std	Y+6, r25	; 0x06
    115e:	8d 83       	std	Y+5, r24	; 0x05
    1160:	8d 81       	ldd	r24, Y+5	; 0x05
    1162:	9e 81       	ldd	r25, Y+6	; 0x06
    1164:	9a 83       	std	Y+2, r25	; 0x02
    1166:	89 83       	std	Y+1, r24	; 0x01
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	9a 81       	ldd	r25, Y+2	; 0x02
    116c:	01 97       	sbiw	r24, 0x01	; 1
    116e:	f1 f7       	brne	.-4      	; 0x116c <CLCD_voidInit+0x3ae>
    1170:	9a 83       	std	Y+2, r25	; 0x02
    1172:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1174:	e8 96       	adiw	r28, 0x38	; 56
    1176:	0f b6       	in	r0, 0x3f	; 63
    1178:	f8 94       	cli
    117a:	de bf       	out	0x3e, r29	; 62
    117c:	0f be       	out	0x3f, r0	; 63
    117e:	cd bf       	out	0x3d, r28	; 61
    1180:	cf 91       	pop	r28
    1182:	df 91       	pop	r29
    1184:	08 95       	ret

00001186 <CLCD_voidSendString>:
void CLCD_voidSendString(char *Copy_pvString)
{
    1186:	df 93       	push	r29
    1188:	cf 93       	push	r28
    118a:	00 d0       	rcall	.+0      	; 0x118c <CLCD_voidSendString+0x6>
    118c:	0f 92       	push	r0
    118e:	cd b7       	in	r28, 0x3d	; 61
    1190:	de b7       	in	r29, 0x3e	; 62
    1192:	9b 83       	std	Y+3, r25	; 0x03
    1194:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    1196:	19 82       	std	Y+1, r1	; 0x01
    1198:	0e c0       	rjmp	.+28     	; 0x11b6 <CLCD_voidSendString+0x30>
	while(Copy_pvString[i] !='\0')
	{
		CLCD_voidSendData(Copy_pvString[i]);
    119a:	89 81       	ldd	r24, Y+1	; 0x01
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	9b 81       	ldd	r25, Y+3	; 0x03
    11a4:	fc 01       	movw	r30, r24
    11a6:	e2 0f       	add	r30, r18
    11a8:	f3 1f       	adc	r31, r19
    11aa:	80 81       	ld	r24, Z
    11ac:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendData>
		i++;
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	8f 5f       	subi	r24, 0xFF	; 255
    11b4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
void CLCD_voidSendString(char *Copy_pvString)
{
	u8 i=0;
	while(Copy_pvString[i] !='\0')
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	9b 81       	ldd	r25, Y+3	; 0x03
    11c0:	fc 01       	movw	r30, r24
    11c2:	e2 0f       	add	r30, r18
    11c4:	f3 1f       	adc	r31, r19
    11c6:	80 81       	ld	r24, Z
    11c8:	88 23       	and	r24, r24
    11ca:	39 f7       	brne	.-50     	; 0x119a <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pvString[i]);
		i++;
	}
}
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	cf 91       	pop	r28
    11d4:	df 91       	pop	r29
    11d6:	08 95       	ret

000011d8 <CLCD_voidSendNum>:

void CLCD_voidSendNum(u16 Copy_u16Num)
{
    11d8:	df 93       	push	r29
    11da:	cf 93       	push	r28
    11dc:	cd b7       	in	r28, 0x3d	; 61
    11de:	de b7       	in	r29, 0x3e	; 62
    11e0:	2e 97       	sbiw	r28, 0x0e	; 14
    11e2:	0f b6       	in	r0, 0x3f	; 63
    11e4:	f8 94       	cli
    11e6:	de bf       	out	0x3e, r29	; 62
    11e8:	0f be       	out	0x3f, r0	; 63
    11ea:	cd bf       	out	0x3d, r28	; 61
    11ec:	9e 87       	std	Y+14, r25	; 0x0e
    11ee:	8d 87       	std	Y+13, r24	; 0x0d
	u8 arr[10],i=0,j;
    11f0:	1a 82       	std	Y+2, r1	; 0x02

	if(Copy_u16Num==0)
    11f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    11f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    11f6:	00 97       	sbiw	r24, 0x00	; 0
    11f8:	11 f5       	brne	.+68     	; 0x123e <CLCD_voidSendNum+0x66>
	{
		CLCD_voidSendData('0');
    11fa:	80 e3       	ldi	r24, 0x30	; 48
    11fc:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendData>
    1200:	22 c0       	rjmp	.+68     	; 0x1246 <CLCD_voidSendNum+0x6e>
	}
	else
	{
		while(Copy_u16Num)
		{
			arr[i]=	Copy_u16Num%10 +'0';
    1202:	8a 81       	ldd	r24, Y+2	; 0x02
    1204:	e8 2f       	mov	r30, r24
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	8d 85       	ldd	r24, Y+13	; 0x0d
    120a:	9e 85       	ldd	r25, Y+14	; 0x0e
    120c:	2a e0       	ldi	r18, 0x0A	; 10
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	b9 01       	movw	r22, r18
    1212:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__udivmodhi4>
    1216:	28 2f       	mov	r18, r24
    1218:	20 5d       	subi	r18, 0xD0	; 208
    121a:	ce 01       	movw	r24, r28
    121c:	03 96       	adiw	r24, 0x03	; 3
    121e:	e8 0f       	add	r30, r24
    1220:	f9 1f       	adc	r31, r25
    1222:	20 83       	st	Z, r18
			Copy_u16Num/=10;
    1224:	8d 85       	ldd	r24, Y+13	; 0x0d
    1226:	9e 85       	ldd	r25, Y+14	; 0x0e
    1228:	2a e0       	ldi	r18, 0x0A	; 10
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	b9 01       	movw	r22, r18
    122e:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__udivmodhi4>
    1232:	cb 01       	movw	r24, r22
    1234:	9e 87       	std	Y+14, r25	; 0x0e
    1236:	8d 87       	std	Y+13, r24	; 0x0d
			i++;
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	8f 5f       	subi	r24, 0xFF	; 255
    123c:	8a 83       	std	Y+2, r24	; 0x02
	{
		CLCD_voidSendData('0');
	}
	else
	{
		while(Copy_u16Num)
    123e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1240:	9e 85       	ldd	r25, Y+14	; 0x0e
    1242:	00 97       	sbiw	r24, 0x00	; 0
    1244:	f1 f6       	brne	.-68     	; 0x1202 <CLCD_voidSendNum+0x2a>
			arr[i]=	Copy_u16Num%10 +'0';
			Copy_u16Num/=10;
			i++;
		}
	}
	for(j=i;j>0;j--)
    1246:	8a 81       	ldd	r24, Y+2	; 0x02
    1248:	89 83       	std	Y+1, r24	; 0x01
    124a:	11 c0       	rjmp	.+34     	; 0x126e <CLCD_voidSendNum+0x96>
	{
		CLCD_voidSendData(arr[j-1]);
    124c:	89 81       	ldd	r24, Y+1	; 0x01
    124e:	88 2f       	mov	r24, r24
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	9c 01       	movw	r18, r24
    1254:	21 50       	subi	r18, 0x01	; 1
    1256:	30 40       	sbci	r19, 0x00	; 0
    1258:	ce 01       	movw	r24, r28
    125a:	03 96       	adiw	r24, 0x03	; 3
    125c:	fc 01       	movw	r30, r24
    125e:	e2 0f       	add	r30, r18
    1260:	f3 1f       	adc	r31, r19
    1262:	80 81       	ld	r24, Z
    1264:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendData>
			arr[i]=	Copy_u16Num%10 +'0';
			Copy_u16Num/=10;
			i++;
		}
	}
	for(j=i;j>0;j--)
    1268:	89 81       	ldd	r24, Y+1	; 0x01
    126a:	81 50       	subi	r24, 0x01	; 1
    126c:	89 83       	std	Y+1, r24	; 0x01
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	88 23       	and	r24, r24
    1272:	61 f7       	brne	.-40     	; 0x124c <CLCD_voidSendNum+0x74>
	{
		CLCD_voidSendData(arr[j-1]);
	}
}
    1274:	2e 96       	adiw	r28, 0x0e	; 14
    1276:	0f b6       	in	r0, 0x3f	; 63
    1278:	f8 94       	cli
    127a:	de bf       	out	0x3e, r29	; 62
    127c:	0f be       	out	0x3f, r0	; 63
    127e:	cd bf       	out	0x3d, r28	; 61
    1280:	cf 91       	pop	r28
    1282:	df 91       	pop	r29
    1284:	08 95       	ret

00001286 <CLCD_voidSetPos>:
void CLCD_voidSetPos(u8 Copy_u8X,u8 Copy_u8Y)
{
    1286:	df 93       	push	r29
    1288:	cf 93       	push	r28
    128a:	00 d0       	rcall	.+0      	; 0x128c <CLCD_voidSetPos+0x6>
    128c:	0f 92       	push	r0
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    1292:	8a 83       	std	Y+2, r24	; 0x02
    1294:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Pos ;
	if(Copy_u8X == 0)
    1296:	8a 81       	ldd	r24, Y+2	; 0x02
    1298:	88 23       	and	r24, r24
    129a:	19 f4       	brne	.+6      	; 0x12a2 <CLCD_voidSetPos+0x1c>
	{
		Local_u8Pos =Copy_u8Y;
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	89 83       	std	Y+1, r24	; 0x01
    12a0:	06 c0       	rjmp	.+12     	; 0x12ae <CLCD_voidSetPos+0x28>
	}
	else if(Copy_u8X == 1)
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	81 30       	cpi	r24, 0x01	; 1
    12a6:	19 f4       	brne	.+6      	; 0x12ae <CLCD_voidSetPos+0x28>
	{
		Local_u8Pos =Copy_u8Y +0x40;
    12a8:	8b 81       	ldd	r24, Y+3	; 0x03
    12aa:	80 5c       	subi	r24, 0xC0	; 192
    12ac:	89 83       	std	Y+1, r24	; 0x01
	}
	CLCD_voidSendCommand(Local_u8Pos+128);
    12ae:	89 81       	ldd	r24, Y+1	; 0x01
    12b0:	80 58       	subi	r24, 0x80	; 128
    12b2:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendCommand>
}
    12b6:	0f 90       	pop	r0
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	cf 91       	pop	r28
    12be:	df 91       	pop	r29
    12c0:	08 95       	ret

000012c2 <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8 *Copy_Pattern,
									u8 Copy_u8Loc,
									u8 Copy_u8X,u8 Copy_u8Y)
{
    12c2:	df 93       	push	r29
    12c4:	cf 93       	push	r28
    12c6:	cd b7       	in	r28, 0x3d	; 61
    12c8:	de b7       	in	r29, 0x3e	; 62
    12ca:	27 97       	sbiw	r28, 0x07	; 7
    12cc:	0f b6       	in	r0, 0x3f	; 63
    12ce:	f8 94       	cli
    12d0:	de bf       	out	0x3e, r29	; 62
    12d2:	0f be       	out	0x3f, r0	; 63
    12d4:	cd bf       	out	0x3d, r28	; 61
    12d6:	9c 83       	std	Y+4, r25	; 0x04
    12d8:	8b 83       	std	Y+3, r24	; 0x03
    12da:	6d 83       	std	Y+5, r22	; 0x05
    12dc:	4e 83       	std	Y+6, r20	; 0x06
    12de:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress ,Local_u8Iterator =0;
    12e0:	19 82       	std	Y+1, r1	; 0x01
	//CALCULATE CGRAM ADDRESS
	Local_u8CGRAMAddress = Copy_u8Loc*8;
    12e2:	8d 81       	ldd	r24, Y+5	; 0x05
    12e4:	88 2f       	mov	r24, r24
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	88 0f       	add	r24, r24
    12ea:	99 1f       	adc	r25, r25
    12ec:	88 0f       	add	r24, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	88 0f       	add	r24, r24
    12f2:	99 1f       	adc	r25, r25
    12f4:	8a 83       	std	Y+2, r24	; 0x02
	//SET CGRAM ADDRESS
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	80 5c       	subi	r24, 0xC0	; 192
    12fa:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendCommand>
	//send the Pattern byte by byte
	for(Local_u8Iterator = 0;Local_u8Iterator<8;Local_u8Iterator++)
    12fe:	19 82       	std	Y+1, r1	; 0x01
    1300:	0e c0       	rjmp	.+28     	; 0x131e <CLCD_voidWriteSpecialCharacter+0x5c>
	{
		CLCD_voidSendData(Copy_Pattern[Local_u8Iterator]);
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	28 2f       	mov	r18, r24
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	9c 81       	ldd	r25, Y+4	; 0x04
    130c:	fc 01       	movw	r30, r24
    130e:	e2 0f       	add	r30, r18
    1310:	f3 1f       	adc	r31, r19
    1312:	80 81       	ld	r24, Z
    1314:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendData>
	//CALCULATE CGRAM ADDRESS
	Local_u8CGRAMAddress = Copy_u8Loc*8;
	//SET CGRAM ADDRESS
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);
	//send the Pattern byte by byte
	for(Local_u8Iterator = 0;Local_u8Iterator<8;Local_u8Iterator++)
    1318:	89 81       	ldd	r24, Y+1	; 0x01
    131a:	8f 5f       	subi	r24, 0xFF	; 255
    131c:	89 83       	std	Y+1, r24	; 0x01
    131e:	89 81       	ldd	r24, Y+1	; 0x01
    1320:	88 30       	cpi	r24, 0x08	; 8
    1322:	78 f3       	brcs	.-34     	; 0x1302 <CLCD_voidWriteSpecialCharacter+0x40>
	{
		CLCD_voidSendData(Copy_Pattern[Local_u8Iterator]);

	}
	CLCD_voidSetPos( Copy_u8X, Copy_u8Y);
    1324:	8e 81       	ldd	r24, Y+6	; 0x06
    1326:	6f 81       	ldd	r22, Y+7	; 0x07
    1328:	0e 94 43 09 	call	0x1286	; 0x1286 <CLCD_voidSetPos>
	CLCD_voidSendData(Copy_u8Loc);
    132c:	8d 81       	ldd	r24, Y+5	; 0x05
    132e:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendData>
}
    1332:	27 96       	adiw	r28, 0x07	; 7
    1334:	0f b6       	in	r0, 0x3f	; 63
    1336:	f8 94       	cli
    1338:	de bf       	out	0x3e, r29	; 62
    133a:	0f be       	out	0x3f, r0	; 63
    133c:	cd bf       	out	0x3d, r28	; 61
    133e:	cf 91       	pop	r28
    1340:	df 91       	pop	r29
    1342:	08 95       	ret

00001344 <CLCD_voidSetClear>:
void CLCD_voidSetClear(void)
{
    1344:	df 93       	push	r29
    1346:	cf 93       	push	r28
    1348:	cd b7       	in	r28, 0x3d	; 61
    134a:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSetPos(0,0);
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	60 e0       	ldi	r22, 0x00	; 0
    1350:	0e 94 43 09 	call	0x1286	; 0x1286 <CLCD_voidSetPos>
	CLCD_voidSendString("                         ");
    1354:	80 e6       	ldi	r24, 0x60	; 96
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	0e 94 c3 08 	call	0x1186	; 0x1186 <CLCD_voidSendString>
	CLCD_voidSetPos(1,0);
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	60 e0       	ldi	r22, 0x00	; 0
    1360:	0e 94 43 09 	call	0x1286	; 0x1286 <CLCD_voidSetPos>
	CLCD_voidSendString("                         ");
    1364:	80 e6       	ldi	r24, 0x60	; 96
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	0e 94 c3 08 	call	0x1186	; 0x1186 <CLCD_voidSendString>
	CLCD_voidSetPos(0,0);
    136c:	80 e0       	ldi	r24, 0x00	; 0
    136e:	60 e0       	ldi	r22, 0x00	; 0
    1370:	0e 94 43 09 	call	0x1286	; 0x1286 <CLCD_voidSetPos>

}
    1374:	cf 91       	pop	r28
    1376:	df 91       	pop	r29
    1378:	08 95       	ret

0000137a <DIO_voidSetPortDir>:
#include "DIO_private.h"
#include "DIO_config.h"
#include "DIO_interface.h"

void DIO_voidSetPortDir(u8 Copy_u8Port,u8 Copy_u8Dir)
{
    137a:	df 93       	push	r29
    137c:	cf 93       	push	r28
    137e:	00 d0       	rcall	.+0      	; 0x1380 <DIO_voidSetPortDir+0x6>
    1380:	00 d0       	rcall	.+0      	; 0x1382 <DIO_voidSetPortDir+0x8>
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
    1386:	89 83       	std	Y+1, r24	; 0x01
    1388:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    138a:	89 81       	ldd	r24, Y+1	; 0x01
    138c:	28 2f       	mov	r18, r24
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	3c 83       	std	Y+4, r19	; 0x04
    1392:	2b 83       	std	Y+3, r18	; 0x03
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	9c 81       	ldd	r25, Y+4	; 0x04
    1398:	82 30       	cpi	r24, 0x02	; 2
    139a:	91 05       	cpc	r25, r1
    139c:	d9 f0       	breq	.+54     	; 0x13d4 <DIO_voidSetPortDir+0x5a>
    139e:	2b 81       	ldd	r18, Y+3	; 0x03
    13a0:	3c 81       	ldd	r19, Y+4	; 0x04
    13a2:	23 30       	cpi	r18, 0x03	; 3
    13a4:	31 05       	cpc	r19, r1
    13a6:	34 f4       	brge	.+12     	; 0x13b4 <DIO_voidSetPortDir+0x3a>
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	9c 81       	ldd	r25, Y+4	; 0x04
    13ac:	81 30       	cpi	r24, 0x01	; 1
    13ae:	91 05       	cpc	r25, r1
    13b0:	61 f0       	breq	.+24     	; 0x13ca <DIO_voidSetPortDir+0x50>
    13b2:	1e c0       	rjmp	.+60     	; 0x13f0 <DIO_voidSetPortDir+0x76>
    13b4:	2b 81       	ldd	r18, Y+3	; 0x03
    13b6:	3c 81       	ldd	r19, Y+4	; 0x04
    13b8:	23 30       	cpi	r18, 0x03	; 3
    13ba:	31 05       	cpc	r19, r1
    13bc:	81 f0       	breq	.+32     	; 0x13de <DIO_voidSetPortDir+0x64>
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	9c 81       	ldd	r25, Y+4	; 0x04
    13c2:	84 30       	cpi	r24, 0x04	; 4
    13c4:	91 05       	cpc	r25, r1
    13c6:	81 f0       	breq	.+32     	; 0x13e8 <DIO_voidSetPortDir+0x6e>
    13c8:	13 c0       	rjmp	.+38     	; 0x13f0 <DIO_voidSetPortDir+0x76>
	{
	case PORTA_REG :DDRA=Copy_u8Dir;break;
    13ca:	ea e3       	ldi	r30, 0x3A	; 58
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	8a 81       	ldd	r24, Y+2	; 0x02
    13d0:	80 83       	st	Z, r24
    13d2:	0e c0       	rjmp	.+28     	; 0x13f0 <DIO_voidSetPortDir+0x76>
	case PORTB_REG :DDRB=Copy_u8Dir;break;
    13d4:	e7 e3       	ldi	r30, 0x37	; 55
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	8a 81       	ldd	r24, Y+2	; 0x02
    13da:	80 83       	st	Z, r24
    13dc:	09 c0       	rjmp	.+18     	; 0x13f0 <DIO_voidSetPortDir+0x76>
	case PORTC_REG :DDRC=Copy_u8Dir;break;
    13de:	e4 e3       	ldi	r30, 0x34	; 52
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	8a 81       	ldd	r24, Y+2	; 0x02
    13e4:	80 83       	st	Z, r24
    13e6:	04 c0       	rjmp	.+8      	; 0x13f0 <DIO_voidSetPortDir+0x76>
	case PORTD_REG :DDRD=Copy_u8Dir;break;
    13e8:	e1 e3       	ldi	r30, 0x31	; 49
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	80 83       	st	Z, r24
	}
}
    13f0:	0f 90       	pop	r0
    13f2:	0f 90       	pop	r0
    13f4:	0f 90       	pop	r0
    13f6:	0f 90       	pop	r0
    13f8:	cf 91       	pop	r28
    13fa:	df 91       	pop	r29
    13fc:	08 95       	ret

000013fe <DIO_voidSetPinDir>:
void DIO_voidSetPinDir(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Dir)
{
    13fe:	df 93       	push	r29
    1400:	cf 93       	push	r28
    1402:	cd b7       	in	r28, 0x3d	; 61
    1404:	de b7       	in	r29, 0x3e	; 62
    1406:	27 97       	sbiw	r28, 0x07	; 7
    1408:	0f b6       	in	r0, 0x3f	; 63
    140a:	f8 94       	cli
    140c:	de bf       	out	0x3e, r29	; 62
    140e:	0f be       	out	0x3f, r0	; 63
    1410:	cd bf       	out	0x3d, r28	; 61
    1412:	89 83       	std	Y+1, r24	; 0x01
    1414:	6a 83       	std	Y+2, r22	; 0x02
    1416:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Pin<=7)
    1418:	8a 81       	ldd	r24, Y+2	; 0x02
    141a:	88 30       	cpi	r24, 0x08	; 8
    141c:	08 f0       	brcs	.+2      	; 0x1420 <DIO_voidSetPinDir+0x22>
    141e:	ec c0       	rjmp	.+472    	; 0x15f8 <DIO_voidSetPinDir+0x1fa>
	{
		if(Copy_u8Dir==PIN_DIR_OUT)
    1420:	8b 81       	ldd	r24, Y+3	; 0x03
    1422:	81 30       	cpi	r24, 0x01	; 1
    1424:	09 f0       	breq	.+2      	; 0x1428 <DIO_voidSetPinDir+0x2a>
    1426:	70 c0       	rjmp	.+224    	; 0x1508 <DIO_voidSetPinDir+0x10a>
		{
			switch(Copy_u8Port)
    1428:	89 81       	ldd	r24, Y+1	; 0x01
    142a:	28 2f       	mov	r18, r24
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	3f 83       	std	Y+7, r19	; 0x07
    1430:	2e 83       	std	Y+6, r18	; 0x06
    1432:	8e 81       	ldd	r24, Y+6	; 0x06
    1434:	9f 81       	ldd	r25, Y+7	; 0x07
    1436:	82 30       	cpi	r24, 0x02	; 2
    1438:	91 05       	cpc	r25, r1
    143a:	51 f1       	breq	.+84     	; 0x1490 <DIO_voidSetPinDir+0x92>
    143c:	2e 81       	ldd	r18, Y+6	; 0x06
    143e:	3f 81       	ldd	r19, Y+7	; 0x07
    1440:	23 30       	cpi	r18, 0x03	; 3
    1442:	31 05       	cpc	r19, r1
    1444:	34 f4       	brge	.+12     	; 0x1452 <DIO_voidSetPinDir+0x54>
    1446:	8e 81       	ldd	r24, Y+6	; 0x06
    1448:	9f 81       	ldd	r25, Y+7	; 0x07
    144a:	81 30       	cpi	r24, 0x01	; 1
    144c:	91 05       	cpc	r25, r1
    144e:	61 f0       	breq	.+24     	; 0x1468 <DIO_voidSetPinDir+0x6a>
    1450:	d3 c0       	rjmp	.+422    	; 0x15f8 <DIO_voidSetPinDir+0x1fa>
    1452:	2e 81       	ldd	r18, Y+6	; 0x06
    1454:	3f 81       	ldd	r19, Y+7	; 0x07
    1456:	23 30       	cpi	r18, 0x03	; 3
    1458:	31 05       	cpc	r19, r1
    145a:	71 f1       	breq	.+92     	; 0x14b8 <DIO_voidSetPinDir+0xba>
    145c:	8e 81       	ldd	r24, Y+6	; 0x06
    145e:	9f 81       	ldd	r25, Y+7	; 0x07
    1460:	84 30       	cpi	r24, 0x04	; 4
    1462:	91 05       	cpc	r25, r1
    1464:	e9 f1       	breq	.+122    	; 0x14e0 <DIO_voidSetPinDir+0xe2>
    1466:	c8 c0       	rjmp	.+400    	; 0x15f8 <DIO_voidSetPinDir+0x1fa>
			{
			case PORTA_REG :SET_BIT(DDRA,Copy_u8Pin);break;
    1468:	aa e3       	ldi	r26, 0x3A	; 58
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	ea e3       	ldi	r30, 0x3A	; 58
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	48 2f       	mov	r20, r24
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	28 2f       	mov	r18, r24
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	02 2e       	mov	r0, r18
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <DIO_voidSetPinDir+0x88>
    1482:	88 0f       	add	r24, r24
    1484:	99 1f       	adc	r25, r25
    1486:	0a 94       	dec	r0
    1488:	e2 f7       	brpl	.-8      	; 0x1482 <DIO_voidSetPinDir+0x84>
    148a:	84 2b       	or	r24, r20
    148c:	8c 93       	st	X, r24
    148e:	b4 c0       	rjmp	.+360    	; 0x15f8 <DIO_voidSetPinDir+0x1fa>
			case PORTB_REG :SET_BIT(DDRB,Copy_u8Pin);break;
    1490:	a7 e3       	ldi	r26, 0x37	; 55
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	e7 e3       	ldi	r30, 0x37	; 55
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	48 2f       	mov	r20, r24
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	02 2e       	mov	r0, r18
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <DIO_voidSetPinDir+0xb0>
    14aa:	88 0f       	add	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	0a 94       	dec	r0
    14b0:	e2 f7       	brpl	.-8      	; 0x14aa <DIO_voidSetPinDir+0xac>
    14b2:	84 2b       	or	r24, r20
    14b4:	8c 93       	st	X, r24
    14b6:	a0 c0       	rjmp	.+320    	; 0x15f8 <DIO_voidSetPinDir+0x1fa>
			case PORTC_REG :SET_BIT(DDRC,Copy_u8Pin);break;
    14b8:	a4 e3       	ldi	r26, 0x34	; 52
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	e4 e3       	ldi	r30, 0x34	; 52
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	48 2f       	mov	r20, r24
    14c4:	8a 81       	ldd	r24, Y+2	; 0x02
    14c6:	28 2f       	mov	r18, r24
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	02 2e       	mov	r0, r18
    14d0:	02 c0       	rjmp	.+4      	; 0x14d6 <DIO_voidSetPinDir+0xd8>
    14d2:	88 0f       	add	r24, r24
    14d4:	99 1f       	adc	r25, r25
    14d6:	0a 94       	dec	r0
    14d8:	e2 f7       	brpl	.-8      	; 0x14d2 <DIO_voidSetPinDir+0xd4>
    14da:	84 2b       	or	r24, r20
    14dc:	8c 93       	st	X, r24
    14de:	8c c0       	rjmp	.+280    	; 0x15f8 <DIO_voidSetPinDir+0x1fa>
			case PORTD_REG :SET_BIT(DDRD,Copy_u8Pin);break;
    14e0:	a1 e3       	ldi	r26, 0x31	; 49
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	e1 e3       	ldi	r30, 0x31	; 49
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	48 2f       	mov	r20, r24
    14ec:	8a 81       	ldd	r24, Y+2	; 0x02
    14ee:	28 2f       	mov	r18, r24
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	02 2e       	mov	r0, r18
    14f8:	02 c0       	rjmp	.+4      	; 0x14fe <DIO_voidSetPinDir+0x100>
    14fa:	88 0f       	add	r24, r24
    14fc:	99 1f       	adc	r25, r25
    14fe:	0a 94       	dec	r0
    1500:	e2 f7       	brpl	.-8      	; 0x14fa <DIO_voidSetPinDir+0xfc>
    1502:	84 2b       	or	r24, r20
    1504:	8c 93       	st	X, r24
    1506:	78 c0       	rjmp	.+240    	; 0x15f8 <DIO_voidSetPinDir+0x1fa>
			}
		}
		else if(Copy_u8Dir==PIN_DIR_IN)
    1508:	8b 81       	ldd	r24, Y+3	; 0x03
    150a:	88 23       	and	r24, r24
    150c:	09 f0       	breq	.+2      	; 0x1510 <DIO_voidSetPinDir+0x112>
    150e:	74 c0       	rjmp	.+232    	; 0x15f8 <DIO_voidSetPinDir+0x1fa>
		{
			switch(Copy_u8Port)
    1510:	89 81       	ldd	r24, Y+1	; 0x01
    1512:	28 2f       	mov	r18, r24
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	3d 83       	std	Y+5, r19	; 0x05
    1518:	2c 83       	std	Y+4, r18	; 0x04
    151a:	8c 81       	ldd	r24, Y+4	; 0x04
    151c:	9d 81       	ldd	r25, Y+5	; 0x05
    151e:	82 30       	cpi	r24, 0x02	; 2
    1520:	91 05       	cpc	r25, r1
    1522:	61 f1       	breq	.+88     	; 0x157c <DIO_voidSetPinDir+0x17e>
    1524:	2c 81       	ldd	r18, Y+4	; 0x04
    1526:	3d 81       	ldd	r19, Y+5	; 0x05
    1528:	23 30       	cpi	r18, 0x03	; 3
    152a:	31 05       	cpc	r19, r1
    152c:	34 f4       	brge	.+12     	; 0x153a <DIO_voidSetPinDir+0x13c>
    152e:	8c 81       	ldd	r24, Y+4	; 0x04
    1530:	9d 81       	ldd	r25, Y+5	; 0x05
    1532:	81 30       	cpi	r24, 0x01	; 1
    1534:	91 05       	cpc	r25, r1
    1536:	69 f0       	breq	.+26     	; 0x1552 <DIO_voidSetPinDir+0x154>
    1538:	5f c0       	rjmp	.+190    	; 0x15f8 <DIO_voidSetPinDir+0x1fa>
    153a:	2c 81       	ldd	r18, Y+4	; 0x04
    153c:	3d 81       	ldd	r19, Y+5	; 0x05
    153e:	23 30       	cpi	r18, 0x03	; 3
    1540:	31 05       	cpc	r19, r1
    1542:	89 f1       	breq	.+98     	; 0x15a6 <DIO_voidSetPinDir+0x1a8>
    1544:	8c 81       	ldd	r24, Y+4	; 0x04
    1546:	9d 81       	ldd	r25, Y+5	; 0x05
    1548:	84 30       	cpi	r24, 0x04	; 4
    154a:	91 05       	cpc	r25, r1
    154c:	09 f4       	brne	.+2      	; 0x1550 <DIO_voidSetPinDir+0x152>
    154e:	40 c0       	rjmp	.+128    	; 0x15d0 <DIO_voidSetPinDir+0x1d2>
    1550:	53 c0       	rjmp	.+166    	; 0x15f8 <DIO_voidSetPinDir+0x1fa>
			{
			case PORTA_REG :CLR_BIT(DDRA,Copy_u8Pin);break;
    1552:	aa e3       	ldi	r26, 0x3A	; 58
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	ea e3       	ldi	r30, 0x3A	; 58
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	48 2f       	mov	r20, r24
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	28 2f       	mov	r18, r24
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	02 2e       	mov	r0, r18
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <DIO_voidSetPinDir+0x172>
    156c:	88 0f       	add	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	0a 94       	dec	r0
    1572:	e2 f7       	brpl	.-8      	; 0x156c <DIO_voidSetPinDir+0x16e>
    1574:	80 95       	com	r24
    1576:	84 23       	and	r24, r20
    1578:	8c 93       	st	X, r24
    157a:	3e c0       	rjmp	.+124    	; 0x15f8 <DIO_voidSetPinDir+0x1fa>
			case PORTB_REG :CLR_BIT(DDRB,Copy_u8Pin);break;
    157c:	a7 e3       	ldi	r26, 0x37	; 55
    157e:	b0 e0       	ldi	r27, 0x00	; 0
    1580:	e7 e3       	ldi	r30, 0x37	; 55
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	48 2f       	mov	r20, r24
    1588:	8a 81       	ldd	r24, Y+2	; 0x02
    158a:	28 2f       	mov	r18, r24
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	02 2e       	mov	r0, r18
    1594:	02 c0       	rjmp	.+4      	; 0x159a <DIO_voidSetPinDir+0x19c>
    1596:	88 0f       	add	r24, r24
    1598:	99 1f       	adc	r25, r25
    159a:	0a 94       	dec	r0
    159c:	e2 f7       	brpl	.-8      	; 0x1596 <DIO_voidSetPinDir+0x198>
    159e:	80 95       	com	r24
    15a0:	84 23       	and	r24, r20
    15a2:	8c 93       	st	X, r24
    15a4:	29 c0       	rjmp	.+82     	; 0x15f8 <DIO_voidSetPinDir+0x1fa>
			case PORTC_REG :CLR_BIT(DDRC,Copy_u8Pin);break;
    15a6:	a4 e3       	ldi	r26, 0x34	; 52
    15a8:	b0 e0       	ldi	r27, 0x00	; 0
    15aa:	e4 e3       	ldi	r30, 0x34	; 52
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	80 81       	ld	r24, Z
    15b0:	48 2f       	mov	r20, r24
    15b2:	8a 81       	ldd	r24, Y+2	; 0x02
    15b4:	28 2f       	mov	r18, r24
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	02 2e       	mov	r0, r18
    15be:	02 c0       	rjmp	.+4      	; 0x15c4 <DIO_voidSetPinDir+0x1c6>
    15c0:	88 0f       	add	r24, r24
    15c2:	99 1f       	adc	r25, r25
    15c4:	0a 94       	dec	r0
    15c6:	e2 f7       	brpl	.-8      	; 0x15c0 <DIO_voidSetPinDir+0x1c2>
    15c8:	80 95       	com	r24
    15ca:	84 23       	and	r24, r20
    15cc:	8c 93       	st	X, r24
    15ce:	14 c0       	rjmp	.+40     	; 0x15f8 <DIO_voidSetPinDir+0x1fa>
			case PORTD_REG :CLR_BIT(DDRD,Copy_u8Pin);break;
    15d0:	a1 e3       	ldi	r26, 0x31	; 49
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	e1 e3       	ldi	r30, 0x31	; 49
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	48 2f       	mov	r20, r24
    15dc:	8a 81       	ldd	r24, Y+2	; 0x02
    15de:	28 2f       	mov	r18, r24
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	02 2e       	mov	r0, r18
    15e8:	02 c0       	rjmp	.+4      	; 0x15ee <DIO_voidSetPinDir+0x1f0>
    15ea:	88 0f       	add	r24, r24
    15ec:	99 1f       	adc	r25, r25
    15ee:	0a 94       	dec	r0
    15f0:	e2 f7       	brpl	.-8      	; 0x15ea <DIO_voidSetPinDir+0x1ec>
    15f2:	80 95       	com	r24
    15f4:	84 23       	and	r24, r20
    15f6:	8c 93       	st	X, r24
			}
		}
	}
}
    15f8:	27 96       	adiw	r28, 0x07	; 7
    15fa:	0f b6       	in	r0, 0x3f	; 63
    15fc:	f8 94       	cli
    15fe:	de bf       	out	0x3e, r29	; 62
    1600:	0f be       	out	0x3f, r0	; 63
    1602:	cd bf       	out	0x3d, r28	; 61
    1604:	cf 91       	pop	r28
    1606:	df 91       	pop	r29
    1608:	08 95       	ret

0000160a <DIO_voidSetPortVal>:
void DIO_voidSetPortVal(u8 Copy_u8Port,u8 Copy_u8Val)
{
    160a:	df 93       	push	r29
    160c:	cf 93       	push	r28
    160e:	00 d0       	rcall	.+0      	; 0x1610 <DIO_voidSetPortVal+0x6>
    1610:	00 d0       	rcall	.+0      	; 0x1612 <DIO_voidSetPortVal+0x8>
    1612:	cd b7       	in	r28, 0x3d	; 61
    1614:	de b7       	in	r29, 0x3e	; 62
    1616:	89 83       	std	Y+1, r24	; 0x01
    1618:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    161a:	89 81       	ldd	r24, Y+1	; 0x01
    161c:	28 2f       	mov	r18, r24
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	3c 83       	std	Y+4, r19	; 0x04
    1622:	2b 83       	std	Y+3, r18	; 0x03
    1624:	8b 81       	ldd	r24, Y+3	; 0x03
    1626:	9c 81       	ldd	r25, Y+4	; 0x04
    1628:	82 30       	cpi	r24, 0x02	; 2
    162a:	91 05       	cpc	r25, r1
    162c:	d9 f0       	breq	.+54     	; 0x1664 <DIO_voidSetPortVal+0x5a>
    162e:	2b 81       	ldd	r18, Y+3	; 0x03
    1630:	3c 81       	ldd	r19, Y+4	; 0x04
    1632:	23 30       	cpi	r18, 0x03	; 3
    1634:	31 05       	cpc	r19, r1
    1636:	34 f4       	brge	.+12     	; 0x1644 <DIO_voidSetPortVal+0x3a>
    1638:	8b 81       	ldd	r24, Y+3	; 0x03
    163a:	9c 81       	ldd	r25, Y+4	; 0x04
    163c:	81 30       	cpi	r24, 0x01	; 1
    163e:	91 05       	cpc	r25, r1
    1640:	61 f0       	breq	.+24     	; 0x165a <DIO_voidSetPortVal+0x50>
    1642:	1e c0       	rjmp	.+60     	; 0x1680 <DIO_voidSetPortVal+0x76>
    1644:	2b 81       	ldd	r18, Y+3	; 0x03
    1646:	3c 81       	ldd	r19, Y+4	; 0x04
    1648:	23 30       	cpi	r18, 0x03	; 3
    164a:	31 05       	cpc	r19, r1
    164c:	81 f0       	breq	.+32     	; 0x166e <DIO_voidSetPortVal+0x64>
    164e:	8b 81       	ldd	r24, Y+3	; 0x03
    1650:	9c 81       	ldd	r25, Y+4	; 0x04
    1652:	84 30       	cpi	r24, 0x04	; 4
    1654:	91 05       	cpc	r25, r1
    1656:	81 f0       	breq	.+32     	; 0x1678 <DIO_voidSetPortVal+0x6e>
    1658:	13 c0       	rjmp	.+38     	; 0x1680 <DIO_voidSetPortVal+0x76>
	{
	case PORTA_REG :PORTA=Copy_u8Val;break;
    165a:	eb e3       	ldi	r30, 0x3B	; 59
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	8a 81       	ldd	r24, Y+2	; 0x02
    1660:	80 83       	st	Z, r24
    1662:	0e c0       	rjmp	.+28     	; 0x1680 <DIO_voidSetPortVal+0x76>
	case PORTB_REG :PORTB=Copy_u8Val;break;
    1664:	e8 e3       	ldi	r30, 0x38	; 56
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	8a 81       	ldd	r24, Y+2	; 0x02
    166a:	80 83       	st	Z, r24
    166c:	09 c0       	rjmp	.+18     	; 0x1680 <DIO_voidSetPortVal+0x76>
	case PORTC_REG :PORTC=Copy_u8Val;break;
    166e:	e5 e3       	ldi	r30, 0x35	; 53
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	8a 81       	ldd	r24, Y+2	; 0x02
    1674:	80 83       	st	Z, r24
    1676:	04 c0       	rjmp	.+8      	; 0x1680 <DIO_voidSetPortVal+0x76>
	case PORTD_REG :PORTD=Copy_u8Val;break;
    1678:	e2 e3       	ldi	r30, 0x32	; 50
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	8a 81       	ldd	r24, Y+2	; 0x02
    167e:	80 83       	st	Z, r24
	}
}
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	0f 90       	pop	r0
    1686:	0f 90       	pop	r0
    1688:	cf 91       	pop	r28
    168a:	df 91       	pop	r29
    168c:	08 95       	ret

0000168e <DIO_voidSetPinVal>:
void DIO_voidSetPinVal(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Val)
{
    168e:	df 93       	push	r29
    1690:	cf 93       	push	r28
    1692:	cd b7       	in	r28, 0x3d	; 61
    1694:	de b7       	in	r29, 0x3e	; 62
    1696:	27 97       	sbiw	r28, 0x07	; 7
    1698:	0f b6       	in	r0, 0x3f	; 63
    169a:	f8 94       	cli
    169c:	de bf       	out	0x3e, r29	; 62
    169e:	0f be       	out	0x3f, r0	; 63
    16a0:	cd bf       	out	0x3d, r28	; 61
    16a2:	89 83       	std	Y+1, r24	; 0x01
    16a4:	6a 83       	std	Y+2, r22	; 0x02
    16a6:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Pin<=7)
    16a8:	8a 81       	ldd	r24, Y+2	; 0x02
    16aa:	88 30       	cpi	r24, 0x08	; 8
    16ac:	08 f0       	brcs	.+2      	; 0x16b0 <DIO_voidSetPinVal+0x22>
    16ae:	ec c0       	rjmp	.+472    	; 0x1888 <DIO_voidSetPinVal+0x1fa>
	{
		if(Copy_u8Val==PIN_VAL_HIGH)
    16b0:	8b 81       	ldd	r24, Y+3	; 0x03
    16b2:	81 30       	cpi	r24, 0x01	; 1
    16b4:	09 f0       	breq	.+2      	; 0x16b8 <DIO_voidSetPinVal+0x2a>
    16b6:	70 c0       	rjmp	.+224    	; 0x1798 <DIO_voidSetPinVal+0x10a>
		{
			switch(Copy_u8Port)
    16b8:	89 81       	ldd	r24, Y+1	; 0x01
    16ba:	28 2f       	mov	r18, r24
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	3f 83       	std	Y+7, r19	; 0x07
    16c0:	2e 83       	std	Y+6, r18	; 0x06
    16c2:	8e 81       	ldd	r24, Y+6	; 0x06
    16c4:	9f 81       	ldd	r25, Y+7	; 0x07
    16c6:	82 30       	cpi	r24, 0x02	; 2
    16c8:	91 05       	cpc	r25, r1
    16ca:	51 f1       	breq	.+84     	; 0x1720 <DIO_voidSetPinVal+0x92>
    16cc:	2e 81       	ldd	r18, Y+6	; 0x06
    16ce:	3f 81       	ldd	r19, Y+7	; 0x07
    16d0:	23 30       	cpi	r18, 0x03	; 3
    16d2:	31 05       	cpc	r19, r1
    16d4:	34 f4       	brge	.+12     	; 0x16e2 <DIO_voidSetPinVal+0x54>
    16d6:	8e 81       	ldd	r24, Y+6	; 0x06
    16d8:	9f 81       	ldd	r25, Y+7	; 0x07
    16da:	81 30       	cpi	r24, 0x01	; 1
    16dc:	91 05       	cpc	r25, r1
    16de:	61 f0       	breq	.+24     	; 0x16f8 <DIO_voidSetPinVal+0x6a>
    16e0:	d3 c0       	rjmp	.+422    	; 0x1888 <DIO_voidSetPinVal+0x1fa>
    16e2:	2e 81       	ldd	r18, Y+6	; 0x06
    16e4:	3f 81       	ldd	r19, Y+7	; 0x07
    16e6:	23 30       	cpi	r18, 0x03	; 3
    16e8:	31 05       	cpc	r19, r1
    16ea:	71 f1       	breq	.+92     	; 0x1748 <DIO_voidSetPinVal+0xba>
    16ec:	8e 81       	ldd	r24, Y+6	; 0x06
    16ee:	9f 81       	ldd	r25, Y+7	; 0x07
    16f0:	84 30       	cpi	r24, 0x04	; 4
    16f2:	91 05       	cpc	r25, r1
    16f4:	e9 f1       	breq	.+122    	; 0x1770 <DIO_voidSetPinVal+0xe2>
    16f6:	c8 c0       	rjmp	.+400    	; 0x1888 <DIO_voidSetPinVal+0x1fa>
			{
			case PORTA_REG :SET_BIT(PORTA,Copy_u8Pin);break;
    16f8:	ab e3       	ldi	r26, 0x3B	; 59
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	eb e3       	ldi	r30, 0x3B	; 59
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	48 2f       	mov	r20, r24
    1704:	8a 81       	ldd	r24, Y+2	; 0x02
    1706:	28 2f       	mov	r18, r24
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	02 2e       	mov	r0, r18
    1710:	02 c0       	rjmp	.+4      	; 0x1716 <DIO_voidSetPinVal+0x88>
    1712:	88 0f       	add	r24, r24
    1714:	99 1f       	adc	r25, r25
    1716:	0a 94       	dec	r0
    1718:	e2 f7       	brpl	.-8      	; 0x1712 <DIO_voidSetPinVal+0x84>
    171a:	84 2b       	or	r24, r20
    171c:	8c 93       	st	X, r24
    171e:	b4 c0       	rjmp	.+360    	; 0x1888 <DIO_voidSetPinVal+0x1fa>
			case PORTB_REG :SET_BIT(PORTB,Copy_u8Pin);break;
    1720:	a8 e3       	ldi	r26, 0x38	; 56
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	e8 e3       	ldi	r30, 0x38	; 56
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	48 2f       	mov	r20, r24
    172c:	8a 81       	ldd	r24, Y+2	; 0x02
    172e:	28 2f       	mov	r18, r24
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	02 2e       	mov	r0, r18
    1738:	02 c0       	rjmp	.+4      	; 0x173e <DIO_voidSetPinVal+0xb0>
    173a:	88 0f       	add	r24, r24
    173c:	99 1f       	adc	r25, r25
    173e:	0a 94       	dec	r0
    1740:	e2 f7       	brpl	.-8      	; 0x173a <DIO_voidSetPinVal+0xac>
    1742:	84 2b       	or	r24, r20
    1744:	8c 93       	st	X, r24
    1746:	a0 c0       	rjmp	.+320    	; 0x1888 <DIO_voidSetPinVal+0x1fa>
			case PORTC_REG :SET_BIT(PORTC,Copy_u8Pin);break;
    1748:	a5 e3       	ldi	r26, 0x35	; 53
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	e5 e3       	ldi	r30, 0x35	; 53
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	48 2f       	mov	r20, r24
    1754:	8a 81       	ldd	r24, Y+2	; 0x02
    1756:	28 2f       	mov	r18, r24
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	02 2e       	mov	r0, r18
    1760:	02 c0       	rjmp	.+4      	; 0x1766 <DIO_voidSetPinVal+0xd8>
    1762:	88 0f       	add	r24, r24
    1764:	99 1f       	adc	r25, r25
    1766:	0a 94       	dec	r0
    1768:	e2 f7       	brpl	.-8      	; 0x1762 <DIO_voidSetPinVal+0xd4>
    176a:	84 2b       	or	r24, r20
    176c:	8c 93       	st	X, r24
    176e:	8c c0       	rjmp	.+280    	; 0x1888 <DIO_voidSetPinVal+0x1fa>
			case PORTD_REG :SET_BIT(PORTD,Copy_u8Pin);break;
    1770:	a2 e3       	ldi	r26, 0x32	; 50
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	e2 e3       	ldi	r30, 0x32	; 50
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	48 2f       	mov	r20, r24
    177c:	8a 81       	ldd	r24, Y+2	; 0x02
    177e:	28 2f       	mov	r18, r24
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	02 2e       	mov	r0, r18
    1788:	02 c0       	rjmp	.+4      	; 0x178e <DIO_voidSetPinVal+0x100>
    178a:	88 0f       	add	r24, r24
    178c:	99 1f       	adc	r25, r25
    178e:	0a 94       	dec	r0
    1790:	e2 f7       	brpl	.-8      	; 0x178a <DIO_voidSetPinVal+0xfc>
    1792:	84 2b       	or	r24, r20
    1794:	8c 93       	st	X, r24
    1796:	78 c0       	rjmp	.+240    	; 0x1888 <DIO_voidSetPinVal+0x1fa>
			}
		}
		else if(Copy_u8Val==PIN_VAL_LOW)
    1798:	8b 81       	ldd	r24, Y+3	; 0x03
    179a:	88 23       	and	r24, r24
    179c:	09 f0       	breq	.+2      	; 0x17a0 <DIO_voidSetPinVal+0x112>
    179e:	74 c0       	rjmp	.+232    	; 0x1888 <DIO_voidSetPinVal+0x1fa>
		{
			switch(Copy_u8Port)
    17a0:	89 81       	ldd	r24, Y+1	; 0x01
    17a2:	28 2f       	mov	r18, r24
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	3d 83       	std	Y+5, r19	; 0x05
    17a8:	2c 83       	std	Y+4, r18	; 0x04
    17aa:	8c 81       	ldd	r24, Y+4	; 0x04
    17ac:	9d 81       	ldd	r25, Y+5	; 0x05
    17ae:	82 30       	cpi	r24, 0x02	; 2
    17b0:	91 05       	cpc	r25, r1
    17b2:	61 f1       	breq	.+88     	; 0x180c <DIO_voidSetPinVal+0x17e>
    17b4:	2c 81       	ldd	r18, Y+4	; 0x04
    17b6:	3d 81       	ldd	r19, Y+5	; 0x05
    17b8:	23 30       	cpi	r18, 0x03	; 3
    17ba:	31 05       	cpc	r19, r1
    17bc:	34 f4       	brge	.+12     	; 0x17ca <DIO_voidSetPinVal+0x13c>
    17be:	8c 81       	ldd	r24, Y+4	; 0x04
    17c0:	9d 81       	ldd	r25, Y+5	; 0x05
    17c2:	81 30       	cpi	r24, 0x01	; 1
    17c4:	91 05       	cpc	r25, r1
    17c6:	69 f0       	breq	.+26     	; 0x17e2 <DIO_voidSetPinVal+0x154>
    17c8:	5f c0       	rjmp	.+190    	; 0x1888 <DIO_voidSetPinVal+0x1fa>
    17ca:	2c 81       	ldd	r18, Y+4	; 0x04
    17cc:	3d 81       	ldd	r19, Y+5	; 0x05
    17ce:	23 30       	cpi	r18, 0x03	; 3
    17d0:	31 05       	cpc	r19, r1
    17d2:	89 f1       	breq	.+98     	; 0x1836 <DIO_voidSetPinVal+0x1a8>
    17d4:	8c 81       	ldd	r24, Y+4	; 0x04
    17d6:	9d 81       	ldd	r25, Y+5	; 0x05
    17d8:	84 30       	cpi	r24, 0x04	; 4
    17da:	91 05       	cpc	r25, r1
    17dc:	09 f4       	brne	.+2      	; 0x17e0 <DIO_voidSetPinVal+0x152>
    17de:	40 c0       	rjmp	.+128    	; 0x1860 <DIO_voidSetPinVal+0x1d2>
    17e0:	53 c0       	rjmp	.+166    	; 0x1888 <DIO_voidSetPinVal+0x1fa>
			{
			case PORTA_REG :CLR_BIT(PORTA,Copy_u8Pin);break;
    17e2:	ab e3       	ldi	r26, 0x3B	; 59
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	eb e3       	ldi	r30, 0x3B	; 59
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	48 2f       	mov	r20, r24
    17ee:	8a 81       	ldd	r24, Y+2	; 0x02
    17f0:	28 2f       	mov	r18, r24
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	02 2e       	mov	r0, r18
    17fa:	02 c0       	rjmp	.+4      	; 0x1800 <DIO_voidSetPinVal+0x172>
    17fc:	88 0f       	add	r24, r24
    17fe:	99 1f       	adc	r25, r25
    1800:	0a 94       	dec	r0
    1802:	e2 f7       	brpl	.-8      	; 0x17fc <DIO_voidSetPinVal+0x16e>
    1804:	80 95       	com	r24
    1806:	84 23       	and	r24, r20
    1808:	8c 93       	st	X, r24
    180a:	3e c0       	rjmp	.+124    	; 0x1888 <DIO_voidSetPinVal+0x1fa>
			case PORTB_REG :CLR_BIT(PORTB,Copy_u8Pin);break;
    180c:	a8 e3       	ldi	r26, 0x38	; 56
    180e:	b0 e0       	ldi	r27, 0x00	; 0
    1810:	e8 e3       	ldi	r30, 0x38	; 56
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	80 81       	ld	r24, Z
    1816:	48 2f       	mov	r20, r24
    1818:	8a 81       	ldd	r24, Y+2	; 0x02
    181a:	28 2f       	mov	r18, r24
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	02 2e       	mov	r0, r18
    1824:	02 c0       	rjmp	.+4      	; 0x182a <DIO_voidSetPinVal+0x19c>
    1826:	88 0f       	add	r24, r24
    1828:	99 1f       	adc	r25, r25
    182a:	0a 94       	dec	r0
    182c:	e2 f7       	brpl	.-8      	; 0x1826 <DIO_voidSetPinVal+0x198>
    182e:	80 95       	com	r24
    1830:	84 23       	and	r24, r20
    1832:	8c 93       	st	X, r24
    1834:	29 c0       	rjmp	.+82     	; 0x1888 <DIO_voidSetPinVal+0x1fa>
			case PORTC_REG :CLR_BIT(PORTC,Copy_u8Pin);break;
    1836:	a5 e3       	ldi	r26, 0x35	; 53
    1838:	b0 e0       	ldi	r27, 0x00	; 0
    183a:	e5 e3       	ldi	r30, 0x35	; 53
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	80 81       	ld	r24, Z
    1840:	48 2f       	mov	r20, r24
    1842:	8a 81       	ldd	r24, Y+2	; 0x02
    1844:	28 2f       	mov	r18, r24
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	02 2e       	mov	r0, r18
    184e:	02 c0       	rjmp	.+4      	; 0x1854 <DIO_voidSetPinVal+0x1c6>
    1850:	88 0f       	add	r24, r24
    1852:	99 1f       	adc	r25, r25
    1854:	0a 94       	dec	r0
    1856:	e2 f7       	brpl	.-8      	; 0x1850 <DIO_voidSetPinVal+0x1c2>
    1858:	80 95       	com	r24
    185a:	84 23       	and	r24, r20
    185c:	8c 93       	st	X, r24
    185e:	14 c0       	rjmp	.+40     	; 0x1888 <DIO_voidSetPinVal+0x1fa>
			case PORTD_REG :CLR_BIT(PORTD,Copy_u8Pin);break;
    1860:	a2 e3       	ldi	r26, 0x32	; 50
    1862:	b0 e0       	ldi	r27, 0x00	; 0
    1864:	e2 e3       	ldi	r30, 0x32	; 50
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	80 81       	ld	r24, Z
    186a:	48 2f       	mov	r20, r24
    186c:	8a 81       	ldd	r24, Y+2	; 0x02
    186e:	28 2f       	mov	r18, r24
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	02 2e       	mov	r0, r18
    1878:	02 c0       	rjmp	.+4      	; 0x187e <DIO_voidSetPinVal+0x1f0>
    187a:	88 0f       	add	r24, r24
    187c:	99 1f       	adc	r25, r25
    187e:	0a 94       	dec	r0
    1880:	e2 f7       	brpl	.-8      	; 0x187a <DIO_voidSetPinVal+0x1ec>
    1882:	80 95       	com	r24
    1884:	84 23       	and	r24, r20
    1886:	8c 93       	st	X, r24
			}
		}
	}
}
    1888:	27 96       	adiw	r28, 0x07	; 7
    188a:	0f b6       	in	r0, 0x3f	; 63
    188c:	f8 94       	cli
    188e:	de bf       	out	0x3e, r29	; 62
    1890:	0f be       	out	0x3f, r0	; 63
    1892:	cd bf       	out	0x3d, r28	; 61
    1894:	cf 91       	pop	r28
    1896:	df 91       	pop	r29
    1898:	08 95       	ret

0000189a <DIO_u8GetPinVal>:
u8 DIO_u8GetPinVal(u8 Copy_u8Port,u8 Copy_u8Pin)
{
    189a:	df 93       	push	r29
    189c:	cf 93       	push	r28
    189e:	00 d0       	rcall	.+0      	; 0x18a0 <DIO_u8GetPinVal+0x6>
    18a0:	00 d0       	rcall	.+0      	; 0x18a2 <DIO_u8GetPinVal+0x8>
    18a2:	0f 92       	push	r0
    18a4:	cd b7       	in	r28, 0x3d	; 61
    18a6:	de b7       	in	r29, 0x3e	; 62
    18a8:	8a 83       	std	Y+2, r24	; 0x02
    18aa:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Reading=0;
    18ac:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=7)
    18ae:	8b 81       	ldd	r24, Y+3	; 0x03
    18b0:	88 30       	cpi	r24, 0x08	; 8
    18b2:	08 f0       	brcs	.+2      	; 0x18b6 <DIO_u8GetPinVal+0x1c>
    18b4:	67 c0       	rjmp	.+206    	; 0x1984 <DIO_u8GetPinVal+0xea>
	{
		switch(Copy_u8Port)
    18b6:	8a 81       	ldd	r24, Y+2	; 0x02
    18b8:	28 2f       	mov	r18, r24
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	3d 83       	std	Y+5, r19	; 0x05
    18be:	2c 83       	std	Y+4, r18	; 0x04
    18c0:	4c 81       	ldd	r20, Y+4	; 0x04
    18c2:	5d 81       	ldd	r21, Y+5	; 0x05
    18c4:	42 30       	cpi	r20, 0x02	; 2
    18c6:	51 05       	cpc	r21, r1
    18c8:	41 f1       	breq	.+80     	; 0x191a <DIO_u8GetPinVal+0x80>
    18ca:	8c 81       	ldd	r24, Y+4	; 0x04
    18cc:	9d 81       	ldd	r25, Y+5	; 0x05
    18ce:	83 30       	cpi	r24, 0x03	; 3
    18d0:	91 05       	cpc	r25, r1
    18d2:	34 f4       	brge	.+12     	; 0x18e0 <DIO_u8GetPinVal+0x46>
    18d4:	2c 81       	ldd	r18, Y+4	; 0x04
    18d6:	3d 81       	ldd	r19, Y+5	; 0x05
    18d8:	21 30       	cpi	r18, 0x01	; 1
    18da:	31 05       	cpc	r19, r1
    18dc:	61 f0       	breq	.+24     	; 0x18f6 <DIO_u8GetPinVal+0x5c>
    18de:	52 c0       	rjmp	.+164    	; 0x1984 <DIO_u8GetPinVal+0xea>
    18e0:	4c 81       	ldd	r20, Y+4	; 0x04
    18e2:	5d 81       	ldd	r21, Y+5	; 0x05
    18e4:	43 30       	cpi	r20, 0x03	; 3
    18e6:	51 05       	cpc	r21, r1
    18e8:	51 f1       	breq	.+84     	; 0x193e <DIO_u8GetPinVal+0xa4>
    18ea:	8c 81       	ldd	r24, Y+4	; 0x04
    18ec:	9d 81       	ldd	r25, Y+5	; 0x05
    18ee:	84 30       	cpi	r24, 0x04	; 4
    18f0:	91 05       	cpc	r25, r1
    18f2:	b9 f1       	breq	.+110    	; 0x1962 <DIO_u8GetPinVal+0xc8>
    18f4:	47 c0       	rjmp	.+142    	; 0x1984 <DIO_u8GetPinVal+0xea>
		{
		case PORTA_REG:Local_u8Reading=GET_BIT(PINA,Copy_u8Pin);break;
    18f6:	e9 e3       	ldi	r30, 0x39	; 57
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	80 81       	ld	r24, Z
    18fc:	28 2f       	mov	r18, r24
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	8b 81       	ldd	r24, Y+3	; 0x03
    1902:	88 2f       	mov	r24, r24
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	a9 01       	movw	r20, r18
    1908:	02 c0       	rjmp	.+4      	; 0x190e <DIO_u8GetPinVal+0x74>
    190a:	55 95       	asr	r21
    190c:	47 95       	ror	r20
    190e:	8a 95       	dec	r24
    1910:	e2 f7       	brpl	.-8      	; 0x190a <DIO_u8GetPinVal+0x70>
    1912:	ca 01       	movw	r24, r20
    1914:	81 70       	andi	r24, 0x01	; 1
    1916:	89 83       	std	Y+1, r24	; 0x01
    1918:	35 c0       	rjmp	.+106    	; 0x1984 <DIO_u8GetPinVal+0xea>
		case PORTB_REG:Local_u8Reading=GET_BIT(PINB,Copy_u8Pin);break;
    191a:	e6 e3       	ldi	r30, 0x36	; 54
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	80 81       	ld	r24, Z
    1920:	28 2f       	mov	r18, r24
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	8b 81       	ldd	r24, Y+3	; 0x03
    1926:	88 2f       	mov	r24, r24
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	a9 01       	movw	r20, r18
    192c:	02 c0       	rjmp	.+4      	; 0x1932 <DIO_u8GetPinVal+0x98>
    192e:	55 95       	asr	r21
    1930:	47 95       	ror	r20
    1932:	8a 95       	dec	r24
    1934:	e2 f7       	brpl	.-8      	; 0x192e <DIO_u8GetPinVal+0x94>
    1936:	ca 01       	movw	r24, r20
    1938:	81 70       	andi	r24, 0x01	; 1
    193a:	89 83       	std	Y+1, r24	; 0x01
    193c:	23 c0       	rjmp	.+70     	; 0x1984 <DIO_u8GetPinVal+0xea>
		case PORTC_REG:Local_u8Reading=GET_BIT(PINC,Copy_u8Pin);break;
    193e:	e3 e3       	ldi	r30, 0x33	; 51
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	80 81       	ld	r24, Z
    1944:	28 2f       	mov	r18, r24
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	8b 81       	ldd	r24, Y+3	; 0x03
    194a:	88 2f       	mov	r24, r24
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	a9 01       	movw	r20, r18
    1950:	02 c0       	rjmp	.+4      	; 0x1956 <DIO_u8GetPinVal+0xbc>
    1952:	55 95       	asr	r21
    1954:	47 95       	ror	r20
    1956:	8a 95       	dec	r24
    1958:	e2 f7       	brpl	.-8      	; 0x1952 <DIO_u8GetPinVal+0xb8>
    195a:	ca 01       	movw	r24, r20
    195c:	81 70       	andi	r24, 0x01	; 1
    195e:	89 83       	std	Y+1, r24	; 0x01
    1960:	11 c0       	rjmp	.+34     	; 0x1984 <DIO_u8GetPinVal+0xea>
		case PORTD_REG:Local_u8Reading=GET_BIT(PIND,Copy_u8Pin);break;
    1962:	e0 e3       	ldi	r30, 0x30	; 48
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	28 2f       	mov	r18, r24
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	8b 81       	ldd	r24, Y+3	; 0x03
    196e:	88 2f       	mov	r24, r24
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	a9 01       	movw	r20, r18
    1974:	02 c0       	rjmp	.+4      	; 0x197a <DIO_u8GetPinVal+0xe0>
    1976:	55 95       	asr	r21
    1978:	47 95       	ror	r20
    197a:	8a 95       	dec	r24
    197c:	e2 f7       	brpl	.-8      	; 0x1976 <DIO_u8GetPinVal+0xdc>
    197e:	ca 01       	movw	r24, r20
    1980:	81 70       	andi	r24, 0x01	; 1
    1982:	89 83       	std	Y+1, r24	; 0x01
		}
	}
		return Local_u8Reading;
    1984:	89 81       	ldd	r24, Y+1	; 0x01
	}
    1986:	0f 90       	pop	r0
    1988:	0f 90       	pop	r0
    198a:	0f 90       	pop	r0
    198c:	0f 90       	pop	r0
    198e:	0f 90       	pop	r0
    1990:	cf 91       	pop	r28
    1992:	df 91       	pop	r29
    1994:	08 95       	ret

00001996 <SPI_voidInitMstr>:
#include "SPI_private.h"
#include "SPI_interface.h"


void SPI_voidInitMstr(void)
{
    1996:	df 93       	push	r29
    1998:	cf 93       	push	r28
    199a:	cd b7       	in	r28, 0x3d	; 61
    199c:	de b7       	in	r29, 0x3e	; 62
   //INIT AS A MASTER
	SET_BIT(SPCR,SPCR_MSTR);
    199e:	ad e2       	ldi	r26, 0x2D	; 45
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	ed e2       	ldi	r30, 0x2D	; 45
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	80 61       	ori	r24, 0x10	; 16
    19aa:	8c 93       	st	X, r24
	//PRE SCALER 64
	SET_BIT(SPCR,SPCR_SPR0);
    19ac:	ad e2       	ldi	r26, 0x2D	; 45
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	ed e2       	ldi	r30, 0x2D	; 45
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	81 60       	ori	r24, 0x01	; 1
    19b8:	8c 93       	st	X, r24
	SET_BIT(SPCR,SPCR_SPR1);
    19ba:	ad e2       	ldi	r26, 0x2D	; 45
    19bc:	b0 e0       	ldi	r27, 0x00	; 0
    19be:	ed e2       	ldi	r30, 0x2D	; 45
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	82 60       	ori	r24, 0x02	; 2
    19c6:	8c 93       	st	X, r24
	SET_BIT(SPSR,SPSR_SPI2X);
    19c8:	ae e2       	ldi	r26, 0x2E	; 46
    19ca:	b0 e0       	ldi	r27, 0x00	; 0
    19cc:	ee e2       	ldi	r30, 0x2E	; 46
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	80 81       	ld	r24, Z
    19d2:	81 60       	ori	r24, 0x01	; 1
    19d4:	8c 93       	st	X, r24
	//ENABLE CIRCUIT
	SET_BIT(SPCR,SPCR_SPE);
    19d6:	ad e2       	ldi	r26, 0x2D	; 45
    19d8:	b0 e0       	ldi	r27, 0x00	; 0
    19da:	ed e2       	ldi	r30, 0x2D	; 45
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	80 81       	ld	r24, Z
    19e0:	80 64       	ori	r24, 0x40	; 64
    19e2:	8c 93       	st	X, r24

}
    19e4:	cf 91       	pop	r28
    19e6:	df 91       	pop	r29
    19e8:	08 95       	ret

000019ea <SPI_voidInitSlave>:
void SPI_voidInitSlave(void)
{
    19ea:	df 93       	push	r29
    19ec:	cf 93       	push	r28
    19ee:	cd b7       	in	r28, 0x3d	; 61
    19f0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SPCR,SPCR_MSTR);
    19f2:	ad e2       	ldi	r26, 0x2D	; 45
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	ed e2       	ldi	r30, 0x2D	; 45
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	8f 7e       	andi	r24, 0xEF	; 239
    19fe:	8c 93       	st	X, r24
	SET_BIT(SPCR,SPCR_SPE);
    1a00:	ad e2       	ldi	r26, 0x2D	; 45
    1a02:	b0 e0       	ldi	r27, 0x00	; 0
    1a04:	ed e2       	ldi	r30, 0x2D	; 45
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	80 81       	ld	r24, Z
    1a0a:	80 64       	ori	r24, 0x40	; 64
    1a0c:	8c 93       	st	X, r24
}
    1a0e:	cf 91       	pop	r28
    1a10:	df 91       	pop	r29
    1a12:	08 95       	ret

00001a14 <SPI_u8Tranceive>:

u8 SPI_u8Tranceive(u8 Copy_u8Data)
{
    1a14:	df 93       	push	r29
    1a16:	cf 93       	push	r28
    1a18:	0f 92       	push	r0
    1a1a:	cd b7       	in	r28, 0x3d	; 61
    1a1c:	de b7       	in	r29, 0x3e	; 62
    1a1e:	89 83       	std	Y+1, r24	; 0x01
	SPDR=Copy_u8Data;
    1a20:	ef e2       	ldi	r30, 0x2F	; 47
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	89 81       	ldd	r24, Y+1	; 0x01
    1a26:	80 83       	st	Z, r24
	while((GET_BIT(SPSR,SPSR_SPIF))==0);
    1a28:	ee e2       	ldi	r30, 0x2E	; 46
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	80 81       	ld	r24, Z
    1a2e:	88 23       	and	r24, r24
    1a30:	dc f7       	brge	.-10     	; 0x1a28 <SPI_u8Tranceive+0x14>
	return SPDR;
    1a32:	ef e2       	ldi	r30, 0x2F	; 47
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	80 81       	ld	r24, Z

}
    1a38:	0f 90       	pop	r0
    1a3a:	cf 91       	pop	r28
    1a3c:	df 91       	pop	r29
    1a3e:	08 95       	ret

00001a40 <TIMER0_Init>:
#include "STD_TYPES.h"
#include "TIMER_interface.h"
#include "TIMER_private.h"
#include "TIMER_config.h"
void TIMER0_Init(void)
{
    1a40:	df 93       	push	r29
    1a42:	cf 93       	push	r28
    1a44:	cd b7       	in	r28, 0x3d	; 61
    1a46:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0,TCCR0_WGM01);
    1a48:	a3 e5       	ldi	r26, 0x53	; 83
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	e3 e5       	ldi	r30, 0x53	; 83
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	80 81       	ld	r24, Z
    1a52:	88 60       	ori	r24, 0x08	; 8
    1a54:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM00);
    1a56:	a3 e5       	ldi	r26, 0x53	; 83
    1a58:	b0 e0       	ldi	r27, 0x00	; 0
    1a5a:	e3 e5       	ldi	r30, 0x53	; 83
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	80 81       	ld	r24, Z
    1a60:	80 64       	ori	r24, 0x40	; 64
    1a62:	8c 93       	st	X, r24

	//OCR0 = 125;
	SET_BIT(TCCR0,TCCR0_COM01);
    1a64:	a3 e5       	ldi	r26, 0x53	; 83
    1a66:	b0 e0       	ldi	r27, 0x00	; 0
    1a68:	e3 e5       	ldi	r30, 0x53	; 83
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	80 81       	ld	r24, Z
    1a6e:	80 62       	ori	r24, 0x20	; 32
    1a70:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_COM00);
    1a72:	a3 e5       	ldi	r26, 0x53	; 83
    1a74:	b0 e0       	ldi	r27, 0x00	; 0
    1a76:	e3 e5       	ldi	r30, 0x53	; 83
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	8f 7e       	andi	r24, 0xEF	; 239
    1a7e:	8c 93       	st	X, r24


	//SET_BIT(TIMSK,TIMSK_OCIE0);

	CLR_BIT(TCCR0,TCCR0_CS02);
    1a80:	a3 e5       	ldi	r26, 0x53	; 83
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	e3 e5       	ldi	r30, 0x53	; 83
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	8b 7f       	andi	r24, 0xFB	; 251
    1a8c:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS01);
    1a8e:	a3 e5       	ldi	r26, 0x53	; 83
    1a90:	b0 e0       	ldi	r27, 0x00	; 0
    1a92:	e3 e5       	ldi	r30, 0x53	; 83
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	80 81       	ld	r24, Z
    1a98:	82 60       	ori	r24, 0x02	; 2
    1a9a:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS00);
    1a9c:	a3 e5       	ldi	r26, 0x53	; 83
    1a9e:	b0 e0       	ldi	r27, 0x00	; 0
    1aa0:	e3 e5       	ldi	r30, 0x53	; 83
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	81 60       	ori	r24, 0x01	; 1
    1aa8:	8c 93       	st	X, r24

}
    1aaa:	cf 91       	pop	r28
    1aac:	df 91       	pop	r29
    1aae:	08 95       	ret

00001ab0 <TIMER0_voidSetOcrValue>:

void TIMER0_voidSetOcrValue(u8 Copy_u8Value)
{
    1ab0:	df 93       	push	r29
    1ab2:	cf 93       	push	r28
    1ab4:	0f 92       	push	r0
    1ab6:	cd b7       	in	r28, 0x3d	; 61
    1ab8:	de b7       	in	r29, 0x3e	; 62
    1aba:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8Value;
    1abc:	ec e5       	ldi	r30, 0x5C	; 92
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	89 81       	ldd	r24, Y+1	; 0x01
    1ac2:	80 83       	st	Z, r24

}
    1ac4:	0f 90       	pop	r0
    1ac6:	cf 91       	pop	r28
    1ac8:	df 91       	pop	r29
    1aca:	08 95       	ret

00001acc <TIMER2_Init>:
void TIMER2_Init(void)
{
    1acc:	df 93       	push	r29
    1ace:	cf 93       	push	r28
    1ad0:	cd b7       	in	r28, 0x3d	; 61
    1ad2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR2,TCCR2_WGM21);
    1ad4:	a5 e4       	ldi	r26, 0x45	; 69
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	e5 e4       	ldi	r30, 0x45	; 69
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	88 60       	ori	r24, 0x08	; 8
    1ae0:	8c 93       	st	X, r24
	SET_BIT(TCCR2,TCCR2_WGM20);
    1ae2:	a5 e4       	ldi	r26, 0x45	; 69
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	e5 e4       	ldi	r30, 0x45	; 69
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	80 81       	ld	r24, Z
    1aec:	80 64       	ori	r24, 0x40	; 64
    1aee:	8c 93       	st	X, r24

	//OCR0 = 125;
	SET_BIT(TCCR2,TCCR2_COM21);
    1af0:	a5 e4       	ldi	r26, 0x45	; 69
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	e5 e4       	ldi	r30, 0x45	; 69
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	80 62       	ori	r24, 0x20	; 32
    1afc:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,TCCR2_COM20);
    1afe:	a5 e4       	ldi	r26, 0x45	; 69
    1b00:	b0 e0       	ldi	r27, 0x00	; 0
    1b02:	e5 e4       	ldi	r30, 0x45	; 69
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	8f 7e       	andi	r24, 0xEF	; 239
    1b0a:	8c 93       	st	X, r24


	//SET_BIT(TIMSK,TIMSK_OCIE0);

	CLR_BIT(TCCR2,TCCR2_CS22);
    1b0c:	a5 e4       	ldi	r26, 0x45	; 69
    1b0e:	b0 e0       	ldi	r27, 0x00	; 0
    1b10:	e5 e4       	ldi	r30, 0x45	; 69
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	80 81       	ld	r24, Z
    1b16:	8b 7f       	andi	r24, 0xFB	; 251
    1b18:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR2_CS21);
    1b1a:	a3 e5       	ldi	r26, 0x53	; 83
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	e3 e5       	ldi	r30, 0x53	; 83
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	82 60       	ori	r24, 0x02	; 2
    1b26:	8c 93       	st	X, r24
	SET_BIT(TCCR2,TCCR2_CS20);
    1b28:	a5 e4       	ldi	r26, 0x45	; 69
    1b2a:	b0 e0       	ldi	r27, 0x00	; 0
    1b2c:	e5 e4       	ldi	r30, 0x45	; 69
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	81 60       	ori	r24, 0x01	; 1
    1b34:	8c 93       	st	X, r24

}
    1b36:	cf 91       	pop	r28
    1b38:	df 91       	pop	r29
    1b3a:	08 95       	ret

00001b3c <TIMER2_voidSetOcrValue>:

void TIMER2_voidSetOcrValue(u8 Copy_u8Value)
{
    1b3c:	df 93       	push	r29
    1b3e:	cf 93       	push	r28
    1b40:	0f 92       	push	r0
    1b42:	cd b7       	in	r28, 0x3d	; 61
    1b44:	de b7       	in	r29, 0x3e	; 62
    1b46:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = Copy_u8Value;
    1b48:	e3 e4       	ldi	r30, 0x43	; 67
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	89 81       	ldd	r24, Y+1	; 0x01
    1b4e:	80 83       	st	Z, r24

}
    1b50:	0f 90       	pop	r0
    1b52:	cf 91       	pop	r28
    1b54:	df 91       	pop	r29
    1b56:	08 95       	ret

00001b58 <TIMER1_voidInit>:


void TIMER1_voidInit(void)
{
    1b58:	df 93       	push	r29
    1b5a:	cf 93       	push	r28
    1b5c:	cd b7       	in	r28, 0x3d	; 61
    1b5e:	de b7       	in	r29, 0x3e	; 62
	//WGM mode 14
	CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1b60:	af e4       	ldi	r26, 0x4F	; 79
    1b62:	b0 e0       	ldi	r27, 0x00	; 0
    1b64:	ef e4       	ldi	r30, 0x4F	; 79
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	80 81       	ld	r24, Z
    1b6a:	8e 7f       	andi	r24, 0xFE	; 254
    1b6c:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_WGM11);
    1b6e:	af e4       	ldi	r26, 0x4F	; 79
    1b70:	b0 e0       	ldi	r27, 0x00	; 0
    1b72:	ef e4       	ldi	r30, 0x4F	; 79
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	80 81       	ld	r24, Z
    1b78:	82 60       	ori	r24, 0x02	; 2
    1b7a:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM12);
    1b7c:	ae e4       	ldi	r26, 0x4E	; 78
    1b7e:	b0 e0       	ldi	r27, 0x00	; 0
    1b80:	ee e4       	ldi	r30, 0x4E	; 78
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	88 60       	ori	r24, 0x08	; 8
    1b88:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM13);
    1b8a:	ae e4       	ldi	r26, 0x4E	; 78
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	ee e4       	ldi	r30, 0x4E	; 78
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	80 61       	ori	r24, 0x10	; 16
    1b96:	8c 93       	st	X, r24

	SET_BIT(TCCR1A,TCCR1A_COM1A1);
    1b98:	af e4       	ldi	r26, 0x4F	; 79
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
    1b9c:	ef e4       	ldi	r30, 0x4F	; 79
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	80 68       	ori	r24, 0x80	; 128
    1ba4:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    1ba6:	af e4       	ldi	r26, 0x4F	; 79
    1ba8:	b0 e0       	ldi	r27, 0x00	; 0
    1baa:	ef e4       	ldi	r30, 0x4F	; 79
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	80 81       	ld	r24, Z
    1bb0:	8f 7b       	andi	r24, 0xBF	; 191
    1bb2:	8c 93       	st	X, r24

	// prescaler
	CLR_BIT(TCCR1B,TCCR1B_CS10);
    1bb4:	ae e4       	ldi	r26, 0x4E	; 78
    1bb6:	b0 e0       	ldi	r27, 0x00	; 0
    1bb8:	ee e4       	ldi	r30, 0x4E	; 78
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	80 81       	ld	r24, Z
    1bbe:	8e 7f       	andi	r24, 0xFE	; 254
    1bc0:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_CS11);
    1bc2:	ae e4       	ldi	r26, 0x4E	; 78
    1bc4:	b0 e0       	ldi	r27, 0x00	; 0
    1bc6:	ee e4       	ldi	r30, 0x4E	; 78
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	80 81       	ld	r24, Z
    1bcc:	82 60       	ori	r24, 0x02	; 2
    1bce:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS12);
    1bd0:	ae e4       	ldi	r26, 0x4E	; 78
    1bd2:	b0 e0       	ldi	r27, 0x00	; 0
    1bd4:	ee e4       	ldi	r30, 0x4E	; 78
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	80 81       	ld	r24, Z
    1bda:	8b 7f       	andi	r24, 0xFB	; 251
    1bdc:	8c 93       	st	X, r24





}
    1bde:	cf 91       	pop	r28
    1be0:	df 91       	pop	r29
    1be2:	08 95       	ret

00001be4 <TIMER1_voidSetOcrValue>:
void TIMER1_voidSetOcrValue(u16 Copy_u16value)
{
    1be4:	df 93       	push	r29
    1be6:	cf 93       	push	r28
    1be8:	00 d0       	rcall	.+0      	; 0x1bea <TIMER1_voidSetOcrValue+0x6>
    1bea:	cd b7       	in	r28, 0x3d	; 61
    1bec:	de b7       	in	r29, 0x3e	; 62
    1bee:	9a 83       	std	Y+2, r25	; 0x02
    1bf0:	89 83       	std	Y+1, r24	; 0x01

	OCR1A =Copy_u16value;
    1bf2:	ea e4       	ldi	r30, 0x4A	; 74
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	89 81       	ldd	r24, Y+1	; 0x01
    1bf8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bfa:	91 83       	std	Z+1, r25	; 0x01
    1bfc:	80 83       	st	Z, r24

}
    1bfe:	0f 90       	pop	r0
    1c00:	0f 90       	pop	r0
    1c02:	cf 91       	pop	r28
    1c04:	df 91       	pop	r29
    1c06:	08 95       	ret

00001c08 <TIMER1_voidSetIcrValue>:
void TIMER1_voidSetIcrValue(u16 Copy_u16value)
{
    1c08:	df 93       	push	r29
    1c0a:	cf 93       	push	r28
    1c0c:	00 d0       	rcall	.+0      	; 0x1c0e <TIMER1_voidSetIcrValue+0x6>
    1c0e:	cd b7       	in	r28, 0x3d	; 61
    1c10:	de b7       	in	r29, 0x3e	; 62
    1c12:	9a 83       	std	Y+2, r25	; 0x02
    1c14:	89 83       	std	Y+1, r24	; 0x01
	ICR1 =Copy_u16value;
    1c16:	e6 e4       	ldi	r30, 0x46	; 70
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	89 81       	ldd	r24, Y+1	; 0x01
    1c1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c1e:	91 83       	std	Z+1, r25	; 0x01
    1c20:	80 83       	st	Z, r24
}
    1c22:	0f 90       	pop	r0
    1c24:	0f 90       	pop	r0
    1c26:	cf 91       	pop	r28
    1c28:	df 91       	pop	r29
    1c2a:	08 95       	ret

00001c2c <USART_voidInit>:




void USART_voidInit(void)
{
    1c2c:	df 93       	push	r29
    1c2e:	cf 93       	push	r28
    1c30:	00 d0       	rcall	.+0      	; 0x1c32 <USART_voidInit+0x6>
    1c32:	0f 92       	push	r0
    1c34:	cd b7       	in	r28, 0x3d	; 61
    1c36:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8UCSRC=0;
    1c38:	1b 82       	std	Y+3, r1	; 0x03

	/*Calculate The Baud Rate From The Equation */
	u16 Local_u8UBRR=(u16)((SYSTEM_FREQUENCY/(16*USART_BOUND_RATE))-1);
    1c3a:	83 e3       	ldi	r24, 0x33	; 51
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	9a 83       	std	Y+2, r25	; 0x02
    1c40:	89 83       	std	Y+1, r24	; 0x01

	UBRRH=(u8)(Local_u8UBRR>>8);
    1c42:	e0 e4       	ldi	r30, 0x40	; 64
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
    1c48:	9a 81       	ldd	r25, Y+2	; 0x02
    1c4a:	89 2f       	mov	r24, r25
    1c4c:	99 27       	eor	r25, r25
    1c4e:	80 83       	st	Z, r24
	UBRRL=(u8)Local_u8UBRR;
    1c50:	e9 e2       	ldi	r30, 0x29	; 41
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	89 81       	ldd	r24, Y+1	; 0x01
    1c56:	80 83       	st	Z, r24




#if(USART_MODE==ASYNCHRONOUS)&&(USART_SYSTEM_SPEED==USART_LOWSPEED)
	CLR_BIT(UCSRA,UCSRA_U2X);
    1c58:	ab e2       	ldi	r26, 0x2B	; 43
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	eb e2       	ldi	r30, 0x2B	; 43
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	8d 7f       	andi	r24, 0xFD	; 253
    1c64:	8c 93       	st	X, r24




#if USART_MODE==ASYNCHRONOUS
	CLR_BIT(Local_u8UCSRC,UCSRC_UMSEL);
    1c66:	8b 81       	ldd	r24, Y+3	; 0x03
    1c68:	8f 7b       	andi	r24, 0xBF	; 191
    1c6a:	8b 83       	std	Y+3, r24	; 0x03




#if USART_PARITY_MODE==DISABLE
    CLR_BIT(Local_u8UCSRC,UCSRC_UPM1);
    1c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6e:	8f 7d       	andi	r24, 0xDF	; 223
    1c70:	8b 83       	std	Y+3, r24	; 0x03
    CLR_BIT(Local_u8UCSRC,UCSRC_UPM0);
    1c72:	8b 81       	ldd	r24, Y+3	; 0x03
    1c74:	8f 7e       	andi	r24, 0xEF	; 239
    1c76:	8b 83       	std	Y+3, r24	; 0x03
     CLR_BIT(Local_u8UCSRC,UCSRC_UCSZ0);
     CLR_BIT(UCSRB,UCSRB_UCSZ2);

#elif USART_DATA_SIZE==DATA_SIZE_8_BIT

     SET_BIT(Local_u8UCSRC,UCSRC_UCSZ0);
    1c78:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7a:	82 60       	ori	r24, 0x02	; 2
    1c7c:	8b 83       	std	Y+3, r24	; 0x03
     SET_BIT(Local_u8UCSRC,UCSRC_UCSZ1);
    1c7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c80:	84 60       	ori	r24, 0x04	; 4
    1c82:	8b 83       	std	Y+3, r24	; 0x03
     CLR_BIT(UCSRB,UCSRB_UCSZ2);
    1c84:	aa e2       	ldi	r26, 0x2A	; 42
    1c86:	b0 e0       	ldi	r27, 0x00	; 0
    1c88:	ea e2       	ldi	r30, 0x2A	; 42
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	80 81       	ld	r24, Z
    1c8e:	8b 7f       	andi	r24, 0xFB	; 251
    1c90:	8c 93       	st	X, r24



#if USART_STOP_BIT==STOP_BIT_1

        CLR_BIT(Local_u8UCSRC,UCSRC_USBS);
    1c92:	8b 81       	ldd	r24, Y+3	; 0x03
    1c94:	87 7f       	andi	r24, 0xF7	; 247
    1c96:	8b 83       	std	Y+3, r24	; 0x03
#else
		#error "Wrong USART_STOP_BIT config"
	#endif


     SET_BIT(Local_u8UCSRC,UCSRC_URSEL);
    1c98:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9a:	80 68       	ori	r24, 0x80	; 128
    1c9c:	8b 83       	std	Y+3, r24	; 0x03
     UCSRC=Local_u8UCSRC;
    1c9e:	e0 e4       	ldi	r30, 0x40	; 64
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca4:	80 83       	st	Z, r24

     SET_BIT(UCSRB,UCSRB_TXEN);
    1ca6:	aa e2       	ldi	r26, 0x2A	; 42
    1ca8:	b0 e0       	ldi	r27, 0x00	; 0
    1caa:	ea e2       	ldi	r30, 0x2A	; 42
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	88 60       	ori	r24, 0x08	; 8
    1cb2:	8c 93       	st	X, r24
     SET_BIT(UCSRB,UCSRB_RXEN);
    1cb4:	aa e2       	ldi	r26, 0x2A	; 42
    1cb6:	b0 e0       	ldi	r27, 0x00	; 0
    1cb8:	ea e2       	ldi	r30, 0x2A	; 42
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	80 61       	ori	r24, 0x10	; 16
    1cc0:	8c 93       	st	X, r24


}
    1cc2:	0f 90       	pop	r0
    1cc4:	0f 90       	pop	r0
    1cc6:	0f 90       	pop	r0
    1cc8:	cf 91       	pop	r28
    1cca:	df 91       	pop	r29
    1ccc:	08 95       	ret

00001cce <USART_voidSendByte>:




void USART_voidSendByte(u8 data)
{
    1cce:	df 93       	push	r29
    1cd0:	cf 93       	push	r28
    1cd2:	0f 92       	push	r0
    1cd4:	cd b7       	in	r28, 0x3d	; 61
    1cd6:	de b7       	in	r29, 0x3e	; 62
    1cd8:	89 83       	std	Y+1, r24	; 0x01
	while(!(GET_BIT(UCSRA,UCSRA_UDRE)));
    1cda:	eb e2       	ldi	r30, 0x2B	; 43
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	80 81       	ld	r24, Z
    1ce0:	82 95       	swap	r24
    1ce2:	86 95       	lsr	r24
    1ce4:	87 70       	andi	r24, 0x07	; 7
    1ce6:	88 2f       	mov	r24, r24
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	81 70       	andi	r24, 0x01	; 1
    1cec:	90 70       	andi	r25, 0x00	; 0
    1cee:	00 97       	sbiw	r24, 0x00	; 0
    1cf0:	a1 f3       	breq	.-24     	; 0x1cda <USART_voidSendByte+0xc>
	UDR=data;
    1cf2:	ec e2       	ldi	r30, 0x2C	; 44
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	89 81       	ldd	r24, Y+1	; 0x01
    1cf8:	80 83       	st	Z, r24

}
    1cfa:	0f 90       	pop	r0
    1cfc:	cf 91       	pop	r28
    1cfe:	df 91       	pop	r29
    1d00:	08 95       	ret

00001d02 <USART_voidRecieveByte>:




u8 USART_voidRecieveByte(void)
{
    1d02:	df 93       	push	r29
    1d04:	cf 93       	push	r28
    1d06:	cd b7       	in	r28, 0x3d	; 61
    1d08:	de b7       	in	r29, 0x3e	; 62
	while(!(GET_BIT(UCSRA,UCSRA_RXC)));
    1d0a:	eb e2       	ldi	r30, 0x2B	; 43
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	80 81       	ld	r24, Z
    1d10:	88 23       	and	r24, r24
    1d12:	dc f7       	brge	.-10     	; 0x1d0a <USART_voidRecieveByte+0x8>

 return UDR;
    1d14:	ec e2       	ldi	r30, 0x2C	; 44
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	80 81       	ld	r24, Z
}
    1d1a:	cf 91       	pop	r28
    1d1c:	df 91       	pop	r29
    1d1e:	08 95       	ret

00001d20 <USART_voidSendString>:



void USART_voidSendString(u8 *Copy_u8String)
{
    1d20:	df 93       	push	r29
    1d22:	cf 93       	push	r28
    1d24:	00 d0       	rcall	.+0      	; 0x1d26 <USART_voidSendString+0x6>
    1d26:	0f 92       	push	r0
    1d28:	cd b7       	in	r28, 0x3d	; 61
    1d2a:	de b7       	in	r29, 0x3e	; 62
    1d2c:	9b 83       	std	Y+3, r25	; 0x03
    1d2e:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    1d30:	19 82       	std	Y+1, r1	; 0x01
    1d32:	0e c0       	rjmp	.+28     	; 0x1d50 <USART_voidSendString+0x30>
	while(Copy_u8String[i] !='\0')
	{
		USART_voidSendByte(Copy_u8String[i]);
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	28 2f       	mov	r18, r24
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d3e:	fc 01       	movw	r30, r24
    1d40:	e2 0f       	add	r30, r18
    1d42:	f3 1f       	adc	r31, r19
    1d44:	80 81       	ld	r24, Z
    1d46:	0e 94 67 0e 	call	0x1cce	; 0x1cce <USART_voidSendByte>
		i++;
    1d4a:	89 81       	ldd	r24, Y+1	; 0x01
    1d4c:	8f 5f       	subi	r24, 0xFF	; 255
    1d4e:	89 83       	std	Y+1, r24	; 0x01


void USART_voidSendString(u8 *Copy_u8String)
{
	u8 i=0;
	while(Copy_u8String[i] !='\0')
    1d50:	89 81       	ldd	r24, Y+1	; 0x01
    1d52:	28 2f       	mov	r18, r24
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	8a 81       	ldd	r24, Y+2	; 0x02
    1d58:	9b 81       	ldd	r25, Y+3	; 0x03
    1d5a:	fc 01       	movw	r30, r24
    1d5c:	e2 0f       	add	r30, r18
    1d5e:	f3 1f       	adc	r31, r19
    1d60:	80 81       	ld	r24, Z
    1d62:	88 23       	and	r24, r24
    1d64:	39 f7       	brne	.-50     	; 0x1d34 <USART_voidSendString+0x14>
	{
		USART_voidSendByte(Copy_u8String[i]);
		i++;
	}
}
    1d66:	0f 90       	pop	r0
    1d68:	0f 90       	pop	r0
    1d6a:	0f 90       	pop	r0
    1d6c:	cf 91       	pop	r28
    1d6e:	df 91       	pop	r29
    1d70:	08 95       	ret

00001d72 <USART_voidReceiveString>:
void USART_voidReceiveString(u8 *Copy_u8String)
{
    1d72:	0f 93       	push	r16
    1d74:	1f 93       	push	r17
    1d76:	df 93       	push	r29
    1d78:	cf 93       	push	r28
    1d7a:	00 d0       	rcall	.+0      	; 0x1d7c <USART_voidReceiveString+0xa>
    1d7c:	0f 92       	push	r0
    1d7e:	cd b7       	in	r28, 0x3d	; 61
    1d80:	de b7       	in	r29, 0x3e	; 62
    1d82:	9b 83       	std	Y+3, r25	; 0x03
    1d84:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    1d86:	19 82       	std	Y+1, r1	; 0x01
	Copy_u8String[i]=USART_voidRecieveByte();
    1d88:	89 81       	ldd	r24, Y+1	; 0x01
    1d8a:	28 2f       	mov	r18, r24
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d90:	9b 81       	ldd	r25, Y+3	; 0x03
    1d92:	8c 01       	movw	r16, r24
    1d94:	02 0f       	add	r16, r18
    1d96:	13 1f       	adc	r17, r19
    1d98:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <USART_voidRecieveByte>
    1d9c:	f8 01       	movw	r30, r16
    1d9e:	80 83       	st	Z, r24
    1da0:	0f c0       	rjmp	.+30     	; 0x1dc0 <USART_voidReceiveString+0x4e>

	while(Copy_u8String[i] !=' ')
	{
		i++;
    1da2:	89 81       	ldd	r24, Y+1	; 0x01
    1da4:	8f 5f       	subi	r24, 0xFF	; 255
    1da6:	89 83       	std	Y+1, r24	; 0x01
		Copy_u8String[i]=USART_voidRecieveByte();
    1da8:	89 81       	ldd	r24, Y+1	; 0x01
    1daa:	28 2f       	mov	r18, r24
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	8a 81       	ldd	r24, Y+2	; 0x02
    1db0:	9b 81       	ldd	r25, Y+3	; 0x03
    1db2:	8c 01       	movw	r16, r24
    1db4:	02 0f       	add	r16, r18
    1db6:	13 1f       	adc	r17, r19
    1db8:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <USART_voidRecieveByte>
    1dbc:	f8 01       	movw	r30, r16
    1dbe:	80 83       	st	Z, r24
void USART_voidReceiveString(u8 *Copy_u8String)
{
	u8 i=0;
	Copy_u8String[i]=USART_voidRecieveByte();

	while(Copy_u8String[i] !=' ')
    1dc0:	89 81       	ldd	r24, Y+1	; 0x01
    1dc2:	28 2f       	mov	r18, r24
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc8:	9b 81       	ldd	r25, Y+3	; 0x03
    1dca:	fc 01       	movw	r30, r24
    1dcc:	e2 0f       	add	r30, r18
    1dce:	f3 1f       	adc	r31, r19
    1dd0:	80 81       	ld	r24, Z
    1dd2:	80 32       	cpi	r24, 0x20	; 32
    1dd4:	31 f7       	brne	.-52     	; 0x1da2 <USART_voidReceiveString+0x30>
		i++;
		Copy_u8String[i]=USART_voidRecieveByte();


	}
	Copy_u8String[i]='\0';
    1dd6:	89 81       	ldd	r24, Y+1	; 0x01
    1dd8:	28 2f       	mov	r18, r24
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dde:	9b 81       	ldd	r25, Y+3	; 0x03
    1de0:	fc 01       	movw	r30, r24
    1de2:	e2 0f       	add	r30, r18
    1de4:	f3 1f       	adc	r31, r19
    1de6:	10 82       	st	Z, r1


}
    1de8:	0f 90       	pop	r0
    1dea:	0f 90       	pop	r0
    1dec:	0f 90       	pop	r0
    1dee:	cf 91       	pop	r28
    1df0:	df 91       	pop	r29
    1df2:	1f 91       	pop	r17
    1df4:	0f 91       	pop	r16
    1df6:	08 95       	ret

00001df8 <Compare_string>:
//   }
//   return flag;
//
//}
u8 Compare_string(u8 *str1,u8 *str2)
{
    1df8:	df 93       	push	r29
    1dfa:	cf 93       	push	r28
    1dfc:	00 d0       	rcall	.+0      	; 0x1dfe <Compare_string+0x6>
    1dfe:	00 d0       	rcall	.+0      	; 0x1e00 <Compare_string+0x8>
    1e00:	00 d0       	rcall	.+0      	; 0x1e02 <Compare_string+0xa>
    1e02:	cd b7       	in	r28, 0x3d	; 61
    1e04:	de b7       	in	r29, 0x3e	; 62
    1e06:	9c 83       	std	Y+4, r25	; 0x04
    1e08:	8b 83       	std	Y+3, r24	; 0x03
    1e0a:	7e 83       	std	Y+6, r23	; 0x06
    1e0c:	6d 83       	std	Y+5, r22	; 0x05

   u8 i=0;
    1e0e:	1a 82       	std	Y+2, r1	; 0x02
   u8 flag=1;
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	89 83       	std	Y+1, r24	; 0x01
    1e14:	1c c0       	rjmp	.+56     	; 0x1e4e <Compare_string+0x56>
   while(str2[i]!='\0')
   {
	  if(str1[i]==str2[i])
    1e16:	8a 81       	ldd	r24, Y+2	; 0x02
    1e18:	28 2f       	mov	r18, r24
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e20:	fc 01       	movw	r30, r24
    1e22:	e2 0f       	add	r30, r18
    1e24:	f3 1f       	adc	r31, r19
    1e26:	40 81       	ld	r20, Z
    1e28:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2a:	28 2f       	mov	r18, r24
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e30:	9e 81       	ldd	r25, Y+6	; 0x06
    1e32:	fc 01       	movw	r30, r24
    1e34:	e2 0f       	add	r30, r18
    1e36:	f3 1f       	adc	r31, r19
    1e38:	80 81       	ld	r24, Z
    1e3a:	48 17       	cp	r20, r24
    1e3c:	31 f4       	brne	.+12     	; 0x1e4a <Compare_string+0x52>
	  {
		  flag=1;
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	89 83       	std	Y+1, r24	; 0x01
	  {
		  flag=0;
		  break;
	  }

	  i++;
    1e42:	8a 81       	ldd	r24, Y+2	; 0x02
    1e44:	8f 5f       	subi	r24, 0xFF	; 255
    1e46:	8a 83       	std	Y+2, r24	; 0x02
    1e48:	02 c0       	rjmp	.+4      	; 0x1e4e <Compare_string+0x56>
	  {
		  flag=1;
	  }
	  else
	  {
		  flag=0;
    1e4a:	19 82       	std	Y+1, r1	; 0x01
    1e4c:	0b c0       	rjmp	.+22     	; 0x1e64 <Compare_string+0x6c>
u8 Compare_string(u8 *str1,u8 *str2)
{

   u8 i=0;
   u8 flag=1;
   while(str2[i]!='\0')
    1e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e50:	28 2f       	mov	r18, r24
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	8d 81       	ldd	r24, Y+5	; 0x05
    1e56:	9e 81       	ldd	r25, Y+6	; 0x06
    1e58:	fc 01       	movw	r30, r24
    1e5a:	e2 0f       	add	r30, r18
    1e5c:	f3 1f       	adc	r31, r19
    1e5e:	80 81       	ld	r24, Z
    1e60:	88 23       	and	r24, r24
    1e62:	c9 f6       	brne	.-78     	; 0x1e16 <Compare_string+0x1e>
		  break;
	  }

	  i++;
   }
   return flag;
    1e64:	89 81       	ldd	r24, Y+1	; 0x01

}
    1e66:	26 96       	adiw	r28, 0x06	; 6
    1e68:	0f b6       	in	r0, 0x3f	; 63
    1e6a:	f8 94       	cli
    1e6c:	de bf       	out	0x3e, r29	; 62
    1e6e:	0f be       	out	0x3f, r0	; 63
    1e70:	cd bf       	out	0x3d, r28	; 61
    1e72:	cf 91       	pop	r28
    1e74:	df 91       	pop	r29
    1e76:	08 95       	ret

00001e78 <main>:
		{"AHMED","1122"}};

u8 static flag = 0;

void main(void)
{
    1e78:	df 93       	push	r29
    1e7a:	cf 93       	push	r28
    1e7c:	cd b7       	in	r28, 0x3d	; 61
    1e7e:	de b7       	in	r29, 0x3e	; 62
    1e80:	e4 97       	sbiw	r28, 0x34	; 52
    1e82:	0f b6       	in	r0, 0x3f	; 63
    1e84:	f8 94       	cli
    1e86:	de bf       	out	0x3e, r29	; 62
    1e88:	0f be       	out	0x3f, r0	; 63
    1e8a:	cd bf       	out	0x3d, r28	; 61
	/*Direction*/
	DIO_voidSetPortDir(PORTA_REG,PORT_DIR_OUT);
    1e8c:	81 e0       	ldi	r24, 0x01	; 1
    1e8e:	6f ef       	ldi	r22, 0xFF	; 255
    1e90:	0e 94 bd 09 	call	0x137a	; 0x137a <DIO_voidSetPortDir>
	DIO_voidSetPortDir(PORTC_REG,PORT_DIR_OUT);
    1e94:	83 e0       	ldi	r24, 0x03	; 3
    1e96:	6f ef       	ldi	r22, 0xFF	; 255
    1e98:	0e 94 bd 09 	call	0x137a	; 0x137a <DIO_voidSetPortDir>

	DIO_voidSetPinDir(PORTD_REG,PIN7,PIN_DIR_OUT);
    1e9c:	84 e0       	ldi	r24, 0x04	; 4
    1e9e:	67 e0       	ldi	r22, 0x07	; 7
    1ea0:	41 e0       	ldi	r20, 0x01	; 1
    1ea2:	0e 94 ff 09 	call	0x13fe	; 0x13fe <DIO_voidSetPinDir>
	DIO_voidSetPinDir(PORTD_REG,PIN5,PIN_DIR_OUT);
    1ea6:	84 e0       	ldi	r24, 0x04	; 4
    1ea8:	65 e0       	ldi	r22, 0x05	; 5
    1eaa:	41 e0       	ldi	r20, 0x01	; 1
    1eac:	0e 94 ff 09 	call	0x13fe	; 0x13fe <DIO_voidSetPinDir>
	DIO_voidSetPinDir(PORTD_REG,PIN0,PIN_DIR_IN);
    1eb0:	84 e0       	ldi	r24, 0x04	; 4
    1eb2:	60 e0       	ldi	r22, 0x00	; 0
    1eb4:	40 e0       	ldi	r20, 0x00	; 0
    1eb6:	0e 94 ff 09 	call	0x13fe	; 0x13fe <DIO_voidSetPinDir>
	DIO_voidSetPinDir(PORTD_REG,PIN1,PIN_DIR_OUT);
    1eba:	84 e0       	ldi	r24, 0x04	; 4
    1ebc:	61 e0       	ldi	r22, 0x01	; 1
    1ebe:	41 e0       	ldi	r20, 0x01	; 1
    1ec0:	0e 94 ff 09 	call	0x13fe	; 0x13fe <DIO_voidSetPinDir>
	DIO_voidSetPinDir(PORTB_REG,PIN3,PIN_DIR_OUT);
    1ec4:	82 e0       	ldi	r24, 0x02	; 2
    1ec6:	63 e0       	ldi	r22, 0x03	; 3
    1ec8:	41 e0       	ldi	r20, 0x01	; 1
    1eca:	0e 94 ff 09 	call	0x13fe	; 0x13fe <DIO_voidSetPinDir>

	/*select master output*/
	DIO_voidSetPinDir(PORTB_REG,PIN5,PIN_DIR_OUT);
    1ece:	82 e0       	ldi	r24, 0x02	; 2
    1ed0:	65 e0       	ldi	r22, 0x05	; 5
    1ed2:	41 e0       	ldi	r20, 0x01	; 1
    1ed4:	0e 94 ff 09 	call	0x13fe	; 0x13fe <DIO_voidSetPinDir>
	/**/
	DIO_voidSetPinDir(PORTB_REG,PIN4,PIN_DIR_OUT);
    1ed8:	82 e0       	ldi	r24, 0x02	; 2
    1eda:	64 e0       	ldi	r22, 0x04	; 4
    1edc:	41 e0       	ldi	r20, 0x01	; 1
    1ede:	0e 94 ff 09 	call	0x13fe	; 0x13fe <DIO_voidSetPinDir>
	DIO_voidSetPinVal(PORTB_REG,PIN4,PIN_VAL_LOW);
    1ee2:	82 e0       	ldi	r24, 0x02	; 2
    1ee4:	64 e0       	ldi	r22, 0x04	; 4
    1ee6:	40 e0       	ldi	r20, 0x00	; 0
    1ee8:	0e 94 47 0b 	call	0x168e	; 0x168e <DIO_voidSetPinVal>
	DIO_voidSetPinDir(PORTB_REG,PIN6,PIN_DIR_IN);
    1eec:	82 e0       	ldi	r24, 0x02	; 2
    1eee:	66 e0       	ldi	r22, 0x06	; 6
    1ef0:	40 e0       	ldi	r20, 0x00	; 0
    1ef2:	0e 94 ff 09 	call	0x13fe	; 0x13fe <DIO_voidSetPinDir>
	/*CS*/
	DIO_voidSetPinDir(PORTB_REG,PIN7,PIN_DIR_OUT);
    1ef6:	82 e0       	ldi	r24, 0x02	; 2
    1ef8:	67 e0       	ldi	r22, 0x07	; 7
    1efa:	41 e0       	ldi	r20, 0x01	; 1
    1efc:	0e 94 ff 09 	call	0x13fe	; 0x13fe <DIO_voidSetPinDir>



	/*Initial*/
	CLCD_voidInit();
    1f00:	0e 94 df 06 	call	0xdbe	; 0xdbe <CLCD_voidInit>
	USART_voidInit();
    1f04:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <USART_voidInit>
	TIMER1_voidInit();
    1f08:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <TIMER1_voidInit>
	TIMER1_voidSetIcrValue(20000);
    1f0c:	80 e2       	ldi	r24, 0x20	; 32
    1f0e:	9e e4       	ldi	r25, 0x4E	; 78
    1f10:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <TIMER1_voidSetIcrValue>
	SPI_voidInitMstr();
    1f14:	0e 94 cb 0c 	call	0x1996	; 0x1996 <SPI_voidInitMstr>

	while(1)
	{
		user_name[10];

		CLCD_voidSetClear();
    1f18:	0e 94 a2 09 	call	0x1344	; 0x1344 <CLCD_voidSetClear>
		CLCD_voidSendString("Ente username");
    1f1c:	8a e7       	ldi	r24, 0x7A	; 122
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	0e 94 c3 08 	call	0x1186	; 0x1186 <CLCD_voidSendString>

		USART_voidSendString("Enter The User Name\r\n");
    1f24:	88 e8       	ldi	r24, 0x88	; 136
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <USART_voidSendString>
    1f2c:	80 e0       	ldi	r24, 0x00	; 0
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	a8 ec       	ldi	r26, 0xC8	; 200
    1f32:	b2 e4       	ldi	r27, 0x42	; 66
    1f34:	8f a3       	std	Y+39, r24	; 0x27
    1f36:	98 a7       	std	Y+40, r25	; 0x28
    1f38:	a9 a7       	std	Y+41, r26	; 0x29
    1f3a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f3c:	6f a1       	ldd	r22, Y+39	; 0x27
    1f3e:	78 a5       	ldd	r23, Y+40	; 0x28
    1f40:	89 a5       	ldd	r24, Y+41	; 0x29
    1f42:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f44:	20 e0       	ldi	r18, 0x00	; 0
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	4a ef       	ldi	r20, 0xFA	; 250
    1f4a:	54 e4       	ldi	r21, 0x44	; 68
    1f4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f50:	dc 01       	movw	r26, r24
    1f52:	cb 01       	movw	r24, r22
    1f54:	8b a3       	std	Y+35, r24	; 0x23
    1f56:	9c a3       	std	Y+36, r25	; 0x24
    1f58:	ad a3       	std	Y+37, r26	; 0x25
    1f5a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f5c:	6b a1       	ldd	r22, Y+35	; 0x23
    1f5e:	7c a1       	ldd	r23, Y+36	; 0x24
    1f60:	8d a1       	ldd	r24, Y+37	; 0x25
    1f62:	9e a1       	ldd	r25, Y+38	; 0x26
    1f64:	20 e0       	ldi	r18, 0x00	; 0
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	40 e8       	ldi	r20, 0x80	; 128
    1f6a:	5f e3       	ldi	r21, 0x3F	; 63
    1f6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f70:	88 23       	and	r24, r24
    1f72:	2c f4       	brge	.+10     	; 0x1f7e <main+0x106>
		__ticks = 1;
    1f74:	81 e0       	ldi	r24, 0x01	; 1
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	9a a3       	std	Y+34, r25	; 0x22
    1f7a:	89 a3       	std	Y+33, r24	; 0x21
    1f7c:	3f c0       	rjmp	.+126    	; 0x1ffc <main+0x184>
	else if (__tmp > 65535)
    1f7e:	6b a1       	ldd	r22, Y+35	; 0x23
    1f80:	7c a1       	ldd	r23, Y+36	; 0x24
    1f82:	8d a1       	ldd	r24, Y+37	; 0x25
    1f84:	9e a1       	ldd	r25, Y+38	; 0x26
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	3f ef       	ldi	r19, 0xFF	; 255
    1f8a:	4f e7       	ldi	r20, 0x7F	; 127
    1f8c:	57 e4       	ldi	r21, 0x47	; 71
    1f8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f92:	18 16       	cp	r1, r24
    1f94:	4c f5       	brge	.+82     	; 0x1fe8 <main+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f96:	6f a1       	ldd	r22, Y+39	; 0x27
    1f98:	78 a5       	ldd	r23, Y+40	; 0x28
    1f9a:	89 a5       	ldd	r24, Y+41	; 0x29
    1f9c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f9e:	20 e0       	ldi	r18, 0x00	; 0
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	40 e2       	ldi	r20, 0x20	; 32
    1fa4:	51 e4       	ldi	r21, 0x41	; 65
    1fa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1faa:	dc 01       	movw	r26, r24
    1fac:	cb 01       	movw	r24, r22
    1fae:	bc 01       	movw	r22, r24
    1fb0:	cd 01       	movw	r24, r26
    1fb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb6:	dc 01       	movw	r26, r24
    1fb8:	cb 01       	movw	r24, r22
    1fba:	9a a3       	std	Y+34, r25	; 0x22
    1fbc:	89 a3       	std	Y+33, r24	; 0x21
    1fbe:	0f c0       	rjmp	.+30     	; 0x1fde <main+0x166>
    1fc0:	88 ec       	ldi	r24, 0xC8	; 200
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	98 a3       	std	Y+32, r25	; 0x20
    1fc6:	8f 8f       	std	Y+31, r24	; 0x1f
    1fc8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fca:	98 a1       	ldd	r25, Y+32	; 0x20
    1fcc:	01 97       	sbiw	r24, 0x01	; 1
    1fce:	f1 f7       	brne	.-4      	; 0x1fcc <main+0x154>
    1fd0:	98 a3       	std	Y+32, r25	; 0x20
    1fd2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fd4:	89 a1       	ldd	r24, Y+33	; 0x21
    1fd6:	9a a1       	ldd	r25, Y+34	; 0x22
    1fd8:	01 97       	sbiw	r24, 0x01	; 1
    1fda:	9a a3       	std	Y+34, r25	; 0x22
    1fdc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fde:	89 a1       	ldd	r24, Y+33	; 0x21
    1fe0:	9a a1       	ldd	r25, Y+34	; 0x22
    1fe2:	00 97       	sbiw	r24, 0x00	; 0
    1fe4:	69 f7       	brne	.-38     	; 0x1fc0 <main+0x148>
    1fe6:	14 c0       	rjmp	.+40     	; 0x2010 <main+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fe8:	6b a1       	ldd	r22, Y+35	; 0x23
    1fea:	7c a1       	ldd	r23, Y+36	; 0x24
    1fec:	8d a1       	ldd	r24, Y+37	; 0x25
    1fee:	9e a1       	ldd	r25, Y+38	; 0x26
    1ff0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff4:	dc 01       	movw	r26, r24
    1ff6:	cb 01       	movw	r24, r22
    1ff8:	9a a3       	std	Y+34, r25	; 0x22
    1ffa:	89 a3       	std	Y+33, r24	; 0x21
    1ffc:	89 a1       	ldd	r24, Y+33	; 0x21
    1ffe:	9a a1       	ldd	r25, Y+34	; 0x22
    2000:	9e 8f       	std	Y+30, r25	; 0x1e
    2002:	8d 8f       	std	Y+29, r24	; 0x1d
    2004:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2006:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2008:	01 97       	sbiw	r24, 0x01	; 1
    200a:	f1 f7       	brne	.-4      	; 0x2008 <main+0x190>
    200c:	9e 8f       	std	Y+30, r25	; 0x1e
    200e:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(100);

		USART_voidReceiveString(user_name);
    2010:	ce 01       	movw	r24, r28
    2012:	8b 96       	adiw	r24, 0x2b	; 43
    2014:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <USART_voidReceiveString>
    2018:	80 e0       	ldi	r24, 0x00	; 0
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	a8 ec       	ldi	r26, 0xC8	; 200
    201e:	b2 e4       	ldi	r27, 0x42	; 66
    2020:	89 8f       	std	Y+25, r24	; 0x19
    2022:	9a 8f       	std	Y+26, r25	; 0x1a
    2024:	ab 8f       	std	Y+27, r26	; 0x1b
    2026:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2028:	69 8d       	ldd	r22, Y+25	; 0x19
    202a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    202c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    202e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2030:	20 e0       	ldi	r18, 0x00	; 0
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	4a ef       	ldi	r20, 0xFA	; 250
    2036:	54 e4       	ldi	r21, 0x44	; 68
    2038:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	8d 8b       	std	Y+21, r24	; 0x15
    2042:	9e 8b       	std	Y+22, r25	; 0x16
    2044:	af 8b       	std	Y+23, r26	; 0x17
    2046:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2048:	6d 89       	ldd	r22, Y+21	; 0x15
    204a:	7e 89       	ldd	r23, Y+22	; 0x16
    204c:	8f 89       	ldd	r24, Y+23	; 0x17
    204e:	98 8d       	ldd	r25, Y+24	; 0x18
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	40 e8       	ldi	r20, 0x80	; 128
    2056:	5f e3       	ldi	r21, 0x3F	; 63
    2058:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    205c:	88 23       	and	r24, r24
    205e:	2c f4       	brge	.+10     	; 0x206a <main+0x1f2>
		__ticks = 1;
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	9c 8b       	std	Y+20, r25	; 0x14
    2066:	8b 8b       	std	Y+19, r24	; 0x13
    2068:	3f c0       	rjmp	.+126    	; 0x20e8 <main+0x270>
	else if (__tmp > 65535)
    206a:	6d 89       	ldd	r22, Y+21	; 0x15
    206c:	7e 89       	ldd	r23, Y+22	; 0x16
    206e:	8f 89       	ldd	r24, Y+23	; 0x17
    2070:	98 8d       	ldd	r25, Y+24	; 0x18
    2072:	20 e0       	ldi	r18, 0x00	; 0
    2074:	3f ef       	ldi	r19, 0xFF	; 255
    2076:	4f e7       	ldi	r20, 0x7F	; 127
    2078:	57 e4       	ldi	r21, 0x47	; 71
    207a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    207e:	18 16       	cp	r1, r24
    2080:	4c f5       	brge	.+82     	; 0x20d4 <main+0x25c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2082:	69 8d       	ldd	r22, Y+25	; 0x19
    2084:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2086:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2088:	9c 8d       	ldd	r25, Y+28	; 0x1c
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	40 e2       	ldi	r20, 0x20	; 32
    2090:	51 e4       	ldi	r21, 0x41	; 65
    2092:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	bc 01       	movw	r22, r24
    209c:	cd 01       	movw	r24, r26
    209e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	9c 8b       	std	Y+20, r25	; 0x14
    20a8:	8b 8b       	std	Y+19, r24	; 0x13
    20aa:	0f c0       	rjmp	.+30     	; 0x20ca <main+0x252>
    20ac:	88 ec       	ldi	r24, 0xC8	; 200
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	9a 8b       	std	Y+18, r25	; 0x12
    20b2:	89 8b       	std	Y+17, r24	; 0x11
    20b4:	89 89       	ldd	r24, Y+17	; 0x11
    20b6:	9a 89       	ldd	r25, Y+18	; 0x12
    20b8:	01 97       	sbiw	r24, 0x01	; 1
    20ba:	f1 f7       	brne	.-4      	; 0x20b8 <main+0x240>
    20bc:	9a 8b       	std	Y+18, r25	; 0x12
    20be:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20c0:	8b 89       	ldd	r24, Y+19	; 0x13
    20c2:	9c 89       	ldd	r25, Y+20	; 0x14
    20c4:	01 97       	sbiw	r24, 0x01	; 1
    20c6:	9c 8b       	std	Y+20, r25	; 0x14
    20c8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ca:	8b 89       	ldd	r24, Y+19	; 0x13
    20cc:	9c 89       	ldd	r25, Y+20	; 0x14
    20ce:	00 97       	sbiw	r24, 0x00	; 0
    20d0:	69 f7       	brne	.-38     	; 0x20ac <main+0x234>
    20d2:	14 c0       	rjmp	.+40     	; 0x20fc <main+0x284>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20d4:	6d 89       	ldd	r22, Y+21	; 0x15
    20d6:	7e 89       	ldd	r23, Y+22	; 0x16
    20d8:	8f 89       	ldd	r24, Y+23	; 0x17
    20da:	98 8d       	ldd	r25, Y+24	; 0x18
    20dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e0:	dc 01       	movw	r26, r24
    20e2:	cb 01       	movw	r24, r22
    20e4:	9c 8b       	std	Y+20, r25	; 0x14
    20e6:	8b 8b       	std	Y+19, r24	; 0x13
    20e8:	8b 89       	ldd	r24, Y+19	; 0x13
    20ea:	9c 89       	ldd	r25, Y+20	; 0x14
    20ec:	98 8b       	std	Y+16, r25	; 0x10
    20ee:	8f 87       	std	Y+15, r24	; 0x0f
    20f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    20f2:	98 89       	ldd	r25, Y+16	; 0x10
    20f4:	01 97       	sbiw	r24, 0x01	; 1
    20f6:	f1 f7       	brne	.-4      	; 0x20f4 <main+0x27c>
    20f8:	98 8b       	std	Y+16, r25	; 0x10
    20fa:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);



		if(Compare_string(user_name,user_arr[0].username))
    20fc:	ce 01       	movw	r24, r28
    20fe:	8b 96       	adiw	r24, 0x2b	; 43
    2100:	2b e5       	ldi	r18, 0x5B	; 91
    2102:	32 e0       	ldi	r19, 0x02	; 2
    2104:	b9 01       	movw	r22, r18
    2106:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <Compare_string>
    210a:	88 23       	and	r24, r24
    210c:	29 f0       	breq	.+10     	; 0x2118 <main+0x2a0>
		{

			func(user_arr[0].password);
    210e:	85 e6       	ldi	r24, 0x65	; 101
    2110:	92 e0       	ldi	r25, 0x02	; 2
    2112:	0e 94 81 11 	call	0x2302	; 0x2302 <func>
    2116:	00 cf       	rjmp	.-512    	; 0x1f18 <main+0xa0>

		}

		else if(Compare_string(user_name,user_arr[1].username))
    2118:	ce 01       	movw	r24, r28
    211a:	8b 96       	adiw	r24, 0x2b	; 43
    211c:	2f e6       	ldi	r18, 0x6F	; 111
    211e:	32 e0       	ldi	r19, 0x02	; 2
    2120:	b9 01       	movw	r22, r18
    2122:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <Compare_string>
    2126:	88 23       	and	r24, r24
    2128:	29 f0       	breq	.+10     	; 0x2134 <main+0x2bc>
		{

			func(user_arr[1].password);
    212a:	89 e7       	ldi	r24, 0x79	; 121
    212c:	92 e0       	ldi	r25, 0x02	; 2
    212e:	0e 94 81 11 	call	0x2302	; 0x2302 <func>
    2132:	f2 ce       	rjmp	.-540    	; 0x1f18 <main+0xa0>

		}
		else if(Compare_string(user_name,user_arr[2].username))
    2134:	ce 01       	movw	r24, r28
    2136:	8b 96       	adiw	r24, 0x2b	; 43
    2138:	23 e8       	ldi	r18, 0x83	; 131
    213a:	32 e0       	ldi	r19, 0x02	; 2
    213c:	b9 01       	movw	r22, r18
    213e:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <Compare_string>
    2142:	88 23       	and	r24, r24
    2144:	29 f0       	breq	.+10     	; 0x2150 <main+0x2d8>
		{

			func(user_arr[2].password);
    2146:	8d e8       	ldi	r24, 0x8D	; 141
    2148:	92 e0       	ldi	r25, 0x02	; 2
    214a:	0e 94 81 11 	call	0x2302	; 0x2302 <func>
    214e:	e4 ce       	rjmp	.-568    	; 0x1f18 <main+0xa0>

		}
		else if(Compare_string(user_name,user_arr[3].username))
    2150:	ce 01       	movw	r24, r28
    2152:	8b 96       	adiw	r24, 0x2b	; 43
    2154:	27 e9       	ldi	r18, 0x97	; 151
    2156:	32 e0       	ldi	r19, 0x02	; 2
    2158:	b9 01       	movw	r22, r18
    215a:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <Compare_string>
    215e:	88 23       	and	r24, r24
    2160:	29 f0       	breq	.+10     	; 0x216c <main+0x2f4>
		{

			func(user_arr[3].password);
    2162:	81 ea       	ldi	r24, 0xA1	; 161
    2164:	92 e0       	ldi	r25, 0x02	; 2
    2166:	0e 94 81 11 	call	0x2302	; 0x2302 <func>
    216a:	d6 ce       	rjmp	.-596    	; 0x1f18 <main+0xa0>

		}
		else if(Compare_string(user_name,user_arr[4].username))
    216c:	ce 01       	movw	r24, r28
    216e:	8b 96       	adiw	r24, 0x2b	; 43
    2170:	2b ea       	ldi	r18, 0xAB	; 171
    2172:	32 e0       	ldi	r19, 0x02	; 2
    2174:	b9 01       	movw	r22, r18
    2176:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <Compare_string>
    217a:	88 23       	and	r24, r24
    217c:	29 f0       	breq	.+10     	; 0x2188 <main+0x310>
		{

			func(user_arr[4].password);
    217e:	85 eb       	ldi	r24, 0xB5	; 181
    2180:	92 e0       	ldi	r25, 0x02	; 2
    2182:	0e 94 81 11 	call	0x2302	; 0x2302 <func>
    2186:	c8 ce       	rjmp	.-624    	; 0x1f18 <main+0xa0>

		}
		else if(Compare_string(user_name,user_arr[5].username))
    2188:	ce 01       	movw	r24, r28
    218a:	8b 96       	adiw	r24, 0x2b	; 43
    218c:	2f eb       	ldi	r18, 0xBF	; 191
    218e:	32 e0       	ldi	r19, 0x02	; 2
    2190:	b9 01       	movw	r22, r18
    2192:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <Compare_string>
    2196:	88 23       	and	r24, r24
    2198:	29 f0       	breq	.+10     	; 0x21a4 <main+0x32c>
		{

			func(user_arr[5].password);
    219a:	89 ec       	ldi	r24, 0xC9	; 201
    219c:	92 e0       	ldi	r25, 0x02	; 2
    219e:	0e 94 81 11 	call	0x2302	; 0x2302 <func>
    21a2:	ba ce       	rjmp	.-652    	; 0x1f18 <main+0xa0>

		}
		else if(Compare_string(user_name,user_arr[6].username))
    21a4:	ce 01       	movw	r24, r28
    21a6:	8b 96       	adiw	r24, 0x2b	; 43
    21a8:	23 ed       	ldi	r18, 0xD3	; 211
    21aa:	32 e0       	ldi	r19, 0x02	; 2
    21ac:	b9 01       	movw	r22, r18
    21ae:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <Compare_string>
    21b2:	88 23       	and	r24, r24
    21b4:	29 f0       	breq	.+10     	; 0x21c0 <main+0x348>
		{

			func(user_arr[6].password);
    21b6:	8d ed       	ldi	r24, 0xDD	; 221
    21b8:	92 e0       	ldi	r25, 0x02	; 2
    21ba:	0e 94 81 11 	call	0x2302	; 0x2302 <func>
    21be:	ac ce       	rjmp	.-680    	; 0x1f18 <main+0xa0>

		}

		else if(Compare_string(user_name,user_arr[7].username))
    21c0:	ce 01       	movw	r24, r28
    21c2:	8b 96       	adiw	r24, 0x2b	; 43
    21c4:	27 ee       	ldi	r18, 0xE7	; 231
    21c6:	32 e0       	ldi	r19, 0x02	; 2
    21c8:	b9 01       	movw	r22, r18
    21ca:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <Compare_string>
    21ce:	88 23       	and	r24, r24
    21d0:	29 f0       	breq	.+10     	; 0x21dc <main+0x364>
		{

			func(user_arr[7].password);
    21d2:	81 ef       	ldi	r24, 0xF1	; 241
    21d4:	92 e0       	ldi	r25, 0x02	; 2
    21d6:	0e 94 81 11 	call	0x2302	; 0x2302 <func>
    21da:	9e ce       	rjmp	.-708    	; 0x1f18 <main+0xa0>

		}
		else if(Compare_string(user_name,user_arr[8].username))
    21dc:	ce 01       	movw	r24, r28
    21de:	8b 96       	adiw	r24, 0x2b	; 43
    21e0:	2b ef       	ldi	r18, 0xFB	; 251
    21e2:	32 e0       	ldi	r19, 0x02	; 2
    21e4:	b9 01       	movw	r22, r18
    21e6:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <Compare_string>
    21ea:	88 23       	and	r24, r24
    21ec:	29 f0       	breq	.+10     	; 0x21f8 <main+0x380>
		{

			func(user_arr[8].password);
    21ee:	85 e0       	ldi	r24, 0x05	; 5
    21f0:	93 e0       	ldi	r25, 0x03	; 3
    21f2:	0e 94 81 11 	call	0x2302	; 0x2302 <func>
    21f6:	90 ce       	rjmp	.-736    	; 0x1f18 <main+0xa0>

		}
		else if(Compare_string(user_name,user_arr[9].username))
    21f8:	ce 01       	movw	r24, r28
    21fa:	8b 96       	adiw	r24, 0x2b	; 43
    21fc:	2f e0       	ldi	r18, 0x0F	; 15
    21fe:	33 e0       	ldi	r19, 0x03	; 3
    2200:	b9 01       	movw	r22, r18
    2202:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <Compare_string>
    2206:	88 23       	and	r24, r24
    2208:	29 f0       	breq	.+10     	; 0x2214 <main+0x39c>
		{

			func(user_arr[9].password);
    220a:	89 e1       	ldi	r24, 0x19	; 25
    220c:	93 e0       	ldi	r25, 0x03	; 3
    220e:	0e 94 81 11 	call	0x2302	; 0x2302 <func>
    2212:	82 ce       	rjmp	.-764    	; 0x1f18 <main+0xa0>

		}
		else
		{
			USART_voidSendString("\r\nusername not found\r\n");
    2214:	8e e9       	ldi	r24, 0x9E	; 158
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <USART_voidSendString>
    221c:	80 e0       	ldi	r24, 0x00	; 0
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	aa ef       	ldi	r26, 0xFA	; 250
    2222:	b3 e4       	ldi	r27, 0x43	; 67
    2224:	8b 87       	std	Y+11, r24	; 0x0b
    2226:	9c 87       	std	Y+12, r25	; 0x0c
    2228:	ad 87       	std	Y+13, r26	; 0x0d
    222a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    222c:	6b 85       	ldd	r22, Y+11	; 0x0b
    222e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2230:	8d 85       	ldd	r24, Y+13	; 0x0d
    2232:	9e 85       	ldd	r25, Y+14	; 0x0e
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	4a ef       	ldi	r20, 0xFA	; 250
    223a:	54 e4       	ldi	r21, 0x44	; 68
    223c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2240:	dc 01       	movw	r26, r24
    2242:	cb 01       	movw	r24, r22
    2244:	8f 83       	std	Y+7, r24	; 0x07
    2246:	98 87       	std	Y+8, r25	; 0x08
    2248:	a9 87       	std	Y+9, r26	; 0x09
    224a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    224c:	6f 81       	ldd	r22, Y+7	; 0x07
    224e:	78 85       	ldd	r23, Y+8	; 0x08
    2250:	89 85       	ldd	r24, Y+9	; 0x09
    2252:	9a 85       	ldd	r25, Y+10	; 0x0a
    2254:	20 e0       	ldi	r18, 0x00	; 0
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	40 e8       	ldi	r20, 0x80	; 128
    225a:	5f e3       	ldi	r21, 0x3F	; 63
    225c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2260:	88 23       	and	r24, r24
    2262:	2c f4       	brge	.+10     	; 0x226e <main+0x3f6>
		__ticks = 1;
    2264:	81 e0       	ldi	r24, 0x01	; 1
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	9e 83       	std	Y+6, r25	; 0x06
    226a:	8d 83       	std	Y+5, r24	; 0x05
    226c:	3f c0       	rjmp	.+126    	; 0x22ec <main+0x474>
	else if (__tmp > 65535)
    226e:	6f 81       	ldd	r22, Y+7	; 0x07
    2270:	78 85       	ldd	r23, Y+8	; 0x08
    2272:	89 85       	ldd	r24, Y+9	; 0x09
    2274:	9a 85       	ldd	r25, Y+10	; 0x0a
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	3f ef       	ldi	r19, 0xFF	; 255
    227a:	4f e7       	ldi	r20, 0x7F	; 127
    227c:	57 e4       	ldi	r21, 0x47	; 71
    227e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2282:	18 16       	cp	r1, r24
    2284:	4c f5       	brge	.+82     	; 0x22d8 <main+0x460>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2286:	6b 85       	ldd	r22, Y+11	; 0x0b
    2288:	7c 85       	ldd	r23, Y+12	; 0x0c
    228a:	8d 85       	ldd	r24, Y+13	; 0x0d
    228c:	9e 85       	ldd	r25, Y+14	; 0x0e
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	40 e2       	ldi	r20, 0x20	; 32
    2294:	51 e4       	ldi	r21, 0x41	; 65
    2296:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    229a:	dc 01       	movw	r26, r24
    229c:	cb 01       	movw	r24, r22
    229e:	bc 01       	movw	r22, r24
    22a0:	cd 01       	movw	r24, r26
    22a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	9e 83       	std	Y+6, r25	; 0x06
    22ac:	8d 83       	std	Y+5, r24	; 0x05
    22ae:	0f c0       	rjmp	.+30     	; 0x22ce <main+0x456>
    22b0:	88 ec       	ldi	r24, 0xC8	; 200
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	9c 83       	std	Y+4, r25	; 0x04
    22b6:	8b 83       	std	Y+3, r24	; 0x03
    22b8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ba:	9c 81       	ldd	r25, Y+4	; 0x04
    22bc:	01 97       	sbiw	r24, 0x01	; 1
    22be:	f1 f7       	brne	.-4      	; 0x22bc <main+0x444>
    22c0:	9c 83       	std	Y+4, r25	; 0x04
    22c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c4:	8d 81       	ldd	r24, Y+5	; 0x05
    22c6:	9e 81       	ldd	r25, Y+6	; 0x06
    22c8:	01 97       	sbiw	r24, 0x01	; 1
    22ca:	9e 83       	std	Y+6, r25	; 0x06
    22cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ce:	8d 81       	ldd	r24, Y+5	; 0x05
    22d0:	9e 81       	ldd	r25, Y+6	; 0x06
    22d2:	00 97       	sbiw	r24, 0x00	; 0
    22d4:	69 f7       	brne	.-38     	; 0x22b0 <main+0x438>
    22d6:	20 ce       	rjmp	.-960    	; 0x1f18 <main+0xa0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d8:	6f 81       	ldd	r22, Y+7	; 0x07
    22da:	78 85       	ldd	r23, Y+8	; 0x08
    22dc:	89 85       	ldd	r24, Y+9	; 0x09
    22de:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	9e 83       	std	Y+6, r25	; 0x06
    22ea:	8d 83       	std	Y+5, r24	; 0x05
    22ec:	8d 81       	ldd	r24, Y+5	; 0x05
    22ee:	9e 81       	ldd	r25, Y+6	; 0x06
    22f0:	9a 83       	std	Y+2, r25	; 0x02
    22f2:	89 83       	std	Y+1, r24	; 0x01
    22f4:	89 81       	ldd	r24, Y+1	; 0x01
    22f6:	9a 81       	ldd	r25, Y+2	; 0x02
    22f8:	01 97       	sbiw	r24, 0x01	; 1
    22fa:	f1 f7       	brne	.-4      	; 0x22f8 <main+0x480>
    22fc:	9a 83       	std	Y+2, r25	; 0x02
    22fe:	89 83       	std	Y+1, r24	; 0x01
    2300:	0b ce       	rjmp	.-1002   	; 0x1f18 <main+0xa0>

00002302 <func>:
	}

}

void func(u8 *PTR)
{
    2302:	0f 93       	push	r16
    2304:	1f 93       	push	r17
    2306:	df 93       	push	r29
    2308:	cf 93       	push	r28
    230a:	cd b7       	in	r28, 0x3d	; 61
    230c:	de b7       	in	r29, 0x3e	; 62
    230e:	c9 55       	subi	r28, 0x59	; 89
    2310:	d0 40       	sbci	r29, 0x00	; 0
    2312:	0f b6       	in	r0, 0x3f	; 63
    2314:	f8 94       	cli
    2316:	de bf       	out	0x3e, r29	; 62
    2318:	0f be       	out	0x3f, r0	; 63
    231a:	cd bf       	out	0x3d, r28	; 61
    231c:	fe 01       	movw	r30, r28
    231e:	e8 5a       	subi	r30, 0xA8	; 168
    2320:	ff 4f       	sbci	r31, 0xFF	; 255
    2322:	91 83       	std	Z+1, r25	; 0x01
    2324:	80 83       	st	Z, r24
	u8 copy_u8tries = 3;
    2326:	fe 01       	movw	r30, r28
    2328:	e3 5b       	subi	r30, 0xB3	; 179
    232a:	ff 4f       	sbci	r31, 0xFF	; 255
    232c:	83 e0       	ldi	r24, 0x03	; 3
    232e:	80 83       	st	Z, r24
    2330:	57 c1       	rjmp	.+686    	; 0x25e0 <func+0x2de>
	u8 pass[10];

	while(copy_u8tries)
	{
		CLCD_voidSetClear();
    2332:	0e 94 a2 09 	call	0x1344	; 0x1344 <CLCD_voidSetClear>

		CLCD_voidSendString("Enter Passward");
    2336:	85 eb       	ldi	r24, 0xB5	; 181
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	0e 94 c3 08 	call	0x1186	; 0x1186 <CLCD_voidSendString>
		CLCD_voidSetPos(1,0);
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	60 e0       	ldi	r22, 0x00	; 0
    2344:	70 e0       	ldi	r23, 0x00	; 0
    2346:	0e 94 43 09 	call	0x1286	; 0x1286 <CLCD_voidSetPos>
		CLCD_voidSendString("tries :");
    234a:	84 ec       	ldi	r24, 0xC4	; 196
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	0e 94 c3 08 	call	0x1186	; 0x1186 <CLCD_voidSendString>
		CLCD_voidSetPos(1,6);
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	66 e0       	ldi	r22, 0x06	; 6
    2358:	70 e0       	ldi	r23, 0x00	; 0
    235a:	0e 94 43 09 	call	0x1286	; 0x1286 <CLCD_voidSetPos>
		CLCD_voidSendNum(copy_u8tries);
    235e:	fe 01       	movw	r30, r28
    2360:	e3 5b       	subi	r30, 0xB3	; 179
    2362:	ff 4f       	sbci	r31, 0xFF	; 255
    2364:	80 81       	ld	r24, Z
    2366:	88 2f       	mov	r24, r24
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <CLCD_voidSendNum>

		USART_voidSendString("\r\nEnter Your Passward\r\n");
    236e:	8c ec       	ldi	r24, 0xCC	; 204
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <USART_voidSendString>
    2376:	fe 01       	movw	r30, r28
    2378:	ed 5b       	subi	r30, 0xBD	; 189
    237a:	ff 4f       	sbci	r31, 0xFF	; 255
    237c:	80 e0       	ldi	r24, 0x00	; 0
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	a8 ec       	ldi	r26, 0xC8	; 200
    2382:	b2 e4       	ldi	r27, 0x42	; 66
    2384:	80 83       	st	Z, r24
    2386:	91 83       	std	Z+1, r25	; 0x01
    2388:	a2 83       	std	Z+2, r26	; 0x02
    238a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    238c:	8e 01       	movw	r16, r28
    238e:	01 5c       	subi	r16, 0xC1	; 193
    2390:	1f 4f       	sbci	r17, 0xFF	; 255
    2392:	fe 01       	movw	r30, r28
    2394:	ed 5b       	subi	r30, 0xBD	; 189
    2396:	ff 4f       	sbci	r31, 0xFF	; 255
    2398:	60 81       	ld	r22, Z
    239a:	71 81       	ldd	r23, Z+1	; 0x01
    239c:	82 81       	ldd	r24, Z+2	; 0x02
    239e:	93 81       	ldd	r25, Z+3	; 0x03
    23a0:	20 e0       	ldi	r18, 0x00	; 0
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	4a ef       	ldi	r20, 0xFA	; 250
    23a6:	54 e4       	ldi	r21, 0x44	; 68
    23a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ac:	dc 01       	movw	r26, r24
    23ae:	cb 01       	movw	r24, r22
    23b0:	f8 01       	movw	r30, r16
    23b2:	80 83       	st	Z, r24
    23b4:	91 83       	std	Z+1, r25	; 0x01
    23b6:	a2 83       	std	Z+2, r26	; 0x02
    23b8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23ba:	fe 01       	movw	r30, r28
    23bc:	ff 96       	adiw	r30, 0x3f	; 63
    23be:	60 81       	ld	r22, Z
    23c0:	71 81       	ldd	r23, Z+1	; 0x01
    23c2:	82 81       	ldd	r24, Z+2	; 0x02
    23c4:	93 81       	ldd	r25, Z+3	; 0x03
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	40 e8       	ldi	r20, 0x80	; 128
    23cc:	5f e3       	ldi	r21, 0x3F	; 63
    23ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23d2:	88 23       	and	r24, r24
    23d4:	2c f4       	brge	.+10     	; 0x23e0 <func+0xde>
		__ticks = 1;
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	9e af       	std	Y+62, r25	; 0x3e
    23dc:	8d af       	std	Y+61, r24	; 0x3d
    23de:	46 c0       	rjmp	.+140    	; 0x246c <func+0x16a>
	else if (__tmp > 65535)
    23e0:	fe 01       	movw	r30, r28
    23e2:	ff 96       	adiw	r30, 0x3f	; 63
    23e4:	60 81       	ld	r22, Z
    23e6:	71 81       	ldd	r23, Z+1	; 0x01
    23e8:	82 81       	ldd	r24, Z+2	; 0x02
    23ea:	93 81       	ldd	r25, Z+3	; 0x03
    23ec:	20 e0       	ldi	r18, 0x00	; 0
    23ee:	3f ef       	ldi	r19, 0xFF	; 255
    23f0:	4f e7       	ldi	r20, 0x7F	; 127
    23f2:	57 e4       	ldi	r21, 0x47	; 71
    23f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23f8:	18 16       	cp	r1, r24
    23fa:	64 f5       	brge	.+88     	; 0x2454 <func+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23fc:	fe 01       	movw	r30, r28
    23fe:	ed 5b       	subi	r30, 0xBD	; 189
    2400:	ff 4f       	sbci	r31, 0xFF	; 255
    2402:	60 81       	ld	r22, Z
    2404:	71 81       	ldd	r23, Z+1	; 0x01
    2406:	82 81       	ldd	r24, Z+2	; 0x02
    2408:	93 81       	ldd	r25, Z+3	; 0x03
    240a:	20 e0       	ldi	r18, 0x00	; 0
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	40 e2       	ldi	r20, 0x20	; 32
    2410:	51 e4       	ldi	r21, 0x41	; 65
    2412:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2416:	dc 01       	movw	r26, r24
    2418:	cb 01       	movw	r24, r22
    241a:	bc 01       	movw	r22, r24
    241c:	cd 01       	movw	r24, r26
    241e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2422:	dc 01       	movw	r26, r24
    2424:	cb 01       	movw	r24, r22
    2426:	9e af       	std	Y+62, r25	; 0x3e
    2428:	8d af       	std	Y+61, r24	; 0x3d
    242a:	0f c0       	rjmp	.+30     	; 0x244a <func+0x148>
    242c:	88 ec       	ldi	r24, 0xC8	; 200
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	9c af       	std	Y+60, r25	; 0x3c
    2432:	8b af       	std	Y+59, r24	; 0x3b
    2434:	8b ad       	ldd	r24, Y+59	; 0x3b
    2436:	9c ad       	ldd	r25, Y+60	; 0x3c
    2438:	01 97       	sbiw	r24, 0x01	; 1
    243a:	f1 f7       	brne	.-4      	; 0x2438 <func+0x136>
    243c:	9c af       	std	Y+60, r25	; 0x3c
    243e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2440:	8d ad       	ldd	r24, Y+61	; 0x3d
    2442:	9e ad       	ldd	r25, Y+62	; 0x3e
    2444:	01 97       	sbiw	r24, 0x01	; 1
    2446:	9e af       	std	Y+62, r25	; 0x3e
    2448:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    244a:	8d ad       	ldd	r24, Y+61	; 0x3d
    244c:	9e ad       	ldd	r25, Y+62	; 0x3e
    244e:	00 97       	sbiw	r24, 0x00	; 0
    2450:	69 f7       	brne	.-38     	; 0x242c <func+0x12a>
    2452:	16 c0       	rjmp	.+44     	; 0x2480 <func+0x17e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2454:	fe 01       	movw	r30, r28
    2456:	ff 96       	adiw	r30, 0x3f	; 63
    2458:	60 81       	ld	r22, Z
    245a:	71 81       	ldd	r23, Z+1	; 0x01
    245c:	82 81       	ldd	r24, Z+2	; 0x02
    245e:	93 81       	ldd	r25, Z+3	; 0x03
    2460:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2464:	dc 01       	movw	r26, r24
    2466:	cb 01       	movw	r24, r22
    2468:	9e af       	std	Y+62, r25	; 0x3e
    246a:	8d af       	std	Y+61, r24	; 0x3d
    246c:	8d ad       	ldd	r24, Y+61	; 0x3d
    246e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2470:	9a af       	std	Y+58, r25	; 0x3a
    2472:	89 af       	std	Y+57, r24	; 0x39
    2474:	89 ad       	ldd	r24, Y+57	; 0x39
    2476:	9a ad       	ldd	r25, Y+58	; 0x3a
    2478:	01 97       	sbiw	r24, 0x01	; 1
    247a:	f1 f7       	brne	.-4      	; 0x2478 <func+0x176>
    247c:	9a af       	std	Y+58, r25	; 0x3a
    247e:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(100);

		USART_voidReceiveString(pass);
    2480:	ce 01       	movw	r24, r28
    2482:	82 5b       	subi	r24, 0xB2	; 178
    2484:	9f 4f       	sbci	r25, 0xFF	; 255
    2486:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <USART_voidReceiveString>



		if(Compare_string(pass,PTR))
    248a:	ce 01       	movw	r24, r28
    248c:	82 5b       	subi	r24, 0xB2	; 178
    248e:	9f 4f       	sbci	r25, 0xFF	; 255
    2490:	fe 01       	movw	r30, r28
    2492:	e8 5a       	subi	r30, 0xA8	; 168
    2494:	ff 4f       	sbci	r31, 0xFF	; 255
    2496:	20 81       	ld	r18, Z
    2498:	31 81       	ldd	r19, Z+1	; 0x01
    249a:	b9 01       	movw	r22, r18
    249c:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <Compare_string>
    24a0:	88 23       	and	r24, r24
    24a2:	71 f0       	breq	.+28     	; 0x24c0 <func+0x1be>
		{
			flag = 1;
    24a4:	81 e0       	ldi	r24, 0x01	; 1
    24a6:	80 93 24 03 	sts	0x0324, r24

			CLCD_voidSetClear();
    24aa:	0e 94 a2 09 	call	0x1344	; 0x1344 <CLCD_voidSetClear>
			CLCD_voidSendString("welcome");
    24ae:	84 ee       	ldi	r24, 0xE4	; 228
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	0e 94 c3 08 	call	0x1186	; 0x1186 <CLCD_voidSendString>
			USART_voidSendString("\r\nwelcome\r\n");
    24b6:	8c ee       	ldi	r24, 0xEC	; 236
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <USART_voidSendString>
    24be:	22 c3       	rjmp	.+1604   	; 0x2b04 <func+0x802>
		}
		else
		{


			copy_u8tries--;
    24c0:	de 01       	movw	r26, r28
    24c2:	a3 5b       	subi	r26, 0xB3	; 179
    24c4:	bf 4f       	sbci	r27, 0xFF	; 255
    24c6:	fe 01       	movw	r30, r28
    24c8:	e3 5b       	subi	r30, 0xB3	; 179
    24ca:	ff 4f       	sbci	r31, 0xFF	; 255
    24cc:	80 81       	ld	r24, Z
    24ce:	81 50       	subi	r24, 0x01	; 1
    24d0:	8c 93       	st	X, r24
			if(copy_u8tries == 0)
    24d2:	fe 01       	movw	r30, r28
    24d4:	e3 5b       	subi	r30, 0xB3	; 179
    24d6:	ff 4f       	sbci	r31, 0xFF	; 255
    24d8:	80 81       	ld	r24, Z
    24da:	88 23       	and	r24, r24
    24dc:	49 f4       	brne	.+18     	; 0x24f0 <func+0x1ee>
			{
				CLCD_voidSetClear();
    24de:	0e 94 a2 09 	call	0x1344	; 0x1344 <CLCD_voidSetClear>
				CLCD_voidSendString("ALARM");
    24e2:	88 ef       	ldi	r24, 0xF8	; 248
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	0e 94 c3 08 	call	0x1186	; 0x1186 <CLCD_voidSendString>
				while(1)
				{
					Alarm();
    24ea:	0e 94 93 15 	call	0x2b26	; 0x2b26 <Alarm>
    24ee:	fd cf       	rjmp	.-6      	; 0x24ea <func+0x1e8>

				}
			}
			else
			{
				CLCD_voidSetClear();
    24f0:	0e 94 a2 09 	call	0x1344	; 0x1344 <CLCD_voidSetClear>
				CLCD_voidSendString("wrong password");
    24f4:	8e ef       	ldi	r24, 0xFE	; 254
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	0e 94 c3 08 	call	0x1186	; 0x1186 <CLCD_voidSendString>
    24fc:	80 e0       	ldi	r24, 0x00	; 0
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	aa ef       	ldi	r26, 0xFA	; 250
    2502:	b3 e4       	ldi	r27, 0x43	; 67
    2504:	8d ab       	std	Y+53, r24	; 0x35
    2506:	9e ab       	std	Y+54, r25	; 0x36
    2508:	af ab       	std	Y+55, r26	; 0x37
    250a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    250c:	6d a9       	ldd	r22, Y+53	; 0x35
    250e:	7e a9       	ldd	r23, Y+54	; 0x36
    2510:	8f a9       	ldd	r24, Y+55	; 0x37
    2512:	98 ad       	ldd	r25, Y+56	; 0x38
    2514:	20 e0       	ldi	r18, 0x00	; 0
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	4a ef       	ldi	r20, 0xFA	; 250
    251a:	54 e4       	ldi	r21, 0x44	; 68
    251c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2520:	dc 01       	movw	r26, r24
    2522:	cb 01       	movw	r24, r22
    2524:	89 ab       	std	Y+49, r24	; 0x31
    2526:	9a ab       	std	Y+50, r25	; 0x32
    2528:	ab ab       	std	Y+51, r26	; 0x33
    252a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    252c:	69 a9       	ldd	r22, Y+49	; 0x31
    252e:	7a a9       	ldd	r23, Y+50	; 0x32
    2530:	8b a9       	ldd	r24, Y+51	; 0x33
    2532:	9c a9       	ldd	r25, Y+52	; 0x34
    2534:	20 e0       	ldi	r18, 0x00	; 0
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	40 e8       	ldi	r20, 0x80	; 128
    253a:	5f e3       	ldi	r21, 0x3F	; 63
    253c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2540:	88 23       	and	r24, r24
    2542:	2c f4       	brge	.+10     	; 0x254e <func+0x24c>
		__ticks = 1;
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	98 ab       	std	Y+48, r25	; 0x30
    254a:	8f a7       	std	Y+47, r24	; 0x2f
    254c:	3f c0       	rjmp	.+126    	; 0x25cc <func+0x2ca>
	else if (__tmp > 65535)
    254e:	69 a9       	ldd	r22, Y+49	; 0x31
    2550:	7a a9       	ldd	r23, Y+50	; 0x32
    2552:	8b a9       	ldd	r24, Y+51	; 0x33
    2554:	9c a9       	ldd	r25, Y+52	; 0x34
    2556:	20 e0       	ldi	r18, 0x00	; 0
    2558:	3f ef       	ldi	r19, 0xFF	; 255
    255a:	4f e7       	ldi	r20, 0x7F	; 127
    255c:	57 e4       	ldi	r21, 0x47	; 71
    255e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2562:	18 16       	cp	r1, r24
    2564:	4c f5       	brge	.+82     	; 0x25b8 <func+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2566:	6d a9       	ldd	r22, Y+53	; 0x35
    2568:	7e a9       	ldd	r23, Y+54	; 0x36
    256a:	8f a9       	ldd	r24, Y+55	; 0x37
    256c:	98 ad       	ldd	r25, Y+56	; 0x38
    256e:	20 e0       	ldi	r18, 0x00	; 0
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	40 e2       	ldi	r20, 0x20	; 32
    2574:	51 e4       	ldi	r21, 0x41	; 65
    2576:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    257a:	dc 01       	movw	r26, r24
    257c:	cb 01       	movw	r24, r22
    257e:	bc 01       	movw	r22, r24
    2580:	cd 01       	movw	r24, r26
    2582:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2586:	dc 01       	movw	r26, r24
    2588:	cb 01       	movw	r24, r22
    258a:	98 ab       	std	Y+48, r25	; 0x30
    258c:	8f a7       	std	Y+47, r24	; 0x2f
    258e:	0f c0       	rjmp	.+30     	; 0x25ae <func+0x2ac>
    2590:	88 ec       	ldi	r24, 0xC8	; 200
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	9e a7       	std	Y+46, r25	; 0x2e
    2596:	8d a7       	std	Y+45, r24	; 0x2d
    2598:	8d a5       	ldd	r24, Y+45	; 0x2d
    259a:	9e a5       	ldd	r25, Y+46	; 0x2e
    259c:	01 97       	sbiw	r24, 0x01	; 1
    259e:	f1 f7       	brne	.-4      	; 0x259c <func+0x29a>
    25a0:	9e a7       	std	Y+46, r25	; 0x2e
    25a2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    25a6:	98 a9       	ldd	r25, Y+48	; 0x30
    25a8:	01 97       	sbiw	r24, 0x01	; 1
    25aa:	98 ab       	std	Y+48, r25	; 0x30
    25ac:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    25b0:	98 a9       	ldd	r25, Y+48	; 0x30
    25b2:	00 97       	sbiw	r24, 0x00	; 0
    25b4:	69 f7       	brne	.-38     	; 0x2590 <func+0x28e>
    25b6:	14 c0       	rjmp	.+40     	; 0x25e0 <func+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25b8:	69 a9       	ldd	r22, Y+49	; 0x31
    25ba:	7a a9       	ldd	r23, Y+50	; 0x32
    25bc:	8b a9       	ldd	r24, Y+51	; 0x33
    25be:	9c a9       	ldd	r25, Y+52	; 0x34
    25c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c4:	dc 01       	movw	r26, r24
    25c6:	cb 01       	movw	r24, r22
    25c8:	98 ab       	std	Y+48, r25	; 0x30
    25ca:	8f a7       	std	Y+47, r24	; 0x2f
    25cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    25ce:	98 a9       	ldd	r25, Y+48	; 0x30
    25d0:	9c a7       	std	Y+44, r25	; 0x2c
    25d2:	8b a7       	std	Y+43, r24	; 0x2b
    25d4:	8b a5       	ldd	r24, Y+43	; 0x2b
    25d6:	9c a5       	ldd	r25, Y+44	; 0x2c
    25d8:	01 97       	sbiw	r24, 0x01	; 1
    25da:	f1 f7       	brne	.-4      	; 0x25d8 <func+0x2d6>
    25dc:	9c a7       	std	Y+44, r25	; 0x2c
    25de:	8b a7       	std	Y+43, r24	; 0x2b
void func(u8 *PTR)
{
	u8 copy_u8tries = 3;
	u8 pass[10];

	while(copy_u8tries)
    25e0:	fe 01       	movw	r30, r28
    25e2:	e3 5b       	subi	r30, 0xB3	; 179
    25e4:	ff 4f       	sbci	r31, 0xFF	; 255
    25e6:	80 81       	ld	r24, Z
    25e8:	88 23       	and	r24, r24
    25ea:	09 f0       	breq	.+2      	; 0x25ee <func+0x2ec>
    25ec:	a2 ce       	rjmp	.-700    	; 0x2332 <func+0x30>
    25ee:	8a c2       	rjmp	.+1300   	; 0x2b04 <func+0x802>

	}
	while(flag)
	{

		u8 Local_u8choise =0;
    25f0:	fe 01       	movw	r30, r28
    25f2:	e4 5b       	subi	r30, 0xB4	; 180
    25f4:	ff 4f       	sbci	r31, 0xFF	; 255
    25f6:	10 82       	st	Z, r1
		u8 Local_u8Data = 0;
    25f8:	fe 01       	movw	r30, r28
    25fa:	e5 5b       	subi	r30, 0xB5	; 181
    25fc:	ff 4f       	sbci	r31, 0xFF	; 255
    25fe:	10 82       	st	Z, r1
		USART_voidSendString("\r\nchoose:\r\n");
    2600:	8d e0       	ldi	r24, 0x0D	; 13
    2602:	91 e0       	ldi	r25, 0x01	; 1
    2604:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <USART_voidSendString>
		USART_voidSendString("1 for open the door");
    2608:	89 e1       	ldi	r24, 0x19	; 25
    260a:	91 e0       	ldi	r25, 0x01	; 1
    260c:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <USART_voidSendString>
		USART_voidSendString("\r\n");
    2610:	8d e2       	ldi	r24, 0x2D	; 45
    2612:	91 e0       	ldi	r25, 0x01	; 1
    2614:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <USART_voidSendString>

		USART_voidSendString("2 for close the door");
    2618:	80 e3       	ldi	r24, 0x30	; 48
    261a:	91 e0       	ldi	r25, 0x01	; 1
    261c:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <USART_voidSendString>
		USART_voidSendString("\r\n");
    2620:	8d e2       	ldi	r24, 0x2D	; 45
    2622:	91 e0       	ldi	r25, 0x01	; 1
    2624:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <USART_voidSendString>

		USART_voidSendString("3 for open the light");
    2628:	85 e4       	ldi	r24, 0x45	; 69
    262a:	91 e0       	ldi	r25, 0x01	; 1
    262c:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <USART_voidSendString>
		USART_voidSendString("\r\n");
    2630:	8d e2       	ldi	r24, 0x2D	; 45
    2632:	91 e0       	ldi	r25, 0x01	; 1
    2634:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <USART_voidSendString>

		USART_voidSendString("4 for close the light");
    2638:	8a e5       	ldi	r24, 0x5A	; 90
    263a:	91 e0       	ldi	r25, 0x01	; 1
    263c:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <USART_voidSendString>
		USART_voidSendString("\r\n");
    2640:	8d e2       	ldi	r24, 0x2D	; 45
    2642:	91 e0       	ldi	r25, 0x01	; 1
    2644:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <USART_voidSendString>

		USART_voidSendString("5 for open the fan");
    2648:	80 e7       	ldi	r24, 0x70	; 112
    264a:	91 e0       	ldi	r25, 0x01	; 1
    264c:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <USART_voidSendString>
		USART_voidSendString("\r\n");
    2650:	8d e2       	ldi	r24, 0x2D	; 45
    2652:	91 e0       	ldi	r25, 0x01	; 1
    2654:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <USART_voidSendString>

		USART_voidSendString("6 for close the fan");
    2658:	83 e8       	ldi	r24, 0x83	; 131
    265a:	91 e0       	ldi	r25, 0x01	; 1
    265c:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <USART_voidSendString>
		USART_voidSendString("\r\n");
    2660:	8d e2       	ldi	r24, 0x2D	; 45
    2662:	91 e0       	ldi	r25, 0x01	; 1
    2664:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <USART_voidSendString>

		USART_voidSendString("7 for adjust brightness");
    2668:	87 e9       	ldi	r24, 0x97	; 151
    266a:	91 e0       	ldi	r25, 0x01	; 1
    266c:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <USART_voidSendString>
		USART_voidSendString("\r\n");
    2670:	8d e2       	ldi	r24, 0x2D	; 45
    2672:	91 e0       	ldi	r25, 0x01	; 1
    2674:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <USART_voidSendString>

		USART_voidSendString("8 for adjust fan speed");
    2678:	8f ea       	ldi	r24, 0xAF	; 175
    267a:	91 e0       	ldi	r25, 0x01	; 1
    267c:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <USART_voidSendString>
		USART_voidSendString("\r\n");
    2680:	8d e2       	ldi	r24, 0x2D	; 45
    2682:	91 e0       	ldi	r25, 0x01	; 1
    2684:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <USART_voidSendString>

		CLCD_voidSetClear();
    2688:	0e 94 a2 09 	call	0x1344	; 0x1344 <CLCD_voidSetClear>
		CLCD_voidSendString("choose:1or2or3");
    268c:	86 ec       	ldi	r24, 0xC6	; 198
    268e:	91 e0       	ldi	r25, 0x01	; 1
    2690:	0e 94 c3 08 	call	0x1186	; 0x1186 <CLCD_voidSendString>
		CLCD_voidSetPos(1,0);
    2694:	81 e0       	ldi	r24, 0x01	; 1
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	60 e0       	ldi	r22, 0x00	; 0
    269a:	70 e0       	ldi	r23, 0x00	; 0
    269c:	0e 94 43 09 	call	0x1286	; 0x1286 <CLCD_voidSetPos>
		CLCD_voidSendString("4or5or6or7or8");
    26a0:	85 ed       	ldi	r24, 0xD5	; 213
    26a2:	91 e0       	ldi	r25, 0x01	; 1
    26a4:	0e 94 c3 08 	call	0x1186	; 0x1186 <CLCD_voidSendString>
		Local_u8choise = USART_voidRecieveByte();
    26a8:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <USART_voidRecieveByte>
    26ac:	fe 01       	movw	r30, r28
    26ae:	e4 5b       	subi	r30, 0xB4	; 180
    26b0:	ff 4f       	sbci	r31, 0xFF	; 255
    26b2:	80 83       	st	Z, r24
		if(Local_u8choise == '1' )
    26b4:	fe 01       	movw	r30, r28
    26b6:	e4 5b       	subi	r30, 0xB4	; 180
    26b8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ba:	80 81       	ld	r24, Z
    26bc:	81 33       	cpi	r24, 0x31	; 49
    26be:	09 f0       	breq	.+2      	; 0x26c2 <func+0x3c0>
    26c0:	9e c0       	rjmp	.+316    	; 0x27fe <func+0x4fc>
		{
			CLCD_voidSetClear();
    26c2:	0e 94 a2 09 	call	0x1344	; 0x1344 <CLCD_voidSetClear>
			CLCD_voidSendString("The door opened");
    26c6:	83 ee       	ldi	r24, 0xE3	; 227
    26c8:	91 e0       	ldi	r25, 0x01	; 1
    26ca:	0e 94 c3 08 	call	0x1186	; 0x1186 <CLCD_voidSendString>
			for(u16 j= 750;j<1500;j++)
    26ce:	fe 01       	movw	r30, r28
    26d0:	e7 5b       	subi	r30, 0xB7	; 183
    26d2:	ff 4f       	sbci	r31, 0xFF	; 255
    26d4:	8e ee       	ldi	r24, 0xEE	; 238
    26d6:	92 e0       	ldi	r25, 0x02	; 2
    26d8:	91 83       	std	Z+1, r25	; 0x01
    26da:	80 83       	st	Z, r24
    26dc:	85 c0       	rjmp	.+266    	; 0x27e8 <func+0x4e6>
			{


				TIMER1_voidSetOcrValue(j);
    26de:	fe 01       	movw	r30, r28
    26e0:	e7 5b       	subi	r30, 0xB7	; 183
    26e2:	ff 4f       	sbci	r31, 0xFF	; 255
    26e4:	80 81       	ld	r24, Z
    26e6:	91 81       	ldd	r25, Z+1	; 0x01
    26e8:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <TIMER1_voidSetOcrValue>
    26ec:	80 e0       	ldi	r24, 0x00	; 0
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	a0 e8       	ldi	r26, 0x80	; 128
    26f2:	bf e3       	ldi	r27, 0x3F	; 63
    26f4:	8f a3       	std	Y+39, r24	; 0x27
    26f6:	98 a7       	std	Y+40, r25	; 0x28
    26f8:	a9 a7       	std	Y+41, r26	; 0x29
    26fa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26fc:	6f a1       	ldd	r22, Y+39	; 0x27
    26fe:	78 a5       	ldd	r23, Y+40	; 0x28
    2700:	89 a5       	ldd	r24, Y+41	; 0x29
    2702:	9a a5       	ldd	r25, Y+42	; 0x2a
    2704:	20 e0       	ldi	r18, 0x00	; 0
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	4a ef       	ldi	r20, 0xFA	; 250
    270a:	54 e4       	ldi	r21, 0x44	; 68
    270c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2710:	dc 01       	movw	r26, r24
    2712:	cb 01       	movw	r24, r22
    2714:	8b a3       	std	Y+35, r24	; 0x23
    2716:	9c a3       	std	Y+36, r25	; 0x24
    2718:	ad a3       	std	Y+37, r26	; 0x25
    271a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    271c:	6b a1       	ldd	r22, Y+35	; 0x23
    271e:	7c a1       	ldd	r23, Y+36	; 0x24
    2720:	8d a1       	ldd	r24, Y+37	; 0x25
    2722:	9e a1       	ldd	r25, Y+38	; 0x26
    2724:	20 e0       	ldi	r18, 0x00	; 0
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	40 e8       	ldi	r20, 0x80	; 128
    272a:	5f e3       	ldi	r21, 0x3F	; 63
    272c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2730:	88 23       	and	r24, r24
    2732:	2c f4       	brge	.+10     	; 0x273e <func+0x43c>
		__ticks = 1;
    2734:	81 e0       	ldi	r24, 0x01	; 1
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	9a a3       	std	Y+34, r25	; 0x22
    273a:	89 a3       	std	Y+33, r24	; 0x21
    273c:	3f c0       	rjmp	.+126    	; 0x27bc <func+0x4ba>
	else if (__tmp > 65535)
    273e:	6b a1       	ldd	r22, Y+35	; 0x23
    2740:	7c a1       	ldd	r23, Y+36	; 0x24
    2742:	8d a1       	ldd	r24, Y+37	; 0x25
    2744:	9e a1       	ldd	r25, Y+38	; 0x26
    2746:	20 e0       	ldi	r18, 0x00	; 0
    2748:	3f ef       	ldi	r19, 0xFF	; 255
    274a:	4f e7       	ldi	r20, 0x7F	; 127
    274c:	57 e4       	ldi	r21, 0x47	; 71
    274e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2752:	18 16       	cp	r1, r24
    2754:	4c f5       	brge	.+82     	; 0x27a8 <func+0x4a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2756:	6f a1       	ldd	r22, Y+39	; 0x27
    2758:	78 a5       	ldd	r23, Y+40	; 0x28
    275a:	89 a5       	ldd	r24, Y+41	; 0x29
    275c:	9a a5       	ldd	r25, Y+42	; 0x2a
    275e:	20 e0       	ldi	r18, 0x00	; 0
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	40 e2       	ldi	r20, 0x20	; 32
    2764:	51 e4       	ldi	r21, 0x41	; 65
    2766:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276a:	dc 01       	movw	r26, r24
    276c:	cb 01       	movw	r24, r22
    276e:	bc 01       	movw	r22, r24
    2770:	cd 01       	movw	r24, r26
    2772:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2776:	dc 01       	movw	r26, r24
    2778:	cb 01       	movw	r24, r22
    277a:	9a a3       	std	Y+34, r25	; 0x22
    277c:	89 a3       	std	Y+33, r24	; 0x21
    277e:	0f c0       	rjmp	.+30     	; 0x279e <func+0x49c>
    2780:	88 ec       	ldi	r24, 0xC8	; 200
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	98 a3       	std	Y+32, r25	; 0x20
    2786:	8f 8f       	std	Y+31, r24	; 0x1f
    2788:	8f 8d       	ldd	r24, Y+31	; 0x1f
    278a:	98 a1       	ldd	r25, Y+32	; 0x20
    278c:	01 97       	sbiw	r24, 0x01	; 1
    278e:	f1 f7       	brne	.-4      	; 0x278c <func+0x48a>
    2790:	98 a3       	std	Y+32, r25	; 0x20
    2792:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2794:	89 a1       	ldd	r24, Y+33	; 0x21
    2796:	9a a1       	ldd	r25, Y+34	; 0x22
    2798:	01 97       	sbiw	r24, 0x01	; 1
    279a:	9a a3       	std	Y+34, r25	; 0x22
    279c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    279e:	89 a1       	ldd	r24, Y+33	; 0x21
    27a0:	9a a1       	ldd	r25, Y+34	; 0x22
    27a2:	00 97       	sbiw	r24, 0x00	; 0
    27a4:	69 f7       	brne	.-38     	; 0x2780 <func+0x47e>
    27a6:	14 c0       	rjmp	.+40     	; 0x27d0 <func+0x4ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27a8:	6b a1       	ldd	r22, Y+35	; 0x23
    27aa:	7c a1       	ldd	r23, Y+36	; 0x24
    27ac:	8d a1       	ldd	r24, Y+37	; 0x25
    27ae:	9e a1       	ldd	r25, Y+38	; 0x26
    27b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b4:	dc 01       	movw	r26, r24
    27b6:	cb 01       	movw	r24, r22
    27b8:	9a a3       	std	Y+34, r25	; 0x22
    27ba:	89 a3       	std	Y+33, r24	; 0x21
    27bc:	89 a1       	ldd	r24, Y+33	; 0x21
    27be:	9a a1       	ldd	r25, Y+34	; 0x22
    27c0:	9e 8f       	std	Y+30, r25	; 0x1e
    27c2:	8d 8f       	std	Y+29, r24	; 0x1d
    27c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27c8:	01 97       	sbiw	r24, 0x01	; 1
    27ca:	f1 f7       	brne	.-4      	; 0x27c8 <func+0x4c6>
    27cc:	9e 8f       	std	Y+30, r25	; 0x1e
    27ce:	8d 8f       	std	Y+29, r24	; 0x1d
		Local_u8choise = USART_voidRecieveByte();
		if(Local_u8choise == '1' )
		{
			CLCD_voidSetClear();
			CLCD_voidSendString("The door opened");
			for(u16 j= 750;j<1500;j++)
    27d0:	de 01       	movw	r26, r28
    27d2:	a7 5b       	subi	r26, 0xB7	; 183
    27d4:	bf 4f       	sbci	r27, 0xFF	; 255
    27d6:	fe 01       	movw	r30, r28
    27d8:	e7 5b       	subi	r30, 0xB7	; 183
    27da:	ff 4f       	sbci	r31, 0xFF	; 255
    27dc:	80 81       	ld	r24, Z
    27de:	91 81       	ldd	r25, Z+1	; 0x01
    27e0:	01 96       	adiw	r24, 0x01	; 1
    27e2:	11 96       	adiw	r26, 0x01	; 1
    27e4:	9c 93       	st	X, r25
    27e6:	8e 93       	st	-X, r24
    27e8:	fe 01       	movw	r30, r28
    27ea:	e7 5b       	subi	r30, 0xB7	; 183
    27ec:	ff 4f       	sbci	r31, 0xFF	; 255
    27ee:	80 81       	ld	r24, Z
    27f0:	91 81       	ldd	r25, Z+1	; 0x01
    27f2:	f5 e0       	ldi	r31, 0x05	; 5
    27f4:	8c 3d       	cpi	r24, 0xDC	; 220
    27f6:	9f 07       	cpc	r25, r31
    27f8:	08 f4       	brcc	.+2      	; 0x27fc <func+0x4fa>
    27fa:	71 cf       	rjmp	.-286    	; 0x26de <func+0x3dc>
    27fc:	83 c1       	rjmp	.+774    	; 0x2b04 <func+0x802>
				_delay_ms(1);
			}


		}
		else if(Local_u8choise =='2' )
    27fe:	fe 01       	movw	r30, r28
    2800:	e4 5b       	subi	r30, 0xB4	; 180
    2802:	ff 4f       	sbci	r31, 0xFF	; 255
    2804:	80 81       	ld	r24, Z
    2806:	82 33       	cpi	r24, 0x32	; 50
    2808:	09 f0       	breq	.+2      	; 0x280c <func+0x50a>
    280a:	9e c0       	rjmp	.+316    	; 0x2948 <func+0x646>
		{
			CLCD_voidSetClear();
    280c:	0e 94 a2 09 	call	0x1344	; 0x1344 <CLCD_voidSetClear>
			CLCD_voidSendString("The door closed");
    2810:	83 ef       	ldi	r24, 0xF3	; 243
    2812:	91 e0       	ldi	r25, 0x01	; 1
    2814:	0e 94 c3 08 	call	0x1186	; 0x1186 <CLCD_voidSendString>
			for(u16 j= 1500;j>750;j--)
    2818:	fe 01       	movw	r30, r28
    281a:	e9 5b       	subi	r30, 0xB9	; 185
    281c:	ff 4f       	sbci	r31, 0xFF	; 255
    281e:	8c ed       	ldi	r24, 0xDC	; 220
    2820:	95 e0       	ldi	r25, 0x05	; 5
    2822:	91 83       	std	Z+1, r25	; 0x01
    2824:	80 83       	st	Z, r24
    2826:	85 c0       	rjmp	.+266    	; 0x2932 <func+0x630>
			{


				TIMER1_voidSetOcrValue(j);
    2828:	fe 01       	movw	r30, r28
    282a:	e9 5b       	subi	r30, 0xB9	; 185
    282c:	ff 4f       	sbci	r31, 0xFF	; 255
    282e:	80 81       	ld	r24, Z
    2830:	91 81       	ldd	r25, Z+1	; 0x01
    2832:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <TIMER1_voidSetOcrValue>
    2836:	80 e0       	ldi	r24, 0x00	; 0
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	a0 e8       	ldi	r26, 0x80	; 128
    283c:	bf e3       	ldi	r27, 0x3F	; 63
    283e:	89 8f       	std	Y+25, r24	; 0x19
    2840:	9a 8f       	std	Y+26, r25	; 0x1a
    2842:	ab 8f       	std	Y+27, r26	; 0x1b
    2844:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2846:	69 8d       	ldd	r22, Y+25	; 0x19
    2848:	7a 8d       	ldd	r23, Y+26	; 0x1a
    284a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    284c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    284e:	20 e0       	ldi	r18, 0x00	; 0
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	4a ef       	ldi	r20, 0xFA	; 250
    2854:	54 e4       	ldi	r21, 0x44	; 68
    2856:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    285a:	dc 01       	movw	r26, r24
    285c:	cb 01       	movw	r24, r22
    285e:	8d 8b       	std	Y+21, r24	; 0x15
    2860:	9e 8b       	std	Y+22, r25	; 0x16
    2862:	af 8b       	std	Y+23, r26	; 0x17
    2864:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2866:	6d 89       	ldd	r22, Y+21	; 0x15
    2868:	7e 89       	ldd	r23, Y+22	; 0x16
    286a:	8f 89       	ldd	r24, Y+23	; 0x17
    286c:	98 8d       	ldd	r25, Y+24	; 0x18
    286e:	20 e0       	ldi	r18, 0x00	; 0
    2870:	30 e0       	ldi	r19, 0x00	; 0
    2872:	40 e8       	ldi	r20, 0x80	; 128
    2874:	5f e3       	ldi	r21, 0x3F	; 63
    2876:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    287a:	88 23       	and	r24, r24
    287c:	2c f4       	brge	.+10     	; 0x2888 <func+0x586>
		__ticks = 1;
    287e:	81 e0       	ldi	r24, 0x01	; 1
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	9c 8b       	std	Y+20, r25	; 0x14
    2884:	8b 8b       	std	Y+19, r24	; 0x13
    2886:	3f c0       	rjmp	.+126    	; 0x2906 <func+0x604>
	else if (__tmp > 65535)
    2888:	6d 89       	ldd	r22, Y+21	; 0x15
    288a:	7e 89       	ldd	r23, Y+22	; 0x16
    288c:	8f 89       	ldd	r24, Y+23	; 0x17
    288e:	98 8d       	ldd	r25, Y+24	; 0x18
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	3f ef       	ldi	r19, 0xFF	; 255
    2894:	4f e7       	ldi	r20, 0x7F	; 127
    2896:	57 e4       	ldi	r21, 0x47	; 71
    2898:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    289c:	18 16       	cp	r1, r24
    289e:	4c f5       	brge	.+82     	; 0x28f2 <func+0x5f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28a0:	69 8d       	ldd	r22, Y+25	; 0x19
    28a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28a8:	20 e0       	ldi	r18, 0x00	; 0
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	40 e2       	ldi	r20, 0x20	; 32
    28ae:	51 e4       	ldi	r21, 0x41	; 65
    28b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b4:	dc 01       	movw	r26, r24
    28b6:	cb 01       	movw	r24, r22
    28b8:	bc 01       	movw	r22, r24
    28ba:	cd 01       	movw	r24, r26
    28bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28c0:	dc 01       	movw	r26, r24
    28c2:	cb 01       	movw	r24, r22
    28c4:	9c 8b       	std	Y+20, r25	; 0x14
    28c6:	8b 8b       	std	Y+19, r24	; 0x13
    28c8:	0f c0       	rjmp	.+30     	; 0x28e8 <func+0x5e6>
    28ca:	88 ec       	ldi	r24, 0xC8	; 200
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	9a 8b       	std	Y+18, r25	; 0x12
    28d0:	89 8b       	std	Y+17, r24	; 0x11
    28d2:	89 89       	ldd	r24, Y+17	; 0x11
    28d4:	9a 89       	ldd	r25, Y+18	; 0x12
    28d6:	01 97       	sbiw	r24, 0x01	; 1
    28d8:	f1 f7       	brne	.-4      	; 0x28d6 <func+0x5d4>
    28da:	9a 8b       	std	Y+18, r25	; 0x12
    28dc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28de:	8b 89       	ldd	r24, Y+19	; 0x13
    28e0:	9c 89       	ldd	r25, Y+20	; 0x14
    28e2:	01 97       	sbiw	r24, 0x01	; 1
    28e4:	9c 8b       	std	Y+20, r25	; 0x14
    28e6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28e8:	8b 89       	ldd	r24, Y+19	; 0x13
    28ea:	9c 89       	ldd	r25, Y+20	; 0x14
    28ec:	00 97       	sbiw	r24, 0x00	; 0
    28ee:	69 f7       	brne	.-38     	; 0x28ca <func+0x5c8>
    28f0:	14 c0       	rjmp	.+40     	; 0x291a <func+0x618>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28f2:	6d 89       	ldd	r22, Y+21	; 0x15
    28f4:	7e 89       	ldd	r23, Y+22	; 0x16
    28f6:	8f 89       	ldd	r24, Y+23	; 0x17
    28f8:	98 8d       	ldd	r25, Y+24	; 0x18
    28fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28fe:	dc 01       	movw	r26, r24
    2900:	cb 01       	movw	r24, r22
    2902:	9c 8b       	std	Y+20, r25	; 0x14
    2904:	8b 8b       	std	Y+19, r24	; 0x13
    2906:	8b 89       	ldd	r24, Y+19	; 0x13
    2908:	9c 89       	ldd	r25, Y+20	; 0x14
    290a:	98 8b       	std	Y+16, r25	; 0x10
    290c:	8f 87       	std	Y+15, r24	; 0x0f
    290e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2910:	98 89       	ldd	r25, Y+16	; 0x10
    2912:	01 97       	sbiw	r24, 0x01	; 1
    2914:	f1 f7       	brne	.-4      	; 0x2912 <func+0x610>
    2916:	98 8b       	std	Y+16, r25	; 0x10
    2918:	8f 87       	std	Y+15, r24	; 0x0f
		}
		else if(Local_u8choise =='2' )
		{
			CLCD_voidSetClear();
			CLCD_voidSendString("The door closed");
			for(u16 j= 1500;j>750;j--)
    291a:	de 01       	movw	r26, r28
    291c:	a9 5b       	subi	r26, 0xB9	; 185
    291e:	bf 4f       	sbci	r27, 0xFF	; 255
    2920:	fe 01       	movw	r30, r28
    2922:	e9 5b       	subi	r30, 0xB9	; 185
    2924:	ff 4f       	sbci	r31, 0xFF	; 255
    2926:	80 81       	ld	r24, Z
    2928:	91 81       	ldd	r25, Z+1	; 0x01
    292a:	01 97       	sbiw	r24, 0x01	; 1
    292c:	11 96       	adiw	r26, 0x01	; 1
    292e:	9c 93       	st	X, r25
    2930:	8e 93       	st	-X, r24
    2932:	fe 01       	movw	r30, r28
    2934:	e9 5b       	subi	r30, 0xB9	; 185
    2936:	ff 4f       	sbci	r31, 0xFF	; 255
    2938:	80 81       	ld	r24, Z
    293a:	91 81       	ldd	r25, Z+1	; 0x01
    293c:	22 e0       	ldi	r18, 0x02	; 2
    293e:	8f 3e       	cpi	r24, 0xEF	; 239
    2940:	92 07       	cpc	r25, r18
    2942:	08 f0       	brcs	.+2      	; 0x2946 <func+0x644>
    2944:	71 cf       	rjmp	.-286    	; 0x2828 <func+0x526>
    2946:	de c0       	rjmp	.+444    	; 0x2b04 <func+0x802>
				TIMER1_voidSetOcrValue(j);
				_delay_ms(1);
			}

		}
		else if(Local_u8choise == '3' )
    2948:	fe 01       	movw	r30, r28
    294a:	e4 5b       	subi	r30, 0xB4	; 180
    294c:	ff 4f       	sbci	r31, 0xFF	; 255
    294e:	80 81       	ld	r24, Z
    2950:	83 33       	cpi	r24, 0x33	; 51
    2952:	89 f4       	brne	.+34     	; 0x2976 <func+0x674>
		{
			CLCD_voidSetClear();
    2954:	0e 94 a2 09 	call	0x1344	; 0x1344 <CLCD_voidSetClear>
			CLCD_voidSendString("The light opened");
    2958:	83 e0       	ldi	r24, 0x03	; 3
    295a:	92 e0       	ldi	r25, 0x02	; 2
    295c:	0e 94 c3 08 	call	0x1186	; 0x1186 <CLCD_voidSendString>
			DIO_voidSetPinVal(PORTC_REG,PIN6,PIN_VAL_HIGH);
    2960:	83 e0       	ldi	r24, 0x03	; 3
    2962:	66 e0       	ldi	r22, 0x06	; 6
    2964:	41 e0       	ldi	r20, 0x01	; 1
    2966:	0e 94 47 0b 	call	0x168e	; 0x168e <DIO_voidSetPinVal>
			DIO_voidSetPinVal(PORTC_REG,PIN7,PIN_VAL_HIGH);
    296a:	83 e0       	ldi	r24, 0x03	; 3
    296c:	67 e0       	ldi	r22, 0x07	; 7
    296e:	41 e0       	ldi	r20, 0x01	; 1
    2970:	0e 94 47 0b 	call	0x168e	; 0x168e <DIO_voidSetPinVal>
    2974:	c7 c0       	rjmp	.+398    	; 0x2b04 <func+0x802>

		}
		else if(Local_u8choise == '4' )
    2976:	fe 01       	movw	r30, r28
    2978:	e4 5b       	subi	r30, 0xB4	; 180
    297a:	ff 4f       	sbci	r31, 0xFF	; 255
    297c:	80 81       	ld	r24, Z
    297e:	84 33       	cpi	r24, 0x34	; 52
    2980:	89 f4       	brne	.+34     	; 0x29a4 <func+0x6a2>
		{
			CLCD_voidSetClear();
    2982:	0e 94 a2 09 	call	0x1344	; 0x1344 <CLCD_voidSetClear>
			CLCD_voidSendString("The light closed");
    2986:	84 e1       	ldi	r24, 0x14	; 20
    2988:	92 e0       	ldi	r25, 0x02	; 2
    298a:	0e 94 c3 08 	call	0x1186	; 0x1186 <CLCD_voidSendString>
			DIO_voidSetPinVal(PORTC_REG,PIN6,PIN_VAL_LOW);
    298e:	83 e0       	ldi	r24, 0x03	; 3
    2990:	66 e0       	ldi	r22, 0x06	; 6
    2992:	40 e0       	ldi	r20, 0x00	; 0
    2994:	0e 94 47 0b 	call	0x168e	; 0x168e <DIO_voidSetPinVal>
			DIO_voidSetPinVal(PORTC_REG,PIN7,PIN_VAL_LOW);
    2998:	83 e0       	ldi	r24, 0x03	; 3
    299a:	67 e0       	ldi	r22, 0x07	; 7
    299c:	40 e0       	ldi	r20, 0x00	; 0
    299e:	0e 94 47 0b 	call	0x168e	; 0x168e <DIO_voidSetPinVal>
    29a2:	b0 c0       	rjmp	.+352    	; 0x2b04 <func+0x802>

		}
		else if(Local_u8choise == '5')
    29a4:	fe 01       	movw	r30, r28
    29a6:	e4 5b       	subi	r30, 0xB4	; 180
    29a8:	ff 4f       	sbci	r31, 0xFF	; 255
    29aa:	80 81       	ld	r24, Z
    29ac:	85 33       	cpi	r24, 0x35	; 53
    29ae:	61 f4       	brne	.+24     	; 0x29c8 <func+0x6c6>
		{
			CLCD_voidSetClear();
    29b0:	0e 94 a2 09 	call	0x1344	; 0x1344 <CLCD_voidSetClear>
			CLCD_voidSendString("The fan opened");
    29b4:	85 e2       	ldi	r24, 0x25	; 37
    29b6:	92 e0       	ldi	r25, 0x02	; 2
    29b8:	0e 94 c3 08 	call	0x1186	; 0x1186 <CLCD_voidSendString>
			DIO_voidSetPinVal(PORTC_REG,PIN4,PIN_VAL_HIGH);
    29bc:	83 e0       	ldi	r24, 0x03	; 3
    29be:	64 e0       	ldi	r22, 0x04	; 4
    29c0:	41 e0       	ldi	r20, 0x01	; 1
    29c2:	0e 94 47 0b 	call	0x168e	; 0x168e <DIO_voidSetPinVal>
    29c6:	9e c0       	rjmp	.+316    	; 0x2b04 <func+0x802>


		}
		else if(Local_u8choise == '6')
    29c8:	fe 01       	movw	r30, r28
    29ca:	e4 5b       	subi	r30, 0xB4	; 180
    29cc:	ff 4f       	sbci	r31, 0xFF	; 255
    29ce:	80 81       	ld	r24, Z
    29d0:	86 33       	cpi	r24, 0x36	; 54
    29d2:	61 f4       	brne	.+24     	; 0x29ec <func+0x6ea>
		{
			CLCD_voidSetClear();
    29d4:	0e 94 a2 09 	call	0x1344	; 0x1344 <CLCD_voidSetClear>
			CLCD_voidSendString("The fan closed");
    29d8:	84 e3       	ldi	r24, 0x34	; 52
    29da:	92 e0       	ldi	r25, 0x02	; 2
    29dc:	0e 94 c3 08 	call	0x1186	; 0x1186 <CLCD_voidSendString>
			DIO_voidSetPinVal(PORTC_REG,PIN4,PIN_VAL_LOW);
    29e0:	83 e0       	ldi	r24, 0x03	; 3
    29e2:	64 e0       	ldi	r22, 0x04	; 4
    29e4:	40 e0       	ldi	r20, 0x00	; 0
    29e6:	0e 94 47 0b 	call	0x168e	; 0x168e <DIO_voidSetPinVal>
    29ea:	8c c0       	rjmp	.+280    	; 0x2b04 <func+0x802>

		}
		else if(Local_u8choise == '7')
    29ec:	fe 01       	movw	r30, r28
    29ee:	e4 5b       	subi	r30, 0xB4	; 180
    29f0:	ff 4f       	sbci	r31, 0xFF	; 255
    29f2:	80 81       	ld	r24, Z
    29f4:	87 33       	cpi	r24, 0x37	; 55
    29f6:	21 f4       	brne	.+8      	; 0x2a00 <func+0x6fe>
		{

			SPI_u8Tranceive(1);
    29f8:	81 e0       	ldi	r24, 0x01	; 1
    29fa:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <SPI_u8Tranceive>
    29fe:	82 c0       	rjmp	.+260    	; 0x2b04 <func+0x802>


		}
		else if(Local_u8choise == '8')
    2a00:	fe 01       	movw	r30, r28
    2a02:	e4 5b       	subi	r30, 0xB4	; 180
    2a04:	ff 4f       	sbci	r31, 0xFF	; 255
    2a06:	80 81       	ld	r24, Z
    2a08:	88 33       	cpi	r24, 0x38	; 56
    2a0a:	21 f4       	brne	.+8      	; 0x2a14 <func+0x712>
		{

			SPI_u8Tranceive(2);
    2a0c:	82 e0       	ldi	r24, 0x02	; 2
    2a0e:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <SPI_u8Tranceive>
    2a12:	78 c0       	rjmp	.+240    	; 0x2b04 <func+0x802>

		}
		else
		{
			CLCD_voidSetClear();
    2a14:	0e 94 a2 09 	call	0x1344	; 0x1344 <CLCD_voidSetClear>
			CLCD_voidSendString("Wrong choise !!");
    2a18:	83 e4       	ldi	r24, 0x43	; 67
    2a1a:	92 e0       	ldi	r25, 0x02	; 2
    2a1c:	0e 94 c3 08 	call	0x1186	; 0x1186 <CLCD_voidSendString>
    2a20:	80 e0       	ldi	r24, 0x00	; 0
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	aa ef       	ldi	r26, 0xFA	; 250
    2a26:	b4 e4       	ldi	r27, 0x44	; 68
    2a28:	8b 87       	std	Y+11, r24	; 0x0b
    2a2a:	9c 87       	std	Y+12, r25	; 0x0c
    2a2c:	ad 87       	std	Y+13, r26	; 0x0d
    2a2e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a30:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a32:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a34:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a36:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a38:	20 e0       	ldi	r18, 0x00	; 0
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	4a ef       	ldi	r20, 0xFA	; 250
    2a3e:	54 e4       	ldi	r21, 0x44	; 68
    2a40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a44:	dc 01       	movw	r26, r24
    2a46:	cb 01       	movw	r24, r22
    2a48:	8f 83       	std	Y+7, r24	; 0x07
    2a4a:	98 87       	std	Y+8, r25	; 0x08
    2a4c:	a9 87       	std	Y+9, r26	; 0x09
    2a4e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a50:	6f 81       	ldd	r22, Y+7	; 0x07
    2a52:	78 85       	ldd	r23, Y+8	; 0x08
    2a54:	89 85       	ldd	r24, Y+9	; 0x09
    2a56:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a58:	20 e0       	ldi	r18, 0x00	; 0
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	40 e8       	ldi	r20, 0x80	; 128
    2a5e:	5f e3       	ldi	r21, 0x3F	; 63
    2a60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a64:	88 23       	and	r24, r24
    2a66:	2c f4       	brge	.+10     	; 0x2a72 <func+0x770>
		__ticks = 1;
    2a68:	81 e0       	ldi	r24, 0x01	; 1
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	9e 83       	std	Y+6, r25	; 0x06
    2a6e:	8d 83       	std	Y+5, r24	; 0x05
    2a70:	3f c0       	rjmp	.+126    	; 0x2af0 <func+0x7ee>
	else if (__tmp > 65535)
    2a72:	6f 81       	ldd	r22, Y+7	; 0x07
    2a74:	78 85       	ldd	r23, Y+8	; 0x08
    2a76:	89 85       	ldd	r24, Y+9	; 0x09
    2a78:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a7a:	20 e0       	ldi	r18, 0x00	; 0
    2a7c:	3f ef       	ldi	r19, 0xFF	; 255
    2a7e:	4f e7       	ldi	r20, 0x7F	; 127
    2a80:	57 e4       	ldi	r21, 0x47	; 71
    2a82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a86:	18 16       	cp	r1, r24
    2a88:	4c f5       	brge	.+82     	; 0x2adc <func+0x7da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a90:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a92:	20 e0       	ldi	r18, 0x00	; 0
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	40 e2       	ldi	r20, 0x20	; 32
    2a98:	51 e4       	ldi	r21, 0x41	; 65
    2a9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a9e:	dc 01       	movw	r26, r24
    2aa0:	cb 01       	movw	r24, r22
    2aa2:	bc 01       	movw	r22, r24
    2aa4:	cd 01       	movw	r24, r26
    2aa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aaa:	dc 01       	movw	r26, r24
    2aac:	cb 01       	movw	r24, r22
    2aae:	9e 83       	std	Y+6, r25	; 0x06
    2ab0:	8d 83       	std	Y+5, r24	; 0x05
    2ab2:	0f c0       	rjmp	.+30     	; 0x2ad2 <func+0x7d0>
    2ab4:	88 ec       	ldi	r24, 0xC8	; 200
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	9c 83       	std	Y+4, r25	; 0x04
    2aba:	8b 83       	std	Y+3, r24	; 0x03
    2abc:	8b 81       	ldd	r24, Y+3	; 0x03
    2abe:	9c 81       	ldd	r25, Y+4	; 0x04
    2ac0:	01 97       	sbiw	r24, 0x01	; 1
    2ac2:	f1 f7       	brne	.-4      	; 0x2ac0 <func+0x7be>
    2ac4:	9c 83       	std	Y+4, r25	; 0x04
    2ac6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ac8:	8d 81       	ldd	r24, Y+5	; 0x05
    2aca:	9e 81       	ldd	r25, Y+6	; 0x06
    2acc:	01 97       	sbiw	r24, 0x01	; 1
    2ace:	9e 83       	std	Y+6, r25	; 0x06
    2ad0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ad2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ad4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ad6:	00 97       	sbiw	r24, 0x00	; 0
    2ad8:	69 f7       	brne	.-38     	; 0x2ab4 <func+0x7b2>
    2ada:	14 c0       	rjmp	.+40     	; 0x2b04 <func+0x802>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2adc:	6f 81       	ldd	r22, Y+7	; 0x07
    2ade:	78 85       	ldd	r23, Y+8	; 0x08
    2ae0:	89 85       	ldd	r24, Y+9	; 0x09
    2ae2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ae4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae8:	dc 01       	movw	r26, r24
    2aea:	cb 01       	movw	r24, r22
    2aec:	9e 83       	std	Y+6, r25	; 0x06
    2aee:	8d 83       	std	Y+5, r24	; 0x05
    2af0:	8d 81       	ldd	r24, Y+5	; 0x05
    2af2:	9e 81       	ldd	r25, Y+6	; 0x06
    2af4:	9a 83       	std	Y+2, r25	; 0x02
    2af6:	89 83       	std	Y+1, r24	; 0x01
    2af8:	89 81       	ldd	r24, Y+1	; 0x01
    2afa:	9a 81       	ldd	r25, Y+2	; 0x02
    2afc:	01 97       	sbiw	r24, 0x01	; 1
    2afe:	f1 f7       	brne	.-4      	; 0x2afc <func+0x7fa>
    2b00:	9a 83       	std	Y+2, r25	; 0x02
    2b02:	89 83       	std	Y+1, r24	; 0x01


		}

	}
	while(flag)
    2b04:	80 91 24 03 	lds	r24, 0x0324
    2b08:	88 23       	and	r24, r24
    2b0a:	09 f0       	breq	.+2      	; 0x2b0e <func+0x80c>
    2b0c:	71 cd       	rjmp	.-1310   	; 0x25f0 <func+0x2ee>

		}

	}

}
    2b0e:	c7 5a       	subi	r28, 0xA7	; 167
    2b10:	df 4f       	sbci	r29, 0xFF	; 255
    2b12:	0f b6       	in	r0, 0x3f	; 63
    2b14:	f8 94       	cli
    2b16:	de bf       	out	0x3e, r29	; 62
    2b18:	0f be       	out	0x3f, r0	; 63
    2b1a:	cd bf       	out	0x3d, r28	; 61
    2b1c:	cf 91       	pop	r28
    2b1e:	df 91       	pop	r29
    2b20:	1f 91       	pop	r17
    2b22:	0f 91       	pop	r16
    2b24:	08 95       	ret

00002b26 <Alarm>:
void Alarm(void)
{
    2b26:	0f 93       	push	r16
    2b28:	1f 93       	push	r17
    2b2a:	df 93       	push	r29
    2b2c:	cf 93       	push	r28
    2b2e:	cd b7       	in	r28, 0x3d	; 61
    2b30:	de b7       	in	r29, 0x3e	; 62
    2b32:	c4 55       	subi	r28, 0x54	; 84
    2b34:	d0 40       	sbci	r29, 0x00	; 0
    2b36:	0f b6       	in	r0, 0x3f	; 63
    2b38:	f8 94       	cli
    2b3a:	de bf       	out	0x3e, r29	; 62
    2b3c:	0f be       	out	0x3f, r0	; 63
    2b3e:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinVal(PORTC_REG,PIN5,PIN_VAL_HIGH);
    2b40:	83 e0       	ldi	r24, 0x03	; 3
    2b42:	65 e0       	ldi	r22, 0x05	; 5
    2b44:	41 e0       	ldi	r20, 0x01	; 1
    2b46:	0e 94 47 0b 	call	0x168e	; 0x168e <DIO_voidSetPinVal>
	DIO_voidSetPinVal(PORTC_REG,PIN3,PIN_VAL_HIGH);
    2b4a:	83 e0       	ldi	r24, 0x03	; 3
    2b4c:	63 e0       	ldi	r22, 0x03	; 3
    2b4e:	41 e0       	ldi	r20, 0x01	; 1
    2b50:	0e 94 47 0b 	call	0x168e	; 0x168e <DIO_voidSetPinVal>
    2b54:	fe 01       	movw	r30, r28
    2b56:	ef 5a       	subi	r30, 0xAF	; 175
    2b58:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5a:	80 e0       	ldi	r24, 0x00	; 0
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	a8 e4       	ldi	r26, 0x48	; 72
    2b60:	b3 e4       	ldi	r27, 0x43	; 67
    2b62:	80 83       	st	Z, r24
    2b64:	91 83       	std	Z+1, r25	; 0x01
    2b66:	a2 83       	std	Z+2, r26	; 0x02
    2b68:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b6a:	8e 01       	movw	r16, r28
    2b6c:	03 5b       	subi	r16, 0xB3	; 179
    2b6e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b70:	fe 01       	movw	r30, r28
    2b72:	ef 5a       	subi	r30, 0xAF	; 175
    2b74:	ff 4f       	sbci	r31, 0xFF	; 255
    2b76:	60 81       	ld	r22, Z
    2b78:	71 81       	ldd	r23, Z+1	; 0x01
    2b7a:	82 81       	ldd	r24, Z+2	; 0x02
    2b7c:	93 81       	ldd	r25, Z+3	; 0x03
    2b7e:	20 e0       	ldi	r18, 0x00	; 0
    2b80:	30 e0       	ldi	r19, 0x00	; 0
    2b82:	4a ef       	ldi	r20, 0xFA	; 250
    2b84:	54 e4       	ldi	r21, 0x44	; 68
    2b86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b8a:	dc 01       	movw	r26, r24
    2b8c:	cb 01       	movw	r24, r22
    2b8e:	f8 01       	movw	r30, r16
    2b90:	80 83       	st	Z, r24
    2b92:	91 83       	std	Z+1, r25	; 0x01
    2b94:	a2 83       	std	Z+2, r26	; 0x02
    2b96:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b98:	fe 01       	movw	r30, r28
    2b9a:	e3 5b       	subi	r30, 0xB3	; 179
    2b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9e:	60 81       	ld	r22, Z
    2ba0:	71 81       	ldd	r23, Z+1	; 0x01
    2ba2:	82 81       	ldd	r24, Z+2	; 0x02
    2ba4:	93 81       	ldd	r25, Z+3	; 0x03
    2ba6:	20 e0       	ldi	r18, 0x00	; 0
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	40 e8       	ldi	r20, 0x80	; 128
    2bac:	5f e3       	ldi	r21, 0x3F	; 63
    2bae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bb2:	88 23       	and	r24, r24
    2bb4:	44 f4       	brge	.+16     	; 0x2bc6 <Alarm+0xa0>
		__ticks = 1;
    2bb6:	fe 01       	movw	r30, r28
    2bb8:	e5 5b       	subi	r30, 0xB5	; 181
    2bba:	ff 4f       	sbci	r31, 0xFF	; 255
    2bbc:	81 e0       	ldi	r24, 0x01	; 1
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	91 83       	std	Z+1, r25	; 0x01
    2bc2:	80 83       	st	Z, r24
    2bc4:	64 c0       	rjmp	.+200    	; 0x2c8e <Alarm+0x168>
	else if (__tmp > 65535)
    2bc6:	fe 01       	movw	r30, r28
    2bc8:	e3 5b       	subi	r30, 0xB3	; 179
    2bca:	ff 4f       	sbci	r31, 0xFF	; 255
    2bcc:	60 81       	ld	r22, Z
    2bce:	71 81       	ldd	r23, Z+1	; 0x01
    2bd0:	82 81       	ldd	r24, Z+2	; 0x02
    2bd2:	93 81       	ldd	r25, Z+3	; 0x03
    2bd4:	20 e0       	ldi	r18, 0x00	; 0
    2bd6:	3f ef       	ldi	r19, 0xFF	; 255
    2bd8:	4f e7       	ldi	r20, 0x7F	; 127
    2bda:	57 e4       	ldi	r21, 0x47	; 71
    2bdc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2be0:	18 16       	cp	r1, r24
    2be2:	0c f0       	brlt	.+2      	; 0x2be6 <Alarm+0xc0>
    2be4:	43 c0       	rjmp	.+134    	; 0x2c6c <Alarm+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2be6:	fe 01       	movw	r30, r28
    2be8:	ef 5a       	subi	r30, 0xAF	; 175
    2bea:	ff 4f       	sbci	r31, 0xFF	; 255
    2bec:	60 81       	ld	r22, Z
    2bee:	71 81       	ldd	r23, Z+1	; 0x01
    2bf0:	82 81       	ldd	r24, Z+2	; 0x02
    2bf2:	93 81       	ldd	r25, Z+3	; 0x03
    2bf4:	20 e0       	ldi	r18, 0x00	; 0
    2bf6:	30 e0       	ldi	r19, 0x00	; 0
    2bf8:	40 e2       	ldi	r20, 0x20	; 32
    2bfa:	51 e4       	ldi	r21, 0x41	; 65
    2bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c00:	dc 01       	movw	r26, r24
    2c02:	cb 01       	movw	r24, r22
    2c04:	8e 01       	movw	r16, r28
    2c06:	05 5b       	subi	r16, 0xB5	; 181
    2c08:	1f 4f       	sbci	r17, 0xFF	; 255
    2c0a:	bc 01       	movw	r22, r24
    2c0c:	cd 01       	movw	r24, r26
    2c0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c12:	dc 01       	movw	r26, r24
    2c14:	cb 01       	movw	r24, r22
    2c16:	f8 01       	movw	r30, r16
    2c18:	91 83       	std	Z+1, r25	; 0x01
    2c1a:	80 83       	st	Z, r24
    2c1c:	1f c0       	rjmp	.+62     	; 0x2c5c <Alarm+0x136>
    2c1e:	fe 01       	movw	r30, r28
    2c20:	e7 5b       	subi	r30, 0xB7	; 183
    2c22:	ff 4f       	sbci	r31, 0xFF	; 255
    2c24:	88 ec       	ldi	r24, 0xC8	; 200
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	91 83       	std	Z+1, r25	; 0x01
    2c2a:	80 83       	st	Z, r24
    2c2c:	fe 01       	movw	r30, r28
    2c2e:	e7 5b       	subi	r30, 0xB7	; 183
    2c30:	ff 4f       	sbci	r31, 0xFF	; 255
    2c32:	80 81       	ld	r24, Z
    2c34:	91 81       	ldd	r25, Z+1	; 0x01
    2c36:	01 97       	sbiw	r24, 0x01	; 1
    2c38:	f1 f7       	brne	.-4      	; 0x2c36 <Alarm+0x110>
    2c3a:	fe 01       	movw	r30, r28
    2c3c:	e7 5b       	subi	r30, 0xB7	; 183
    2c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c40:	91 83       	std	Z+1, r25	; 0x01
    2c42:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c44:	de 01       	movw	r26, r28
    2c46:	a5 5b       	subi	r26, 0xB5	; 181
    2c48:	bf 4f       	sbci	r27, 0xFF	; 255
    2c4a:	fe 01       	movw	r30, r28
    2c4c:	e5 5b       	subi	r30, 0xB5	; 181
    2c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c50:	80 81       	ld	r24, Z
    2c52:	91 81       	ldd	r25, Z+1	; 0x01
    2c54:	01 97       	sbiw	r24, 0x01	; 1
    2c56:	11 96       	adiw	r26, 0x01	; 1
    2c58:	9c 93       	st	X, r25
    2c5a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c5c:	fe 01       	movw	r30, r28
    2c5e:	e5 5b       	subi	r30, 0xB5	; 181
    2c60:	ff 4f       	sbci	r31, 0xFF	; 255
    2c62:	80 81       	ld	r24, Z
    2c64:	91 81       	ldd	r25, Z+1	; 0x01
    2c66:	00 97       	sbiw	r24, 0x00	; 0
    2c68:	d1 f6       	brne	.-76     	; 0x2c1e <Alarm+0xf8>
    2c6a:	27 c0       	rjmp	.+78     	; 0x2cba <Alarm+0x194>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c6c:	8e 01       	movw	r16, r28
    2c6e:	05 5b       	subi	r16, 0xB5	; 181
    2c70:	1f 4f       	sbci	r17, 0xFF	; 255
    2c72:	fe 01       	movw	r30, r28
    2c74:	e3 5b       	subi	r30, 0xB3	; 179
    2c76:	ff 4f       	sbci	r31, 0xFF	; 255
    2c78:	60 81       	ld	r22, Z
    2c7a:	71 81       	ldd	r23, Z+1	; 0x01
    2c7c:	82 81       	ldd	r24, Z+2	; 0x02
    2c7e:	93 81       	ldd	r25, Z+3	; 0x03
    2c80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c84:	dc 01       	movw	r26, r24
    2c86:	cb 01       	movw	r24, r22
    2c88:	f8 01       	movw	r30, r16
    2c8a:	91 83       	std	Z+1, r25	; 0x01
    2c8c:	80 83       	st	Z, r24
    2c8e:	de 01       	movw	r26, r28
    2c90:	a9 5b       	subi	r26, 0xB9	; 185
    2c92:	bf 4f       	sbci	r27, 0xFF	; 255
    2c94:	fe 01       	movw	r30, r28
    2c96:	e5 5b       	subi	r30, 0xB5	; 181
    2c98:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9a:	80 81       	ld	r24, Z
    2c9c:	91 81       	ldd	r25, Z+1	; 0x01
    2c9e:	8d 93       	st	X+, r24
    2ca0:	9c 93       	st	X, r25
    2ca2:	fe 01       	movw	r30, r28
    2ca4:	e9 5b       	subi	r30, 0xB9	; 185
    2ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca8:	80 81       	ld	r24, Z
    2caa:	91 81       	ldd	r25, Z+1	; 0x01
    2cac:	01 97       	sbiw	r24, 0x01	; 1
    2cae:	f1 f7       	brne	.-4      	; 0x2cac <Alarm+0x186>
    2cb0:	fe 01       	movw	r30, r28
    2cb2:	e9 5b       	subi	r30, 0xB9	; 185
    2cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb6:	91 83       	std	Z+1, r25	; 0x01
    2cb8:	80 83       	st	Z, r24
	_delay_ms(200);
	DIO_voidSetPinVal(PORTC_REG,PIN5,PIN_VAL_LOW);
    2cba:	83 e0       	ldi	r24, 0x03	; 3
    2cbc:	65 e0       	ldi	r22, 0x05	; 5
    2cbe:	40 e0       	ldi	r20, 0x00	; 0
    2cc0:	0e 94 47 0b 	call	0x168e	; 0x168e <DIO_voidSetPinVal>
	DIO_voidSetPinVal(PORTC_REG,PIN3,PIN_VAL_LOW);
    2cc4:	83 e0       	ldi	r24, 0x03	; 3
    2cc6:	63 e0       	ldi	r22, 0x03	; 3
    2cc8:	40 e0       	ldi	r20, 0x00	; 0
    2cca:	0e 94 47 0b 	call	0x168e	; 0x168e <DIO_voidSetPinVal>
    2cce:	fe 01       	movw	r30, r28
    2cd0:	ed 5b       	subi	r30, 0xBD	; 189
    2cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd4:	80 e0       	ldi	r24, 0x00	; 0
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	a8 e4       	ldi	r26, 0x48	; 72
    2cda:	b3 e4       	ldi	r27, 0x43	; 67
    2cdc:	80 83       	st	Z, r24
    2cde:	91 83       	std	Z+1, r25	; 0x01
    2ce0:	a2 83       	std	Z+2, r26	; 0x02
    2ce2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ce4:	8e 01       	movw	r16, r28
    2ce6:	01 5c       	subi	r16, 0xC1	; 193
    2ce8:	1f 4f       	sbci	r17, 0xFF	; 255
    2cea:	fe 01       	movw	r30, r28
    2cec:	ed 5b       	subi	r30, 0xBD	; 189
    2cee:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf0:	60 81       	ld	r22, Z
    2cf2:	71 81       	ldd	r23, Z+1	; 0x01
    2cf4:	82 81       	ldd	r24, Z+2	; 0x02
    2cf6:	93 81       	ldd	r25, Z+3	; 0x03
    2cf8:	20 e0       	ldi	r18, 0x00	; 0
    2cfa:	30 e0       	ldi	r19, 0x00	; 0
    2cfc:	4a ef       	ldi	r20, 0xFA	; 250
    2cfe:	54 e4       	ldi	r21, 0x44	; 68
    2d00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d04:	dc 01       	movw	r26, r24
    2d06:	cb 01       	movw	r24, r22
    2d08:	f8 01       	movw	r30, r16
    2d0a:	80 83       	st	Z, r24
    2d0c:	91 83       	std	Z+1, r25	; 0x01
    2d0e:	a2 83       	std	Z+2, r26	; 0x02
    2d10:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d12:	fe 01       	movw	r30, r28
    2d14:	ff 96       	adiw	r30, 0x3f	; 63
    2d16:	60 81       	ld	r22, Z
    2d18:	71 81       	ldd	r23, Z+1	; 0x01
    2d1a:	82 81       	ldd	r24, Z+2	; 0x02
    2d1c:	93 81       	ldd	r25, Z+3	; 0x03
    2d1e:	20 e0       	ldi	r18, 0x00	; 0
    2d20:	30 e0       	ldi	r19, 0x00	; 0
    2d22:	40 e8       	ldi	r20, 0x80	; 128
    2d24:	5f e3       	ldi	r21, 0x3F	; 63
    2d26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d2a:	88 23       	and	r24, r24
    2d2c:	2c f4       	brge	.+10     	; 0x2d38 <Alarm+0x212>
		__ticks = 1;
    2d2e:	81 e0       	ldi	r24, 0x01	; 1
    2d30:	90 e0       	ldi	r25, 0x00	; 0
    2d32:	9e af       	std	Y+62, r25	; 0x3e
    2d34:	8d af       	std	Y+61, r24	; 0x3d
    2d36:	46 c0       	rjmp	.+140    	; 0x2dc4 <Alarm+0x29e>
	else if (__tmp > 65535)
    2d38:	fe 01       	movw	r30, r28
    2d3a:	ff 96       	adiw	r30, 0x3f	; 63
    2d3c:	60 81       	ld	r22, Z
    2d3e:	71 81       	ldd	r23, Z+1	; 0x01
    2d40:	82 81       	ldd	r24, Z+2	; 0x02
    2d42:	93 81       	ldd	r25, Z+3	; 0x03
    2d44:	20 e0       	ldi	r18, 0x00	; 0
    2d46:	3f ef       	ldi	r19, 0xFF	; 255
    2d48:	4f e7       	ldi	r20, 0x7F	; 127
    2d4a:	57 e4       	ldi	r21, 0x47	; 71
    2d4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d50:	18 16       	cp	r1, r24
    2d52:	64 f5       	brge	.+88     	; 0x2dac <Alarm+0x286>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d54:	fe 01       	movw	r30, r28
    2d56:	ed 5b       	subi	r30, 0xBD	; 189
    2d58:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5a:	60 81       	ld	r22, Z
    2d5c:	71 81       	ldd	r23, Z+1	; 0x01
    2d5e:	82 81       	ldd	r24, Z+2	; 0x02
    2d60:	93 81       	ldd	r25, Z+3	; 0x03
    2d62:	20 e0       	ldi	r18, 0x00	; 0
    2d64:	30 e0       	ldi	r19, 0x00	; 0
    2d66:	40 e2       	ldi	r20, 0x20	; 32
    2d68:	51 e4       	ldi	r21, 0x41	; 65
    2d6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d6e:	dc 01       	movw	r26, r24
    2d70:	cb 01       	movw	r24, r22
    2d72:	bc 01       	movw	r22, r24
    2d74:	cd 01       	movw	r24, r26
    2d76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d7a:	dc 01       	movw	r26, r24
    2d7c:	cb 01       	movw	r24, r22
    2d7e:	9e af       	std	Y+62, r25	; 0x3e
    2d80:	8d af       	std	Y+61, r24	; 0x3d
    2d82:	0f c0       	rjmp	.+30     	; 0x2da2 <Alarm+0x27c>
    2d84:	88 ec       	ldi	r24, 0xC8	; 200
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	9c af       	std	Y+60, r25	; 0x3c
    2d8a:	8b af       	std	Y+59, r24	; 0x3b
    2d8c:	8b ad       	ldd	r24, Y+59	; 0x3b
    2d8e:	9c ad       	ldd	r25, Y+60	; 0x3c
    2d90:	01 97       	sbiw	r24, 0x01	; 1
    2d92:	f1 f7       	brne	.-4      	; 0x2d90 <Alarm+0x26a>
    2d94:	9c af       	std	Y+60, r25	; 0x3c
    2d96:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d98:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d9a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d9c:	01 97       	sbiw	r24, 0x01	; 1
    2d9e:	9e af       	std	Y+62, r25	; 0x3e
    2da0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2da2:	8d ad       	ldd	r24, Y+61	; 0x3d
    2da4:	9e ad       	ldd	r25, Y+62	; 0x3e
    2da6:	00 97       	sbiw	r24, 0x00	; 0
    2da8:	69 f7       	brne	.-38     	; 0x2d84 <Alarm+0x25e>
    2daa:	16 c0       	rjmp	.+44     	; 0x2dd8 <Alarm+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dac:	fe 01       	movw	r30, r28
    2dae:	ff 96       	adiw	r30, 0x3f	; 63
    2db0:	60 81       	ld	r22, Z
    2db2:	71 81       	ldd	r23, Z+1	; 0x01
    2db4:	82 81       	ldd	r24, Z+2	; 0x02
    2db6:	93 81       	ldd	r25, Z+3	; 0x03
    2db8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dbc:	dc 01       	movw	r26, r24
    2dbe:	cb 01       	movw	r24, r22
    2dc0:	9e af       	std	Y+62, r25	; 0x3e
    2dc2:	8d af       	std	Y+61, r24	; 0x3d
    2dc4:	8d ad       	ldd	r24, Y+61	; 0x3d
    2dc6:	9e ad       	ldd	r25, Y+62	; 0x3e
    2dc8:	9a af       	std	Y+58, r25	; 0x3a
    2dca:	89 af       	std	Y+57, r24	; 0x39
    2dcc:	89 ad       	ldd	r24, Y+57	; 0x39
    2dce:	9a ad       	ldd	r25, Y+58	; 0x3a
    2dd0:	01 97       	sbiw	r24, 0x01	; 1
    2dd2:	f1 f7       	brne	.-4      	; 0x2dd0 <Alarm+0x2aa>
    2dd4:	9a af       	std	Y+58, r25	; 0x3a
    2dd6:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(200);
	DIO_voidSetPinVal(PORTC_REG,PIN5,PIN_VAL_HIGH);
    2dd8:	83 e0       	ldi	r24, 0x03	; 3
    2dda:	65 e0       	ldi	r22, 0x05	; 5
    2ddc:	41 e0       	ldi	r20, 0x01	; 1
    2dde:	0e 94 47 0b 	call	0x168e	; 0x168e <DIO_voidSetPinVal>
	DIO_voidSetPinVal(PORTC_REG,PIN3,PIN_VAL_HIGH);
    2de2:	83 e0       	ldi	r24, 0x03	; 3
    2de4:	63 e0       	ldi	r22, 0x03	; 3
    2de6:	41 e0       	ldi	r20, 0x01	; 1
    2de8:	0e 94 47 0b 	call	0x168e	; 0x168e <DIO_voidSetPinVal>
    2dec:	80 e0       	ldi	r24, 0x00	; 0
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	a8 e4       	ldi	r26, 0x48	; 72
    2df2:	b3 e4       	ldi	r27, 0x43	; 67
    2df4:	8d ab       	std	Y+53, r24	; 0x35
    2df6:	9e ab       	std	Y+54, r25	; 0x36
    2df8:	af ab       	std	Y+55, r26	; 0x37
    2dfa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dfc:	6d a9       	ldd	r22, Y+53	; 0x35
    2dfe:	7e a9       	ldd	r23, Y+54	; 0x36
    2e00:	8f a9       	ldd	r24, Y+55	; 0x37
    2e02:	98 ad       	ldd	r25, Y+56	; 0x38
    2e04:	20 e0       	ldi	r18, 0x00	; 0
    2e06:	30 e0       	ldi	r19, 0x00	; 0
    2e08:	4a ef       	ldi	r20, 0xFA	; 250
    2e0a:	54 e4       	ldi	r21, 0x44	; 68
    2e0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e10:	dc 01       	movw	r26, r24
    2e12:	cb 01       	movw	r24, r22
    2e14:	89 ab       	std	Y+49, r24	; 0x31
    2e16:	9a ab       	std	Y+50, r25	; 0x32
    2e18:	ab ab       	std	Y+51, r26	; 0x33
    2e1a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2e1c:	69 a9       	ldd	r22, Y+49	; 0x31
    2e1e:	7a a9       	ldd	r23, Y+50	; 0x32
    2e20:	8b a9       	ldd	r24, Y+51	; 0x33
    2e22:	9c a9       	ldd	r25, Y+52	; 0x34
    2e24:	20 e0       	ldi	r18, 0x00	; 0
    2e26:	30 e0       	ldi	r19, 0x00	; 0
    2e28:	40 e8       	ldi	r20, 0x80	; 128
    2e2a:	5f e3       	ldi	r21, 0x3F	; 63
    2e2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e30:	88 23       	and	r24, r24
    2e32:	2c f4       	brge	.+10     	; 0x2e3e <Alarm+0x318>
		__ticks = 1;
    2e34:	81 e0       	ldi	r24, 0x01	; 1
    2e36:	90 e0       	ldi	r25, 0x00	; 0
    2e38:	98 ab       	std	Y+48, r25	; 0x30
    2e3a:	8f a7       	std	Y+47, r24	; 0x2f
    2e3c:	3f c0       	rjmp	.+126    	; 0x2ebc <Alarm+0x396>
	else if (__tmp > 65535)
    2e3e:	69 a9       	ldd	r22, Y+49	; 0x31
    2e40:	7a a9       	ldd	r23, Y+50	; 0x32
    2e42:	8b a9       	ldd	r24, Y+51	; 0x33
    2e44:	9c a9       	ldd	r25, Y+52	; 0x34
    2e46:	20 e0       	ldi	r18, 0x00	; 0
    2e48:	3f ef       	ldi	r19, 0xFF	; 255
    2e4a:	4f e7       	ldi	r20, 0x7F	; 127
    2e4c:	57 e4       	ldi	r21, 0x47	; 71
    2e4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e52:	18 16       	cp	r1, r24
    2e54:	4c f5       	brge	.+82     	; 0x2ea8 <Alarm+0x382>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e56:	6d a9       	ldd	r22, Y+53	; 0x35
    2e58:	7e a9       	ldd	r23, Y+54	; 0x36
    2e5a:	8f a9       	ldd	r24, Y+55	; 0x37
    2e5c:	98 ad       	ldd	r25, Y+56	; 0x38
    2e5e:	20 e0       	ldi	r18, 0x00	; 0
    2e60:	30 e0       	ldi	r19, 0x00	; 0
    2e62:	40 e2       	ldi	r20, 0x20	; 32
    2e64:	51 e4       	ldi	r21, 0x41	; 65
    2e66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e6a:	dc 01       	movw	r26, r24
    2e6c:	cb 01       	movw	r24, r22
    2e6e:	bc 01       	movw	r22, r24
    2e70:	cd 01       	movw	r24, r26
    2e72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e76:	dc 01       	movw	r26, r24
    2e78:	cb 01       	movw	r24, r22
    2e7a:	98 ab       	std	Y+48, r25	; 0x30
    2e7c:	8f a7       	std	Y+47, r24	; 0x2f
    2e7e:	0f c0       	rjmp	.+30     	; 0x2e9e <Alarm+0x378>
    2e80:	88 ec       	ldi	r24, 0xC8	; 200
    2e82:	90 e0       	ldi	r25, 0x00	; 0
    2e84:	9e a7       	std	Y+46, r25	; 0x2e
    2e86:	8d a7       	std	Y+45, r24	; 0x2d
    2e88:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e8a:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e8c:	01 97       	sbiw	r24, 0x01	; 1
    2e8e:	f1 f7       	brne	.-4      	; 0x2e8c <Alarm+0x366>
    2e90:	9e a7       	std	Y+46, r25	; 0x2e
    2e92:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e94:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e96:	98 a9       	ldd	r25, Y+48	; 0x30
    2e98:	01 97       	sbiw	r24, 0x01	; 1
    2e9a:	98 ab       	std	Y+48, r25	; 0x30
    2e9c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e9e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ea0:	98 a9       	ldd	r25, Y+48	; 0x30
    2ea2:	00 97       	sbiw	r24, 0x00	; 0
    2ea4:	69 f7       	brne	.-38     	; 0x2e80 <Alarm+0x35a>
    2ea6:	14 c0       	rjmp	.+40     	; 0x2ed0 <Alarm+0x3aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ea8:	69 a9       	ldd	r22, Y+49	; 0x31
    2eaa:	7a a9       	ldd	r23, Y+50	; 0x32
    2eac:	8b a9       	ldd	r24, Y+51	; 0x33
    2eae:	9c a9       	ldd	r25, Y+52	; 0x34
    2eb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb4:	dc 01       	movw	r26, r24
    2eb6:	cb 01       	movw	r24, r22
    2eb8:	98 ab       	std	Y+48, r25	; 0x30
    2eba:	8f a7       	std	Y+47, r24	; 0x2f
    2ebc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ebe:	98 a9       	ldd	r25, Y+48	; 0x30
    2ec0:	9c a7       	std	Y+44, r25	; 0x2c
    2ec2:	8b a7       	std	Y+43, r24	; 0x2b
    2ec4:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ec6:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ec8:	01 97       	sbiw	r24, 0x01	; 1
    2eca:	f1 f7       	brne	.-4      	; 0x2ec8 <Alarm+0x3a2>
    2ecc:	9c a7       	std	Y+44, r25	; 0x2c
    2ece:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(200);
	DIO_voidSetPinVal(PORTC_REG,PIN5,PIN_VAL_LOW);
    2ed0:	83 e0       	ldi	r24, 0x03	; 3
    2ed2:	65 e0       	ldi	r22, 0x05	; 5
    2ed4:	40 e0       	ldi	r20, 0x00	; 0
    2ed6:	0e 94 47 0b 	call	0x168e	; 0x168e <DIO_voidSetPinVal>
	DIO_voidSetPinVal(PORTC_REG,PIN3,PIN_VAL_LOW);
    2eda:	83 e0       	ldi	r24, 0x03	; 3
    2edc:	63 e0       	ldi	r22, 0x03	; 3
    2ede:	40 e0       	ldi	r20, 0x00	; 0
    2ee0:	0e 94 47 0b 	call	0x168e	; 0x168e <DIO_voidSetPinVal>
    2ee4:	80 e0       	ldi	r24, 0x00	; 0
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	a8 e4       	ldi	r26, 0x48	; 72
    2eea:	b3 e4       	ldi	r27, 0x43	; 67
    2eec:	8f a3       	std	Y+39, r24	; 0x27
    2eee:	98 a7       	std	Y+40, r25	; 0x28
    2ef0:	a9 a7       	std	Y+41, r26	; 0x29
    2ef2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ef4:	6f a1       	ldd	r22, Y+39	; 0x27
    2ef6:	78 a5       	ldd	r23, Y+40	; 0x28
    2ef8:	89 a5       	ldd	r24, Y+41	; 0x29
    2efa:	9a a5       	ldd	r25, Y+42	; 0x2a
    2efc:	20 e0       	ldi	r18, 0x00	; 0
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	4a ef       	ldi	r20, 0xFA	; 250
    2f02:	54 e4       	ldi	r21, 0x44	; 68
    2f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f08:	dc 01       	movw	r26, r24
    2f0a:	cb 01       	movw	r24, r22
    2f0c:	8b a3       	std	Y+35, r24	; 0x23
    2f0e:	9c a3       	std	Y+36, r25	; 0x24
    2f10:	ad a3       	std	Y+37, r26	; 0x25
    2f12:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2f14:	6b a1       	ldd	r22, Y+35	; 0x23
    2f16:	7c a1       	ldd	r23, Y+36	; 0x24
    2f18:	8d a1       	ldd	r24, Y+37	; 0x25
    2f1a:	9e a1       	ldd	r25, Y+38	; 0x26
    2f1c:	20 e0       	ldi	r18, 0x00	; 0
    2f1e:	30 e0       	ldi	r19, 0x00	; 0
    2f20:	40 e8       	ldi	r20, 0x80	; 128
    2f22:	5f e3       	ldi	r21, 0x3F	; 63
    2f24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f28:	88 23       	and	r24, r24
    2f2a:	2c f4       	brge	.+10     	; 0x2f36 <Alarm+0x410>
		__ticks = 1;
    2f2c:	81 e0       	ldi	r24, 0x01	; 1
    2f2e:	90 e0       	ldi	r25, 0x00	; 0
    2f30:	9a a3       	std	Y+34, r25	; 0x22
    2f32:	89 a3       	std	Y+33, r24	; 0x21
    2f34:	3f c0       	rjmp	.+126    	; 0x2fb4 <Alarm+0x48e>
	else if (__tmp > 65535)
    2f36:	6b a1       	ldd	r22, Y+35	; 0x23
    2f38:	7c a1       	ldd	r23, Y+36	; 0x24
    2f3a:	8d a1       	ldd	r24, Y+37	; 0x25
    2f3c:	9e a1       	ldd	r25, Y+38	; 0x26
    2f3e:	20 e0       	ldi	r18, 0x00	; 0
    2f40:	3f ef       	ldi	r19, 0xFF	; 255
    2f42:	4f e7       	ldi	r20, 0x7F	; 127
    2f44:	57 e4       	ldi	r21, 0x47	; 71
    2f46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f4a:	18 16       	cp	r1, r24
    2f4c:	4c f5       	brge	.+82     	; 0x2fa0 <Alarm+0x47a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f4e:	6f a1       	ldd	r22, Y+39	; 0x27
    2f50:	78 a5       	ldd	r23, Y+40	; 0x28
    2f52:	89 a5       	ldd	r24, Y+41	; 0x29
    2f54:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f56:	20 e0       	ldi	r18, 0x00	; 0
    2f58:	30 e0       	ldi	r19, 0x00	; 0
    2f5a:	40 e2       	ldi	r20, 0x20	; 32
    2f5c:	51 e4       	ldi	r21, 0x41	; 65
    2f5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f62:	dc 01       	movw	r26, r24
    2f64:	cb 01       	movw	r24, r22
    2f66:	bc 01       	movw	r22, r24
    2f68:	cd 01       	movw	r24, r26
    2f6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f6e:	dc 01       	movw	r26, r24
    2f70:	cb 01       	movw	r24, r22
    2f72:	9a a3       	std	Y+34, r25	; 0x22
    2f74:	89 a3       	std	Y+33, r24	; 0x21
    2f76:	0f c0       	rjmp	.+30     	; 0x2f96 <Alarm+0x470>
    2f78:	88 ec       	ldi	r24, 0xC8	; 200
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	98 a3       	std	Y+32, r25	; 0x20
    2f7e:	8f 8f       	std	Y+31, r24	; 0x1f
    2f80:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f82:	98 a1       	ldd	r25, Y+32	; 0x20
    2f84:	01 97       	sbiw	r24, 0x01	; 1
    2f86:	f1 f7       	brne	.-4      	; 0x2f84 <Alarm+0x45e>
    2f88:	98 a3       	std	Y+32, r25	; 0x20
    2f8a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f8c:	89 a1       	ldd	r24, Y+33	; 0x21
    2f8e:	9a a1       	ldd	r25, Y+34	; 0x22
    2f90:	01 97       	sbiw	r24, 0x01	; 1
    2f92:	9a a3       	std	Y+34, r25	; 0x22
    2f94:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f96:	89 a1       	ldd	r24, Y+33	; 0x21
    2f98:	9a a1       	ldd	r25, Y+34	; 0x22
    2f9a:	00 97       	sbiw	r24, 0x00	; 0
    2f9c:	69 f7       	brne	.-38     	; 0x2f78 <Alarm+0x452>
    2f9e:	14 c0       	rjmp	.+40     	; 0x2fc8 <Alarm+0x4a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fa0:	6b a1       	ldd	r22, Y+35	; 0x23
    2fa2:	7c a1       	ldd	r23, Y+36	; 0x24
    2fa4:	8d a1       	ldd	r24, Y+37	; 0x25
    2fa6:	9e a1       	ldd	r25, Y+38	; 0x26
    2fa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fac:	dc 01       	movw	r26, r24
    2fae:	cb 01       	movw	r24, r22
    2fb0:	9a a3       	std	Y+34, r25	; 0x22
    2fb2:	89 a3       	std	Y+33, r24	; 0x21
    2fb4:	89 a1       	ldd	r24, Y+33	; 0x21
    2fb6:	9a a1       	ldd	r25, Y+34	; 0x22
    2fb8:	9e 8f       	std	Y+30, r25	; 0x1e
    2fba:	8d 8f       	std	Y+29, r24	; 0x1d
    2fbc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fbe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2fc0:	01 97       	sbiw	r24, 0x01	; 1
    2fc2:	f1 f7       	brne	.-4      	; 0x2fc0 <Alarm+0x49a>
    2fc4:	9e 8f       	std	Y+30, r25	; 0x1e
    2fc6:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(200);
	DIO_voidSetPinVal(PORTC_REG,PIN5,PIN_VAL_HIGH);
    2fc8:	83 e0       	ldi	r24, 0x03	; 3
    2fca:	65 e0       	ldi	r22, 0x05	; 5
    2fcc:	41 e0       	ldi	r20, 0x01	; 1
    2fce:	0e 94 47 0b 	call	0x168e	; 0x168e <DIO_voidSetPinVal>
	DIO_voidSetPinVal(PORTC_REG,PIN3,PIN_VAL_HIGH);
    2fd2:	83 e0       	ldi	r24, 0x03	; 3
    2fd4:	63 e0       	ldi	r22, 0x03	; 3
    2fd6:	41 e0       	ldi	r20, 0x01	; 1
    2fd8:	0e 94 47 0b 	call	0x168e	; 0x168e <DIO_voidSetPinVal>
    2fdc:	80 e0       	ldi	r24, 0x00	; 0
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	aa ef       	ldi	r26, 0xFA	; 250
    2fe2:	b3 e4       	ldi	r27, 0x43	; 67
    2fe4:	89 8f       	std	Y+25, r24	; 0x19
    2fe6:	9a 8f       	std	Y+26, r25	; 0x1a
    2fe8:	ab 8f       	std	Y+27, r26	; 0x1b
    2fea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fec:	69 8d       	ldd	r22, Y+25	; 0x19
    2fee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ff0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ff2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ff4:	20 e0       	ldi	r18, 0x00	; 0
    2ff6:	30 e0       	ldi	r19, 0x00	; 0
    2ff8:	4a ef       	ldi	r20, 0xFA	; 250
    2ffa:	54 e4       	ldi	r21, 0x44	; 68
    2ffc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3000:	dc 01       	movw	r26, r24
    3002:	cb 01       	movw	r24, r22
    3004:	8d 8b       	std	Y+21, r24	; 0x15
    3006:	9e 8b       	std	Y+22, r25	; 0x16
    3008:	af 8b       	std	Y+23, r26	; 0x17
    300a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    300c:	6d 89       	ldd	r22, Y+21	; 0x15
    300e:	7e 89       	ldd	r23, Y+22	; 0x16
    3010:	8f 89       	ldd	r24, Y+23	; 0x17
    3012:	98 8d       	ldd	r25, Y+24	; 0x18
    3014:	20 e0       	ldi	r18, 0x00	; 0
    3016:	30 e0       	ldi	r19, 0x00	; 0
    3018:	40 e8       	ldi	r20, 0x80	; 128
    301a:	5f e3       	ldi	r21, 0x3F	; 63
    301c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3020:	88 23       	and	r24, r24
    3022:	2c f4       	brge	.+10     	; 0x302e <Alarm+0x508>
		__ticks = 1;
    3024:	81 e0       	ldi	r24, 0x01	; 1
    3026:	90 e0       	ldi	r25, 0x00	; 0
    3028:	9c 8b       	std	Y+20, r25	; 0x14
    302a:	8b 8b       	std	Y+19, r24	; 0x13
    302c:	3f c0       	rjmp	.+126    	; 0x30ac <Alarm+0x586>
	else if (__tmp > 65535)
    302e:	6d 89       	ldd	r22, Y+21	; 0x15
    3030:	7e 89       	ldd	r23, Y+22	; 0x16
    3032:	8f 89       	ldd	r24, Y+23	; 0x17
    3034:	98 8d       	ldd	r25, Y+24	; 0x18
    3036:	20 e0       	ldi	r18, 0x00	; 0
    3038:	3f ef       	ldi	r19, 0xFF	; 255
    303a:	4f e7       	ldi	r20, 0x7F	; 127
    303c:	57 e4       	ldi	r21, 0x47	; 71
    303e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3042:	18 16       	cp	r1, r24
    3044:	4c f5       	brge	.+82     	; 0x3098 <Alarm+0x572>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3046:	69 8d       	ldd	r22, Y+25	; 0x19
    3048:	7a 8d       	ldd	r23, Y+26	; 0x1a
    304a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    304c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    304e:	20 e0       	ldi	r18, 0x00	; 0
    3050:	30 e0       	ldi	r19, 0x00	; 0
    3052:	40 e2       	ldi	r20, 0x20	; 32
    3054:	51 e4       	ldi	r21, 0x41	; 65
    3056:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    305a:	dc 01       	movw	r26, r24
    305c:	cb 01       	movw	r24, r22
    305e:	bc 01       	movw	r22, r24
    3060:	cd 01       	movw	r24, r26
    3062:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3066:	dc 01       	movw	r26, r24
    3068:	cb 01       	movw	r24, r22
    306a:	9c 8b       	std	Y+20, r25	; 0x14
    306c:	8b 8b       	std	Y+19, r24	; 0x13
    306e:	0f c0       	rjmp	.+30     	; 0x308e <Alarm+0x568>
    3070:	88 ec       	ldi	r24, 0xC8	; 200
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	9a 8b       	std	Y+18, r25	; 0x12
    3076:	89 8b       	std	Y+17, r24	; 0x11
    3078:	89 89       	ldd	r24, Y+17	; 0x11
    307a:	9a 89       	ldd	r25, Y+18	; 0x12
    307c:	01 97       	sbiw	r24, 0x01	; 1
    307e:	f1 f7       	brne	.-4      	; 0x307c <Alarm+0x556>
    3080:	9a 8b       	std	Y+18, r25	; 0x12
    3082:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3084:	8b 89       	ldd	r24, Y+19	; 0x13
    3086:	9c 89       	ldd	r25, Y+20	; 0x14
    3088:	01 97       	sbiw	r24, 0x01	; 1
    308a:	9c 8b       	std	Y+20, r25	; 0x14
    308c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    308e:	8b 89       	ldd	r24, Y+19	; 0x13
    3090:	9c 89       	ldd	r25, Y+20	; 0x14
    3092:	00 97       	sbiw	r24, 0x00	; 0
    3094:	69 f7       	brne	.-38     	; 0x3070 <Alarm+0x54a>
    3096:	14 c0       	rjmp	.+40     	; 0x30c0 <Alarm+0x59a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3098:	6d 89       	ldd	r22, Y+21	; 0x15
    309a:	7e 89       	ldd	r23, Y+22	; 0x16
    309c:	8f 89       	ldd	r24, Y+23	; 0x17
    309e:	98 8d       	ldd	r25, Y+24	; 0x18
    30a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30a4:	dc 01       	movw	r26, r24
    30a6:	cb 01       	movw	r24, r22
    30a8:	9c 8b       	std	Y+20, r25	; 0x14
    30aa:	8b 8b       	std	Y+19, r24	; 0x13
    30ac:	8b 89       	ldd	r24, Y+19	; 0x13
    30ae:	9c 89       	ldd	r25, Y+20	; 0x14
    30b0:	98 8b       	std	Y+16, r25	; 0x10
    30b2:	8f 87       	std	Y+15, r24	; 0x0f
    30b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    30b6:	98 89       	ldd	r25, Y+16	; 0x10
    30b8:	01 97       	sbiw	r24, 0x01	; 1
    30ba:	f1 f7       	brne	.-4      	; 0x30b8 <Alarm+0x592>
    30bc:	98 8b       	std	Y+16, r25	; 0x10
    30be:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(500);
	DIO_voidSetPinVal(PORTC_REG,PIN5,PIN_VAL_LOW);
    30c0:	83 e0       	ldi	r24, 0x03	; 3
    30c2:	65 e0       	ldi	r22, 0x05	; 5
    30c4:	40 e0       	ldi	r20, 0x00	; 0
    30c6:	0e 94 47 0b 	call	0x168e	; 0x168e <DIO_voidSetPinVal>
	DIO_voidSetPinVal(PORTC_REG,PIN3,PIN_VAL_LOW);
    30ca:	83 e0       	ldi	r24, 0x03	; 3
    30cc:	63 e0       	ldi	r22, 0x03	; 3
    30ce:	40 e0       	ldi	r20, 0x00	; 0
    30d0:	0e 94 47 0b 	call	0x168e	; 0x168e <DIO_voidSetPinVal>
    30d4:	80 e0       	ldi	r24, 0x00	; 0
    30d6:	90 e0       	ldi	r25, 0x00	; 0
    30d8:	a8 e4       	ldi	r26, 0x48	; 72
    30da:	b3 e4       	ldi	r27, 0x43	; 67
    30dc:	8b 87       	std	Y+11, r24	; 0x0b
    30de:	9c 87       	std	Y+12, r25	; 0x0c
    30e0:	ad 87       	std	Y+13, r26	; 0x0d
    30e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    30e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    30e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    30ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    30ec:	20 e0       	ldi	r18, 0x00	; 0
    30ee:	30 e0       	ldi	r19, 0x00	; 0
    30f0:	4a ef       	ldi	r20, 0xFA	; 250
    30f2:	54 e4       	ldi	r21, 0x44	; 68
    30f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30f8:	dc 01       	movw	r26, r24
    30fa:	cb 01       	movw	r24, r22
    30fc:	8f 83       	std	Y+7, r24	; 0x07
    30fe:	98 87       	std	Y+8, r25	; 0x08
    3100:	a9 87       	std	Y+9, r26	; 0x09
    3102:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3104:	6f 81       	ldd	r22, Y+7	; 0x07
    3106:	78 85       	ldd	r23, Y+8	; 0x08
    3108:	89 85       	ldd	r24, Y+9	; 0x09
    310a:	9a 85       	ldd	r25, Y+10	; 0x0a
    310c:	20 e0       	ldi	r18, 0x00	; 0
    310e:	30 e0       	ldi	r19, 0x00	; 0
    3110:	40 e8       	ldi	r20, 0x80	; 128
    3112:	5f e3       	ldi	r21, 0x3F	; 63
    3114:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3118:	88 23       	and	r24, r24
    311a:	2c f4       	brge	.+10     	; 0x3126 <Alarm+0x600>
		__ticks = 1;
    311c:	81 e0       	ldi	r24, 0x01	; 1
    311e:	90 e0       	ldi	r25, 0x00	; 0
    3120:	9e 83       	std	Y+6, r25	; 0x06
    3122:	8d 83       	std	Y+5, r24	; 0x05
    3124:	3f c0       	rjmp	.+126    	; 0x31a4 <Alarm+0x67e>
	else if (__tmp > 65535)
    3126:	6f 81       	ldd	r22, Y+7	; 0x07
    3128:	78 85       	ldd	r23, Y+8	; 0x08
    312a:	89 85       	ldd	r24, Y+9	; 0x09
    312c:	9a 85       	ldd	r25, Y+10	; 0x0a
    312e:	20 e0       	ldi	r18, 0x00	; 0
    3130:	3f ef       	ldi	r19, 0xFF	; 255
    3132:	4f e7       	ldi	r20, 0x7F	; 127
    3134:	57 e4       	ldi	r21, 0x47	; 71
    3136:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    313a:	18 16       	cp	r1, r24
    313c:	4c f5       	brge	.+82     	; 0x3190 <Alarm+0x66a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    313e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3140:	7c 85       	ldd	r23, Y+12	; 0x0c
    3142:	8d 85       	ldd	r24, Y+13	; 0x0d
    3144:	9e 85       	ldd	r25, Y+14	; 0x0e
    3146:	20 e0       	ldi	r18, 0x00	; 0
    3148:	30 e0       	ldi	r19, 0x00	; 0
    314a:	40 e2       	ldi	r20, 0x20	; 32
    314c:	51 e4       	ldi	r21, 0x41	; 65
    314e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3152:	dc 01       	movw	r26, r24
    3154:	cb 01       	movw	r24, r22
    3156:	bc 01       	movw	r22, r24
    3158:	cd 01       	movw	r24, r26
    315a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    315e:	dc 01       	movw	r26, r24
    3160:	cb 01       	movw	r24, r22
    3162:	9e 83       	std	Y+6, r25	; 0x06
    3164:	8d 83       	std	Y+5, r24	; 0x05
    3166:	0f c0       	rjmp	.+30     	; 0x3186 <Alarm+0x660>
    3168:	88 ec       	ldi	r24, 0xC8	; 200
    316a:	90 e0       	ldi	r25, 0x00	; 0
    316c:	9c 83       	std	Y+4, r25	; 0x04
    316e:	8b 83       	std	Y+3, r24	; 0x03
    3170:	8b 81       	ldd	r24, Y+3	; 0x03
    3172:	9c 81       	ldd	r25, Y+4	; 0x04
    3174:	01 97       	sbiw	r24, 0x01	; 1
    3176:	f1 f7       	brne	.-4      	; 0x3174 <Alarm+0x64e>
    3178:	9c 83       	std	Y+4, r25	; 0x04
    317a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    317c:	8d 81       	ldd	r24, Y+5	; 0x05
    317e:	9e 81       	ldd	r25, Y+6	; 0x06
    3180:	01 97       	sbiw	r24, 0x01	; 1
    3182:	9e 83       	std	Y+6, r25	; 0x06
    3184:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3186:	8d 81       	ldd	r24, Y+5	; 0x05
    3188:	9e 81       	ldd	r25, Y+6	; 0x06
    318a:	00 97       	sbiw	r24, 0x00	; 0
    318c:	69 f7       	brne	.-38     	; 0x3168 <Alarm+0x642>
    318e:	14 c0       	rjmp	.+40     	; 0x31b8 <Alarm+0x692>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3190:	6f 81       	ldd	r22, Y+7	; 0x07
    3192:	78 85       	ldd	r23, Y+8	; 0x08
    3194:	89 85       	ldd	r24, Y+9	; 0x09
    3196:	9a 85       	ldd	r25, Y+10	; 0x0a
    3198:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    319c:	dc 01       	movw	r26, r24
    319e:	cb 01       	movw	r24, r22
    31a0:	9e 83       	std	Y+6, r25	; 0x06
    31a2:	8d 83       	std	Y+5, r24	; 0x05
    31a4:	8d 81       	ldd	r24, Y+5	; 0x05
    31a6:	9e 81       	ldd	r25, Y+6	; 0x06
    31a8:	9a 83       	std	Y+2, r25	; 0x02
    31aa:	89 83       	std	Y+1, r24	; 0x01
    31ac:	89 81       	ldd	r24, Y+1	; 0x01
    31ae:	9a 81       	ldd	r25, Y+2	; 0x02
    31b0:	01 97       	sbiw	r24, 0x01	; 1
    31b2:	f1 f7       	brne	.-4      	; 0x31b0 <Alarm+0x68a>
    31b4:	9a 83       	std	Y+2, r25	; 0x02
    31b6:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(200);

}
    31b8:	cc 5a       	subi	r28, 0xAC	; 172
    31ba:	df 4f       	sbci	r29, 0xFF	; 255
    31bc:	0f b6       	in	r0, 0x3f	; 63
    31be:	f8 94       	cli
    31c0:	de bf       	out	0x3e, r29	; 62
    31c2:	0f be       	out	0x3f, r0	; 63
    31c4:	cd bf       	out	0x3d, r28	; 61
    31c6:	cf 91       	pop	r28
    31c8:	df 91       	pop	r29
    31ca:	1f 91       	pop	r17
    31cc:	0f 91       	pop	r16
    31ce:	08 95       	ret

000031d0 <__udivmodhi4>:
    31d0:	aa 1b       	sub	r26, r26
    31d2:	bb 1b       	sub	r27, r27
    31d4:	51 e1       	ldi	r21, 0x11	; 17
    31d6:	07 c0       	rjmp	.+14     	; 0x31e6 <__udivmodhi4_ep>

000031d8 <__udivmodhi4_loop>:
    31d8:	aa 1f       	adc	r26, r26
    31da:	bb 1f       	adc	r27, r27
    31dc:	a6 17       	cp	r26, r22
    31de:	b7 07       	cpc	r27, r23
    31e0:	10 f0       	brcs	.+4      	; 0x31e6 <__udivmodhi4_ep>
    31e2:	a6 1b       	sub	r26, r22
    31e4:	b7 0b       	sbc	r27, r23

000031e6 <__udivmodhi4_ep>:
    31e6:	88 1f       	adc	r24, r24
    31e8:	99 1f       	adc	r25, r25
    31ea:	5a 95       	dec	r21
    31ec:	a9 f7       	brne	.-22     	; 0x31d8 <__udivmodhi4_loop>
    31ee:	80 95       	com	r24
    31f0:	90 95       	com	r25
    31f2:	bc 01       	movw	r22, r24
    31f4:	cd 01       	movw	r24, r26
    31f6:	08 95       	ret

000031f8 <__prologue_saves__>:
    31f8:	2f 92       	push	r2
    31fa:	3f 92       	push	r3
    31fc:	4f 92       	push	r4
    31fe:	5f 92       	push	r5
    3200:	6f 92       	push	r6
    3202:	7f 92       	push	r7
    3204:	8f 92       	push	r8
    3206:	9f 92       	push	r9
    3208:	af 92       	push	r10
    320a:	bf 92       	push	r11
    320c:	cf 92       	push	r12
    320e:	df 92       	push	r13
    3210:	ef 92       	push	r14
    3212:	ff 92       	push	r15
    3214:	0f 93       	push	r16
    3216:	1f 93       	push	r17
    3218:	cf 93       	push	r28
    321a:	df 93       	push	r29
    321c:	cd b7       	in	r28, 0x3d	; 61
    321e:	de b7       	in	r29, 0x3e	; 62
    3220:	ca 1b       	sub	r28, r26
    3222:	db 0b       	sbc	r29, r27
    3224:	0f b6       	in	r0, 0x3f	; 63
    3226:	f8 94       	cli
    3228:	de bf       	out	0x3e, r29	; 62
    322a:	0f be       	out	0x3f, r0	; 63
    322c:	cd bf       	out	0x3d, r28	; 61
    322e:	09 94       	ijmp

00003230 <__epilogue_restores__>:
    3230:	2a 88       	ldd	r2, Y+18	; 0x12
    3232:	39 88       	ldd	r3, Y+17	; 0x11
    3234:	48 88       	ldd	r4, Y+16	; 0x10
    3236:	5f 84       	ldd	r5, Y+15	; 0x0f
    3238:	6e 84       	ldd	r6, Y+14	; 0x0e
    323a:	7d 84       	ldd	r7, Y+13	; 0x0d
    323c:	8c 84       	ldd	r8, Y+12	; 0x0c
    323e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3240:	aa 84       	ldd	r10, Y+10	; 0x0a
    3242:	b9 84       	ldd	r11, Y+9	; 0x09
    3244:	c8 84       	ldd	r12, Y+8	; 0x08
    3246:	df 80       	ldd	r13, Y+7	; 0x07
    3248:	ee 80       	ldd	r14, Y+6	; 0x06
    324a:	fd 80       	ldd	r15, Y+5	; 0x05
    324c:	0c 81       	ldd	r16, Y+4	; 0x04
    324e:	1b 81       	ldd	r17, Y+3	; 0x03
    3250:	aa 81       	ldd	r26, Y+2	; 0x02
    3252:	b9 81       	ldd	r27, Y+1	; 0x01
    3254:	ce 0f       	add	r28, r30
    3256:	d1 1d       	adc	r29, r1
    3258:	0f b6       	in	r0, 0x3f	; 63
    325a:	f8 94       	cli
    325c:	de bf       	out	0x3e, r29	; 62
    325e:	0f be       	out	0x3f, r0	; 63
    3260:	cd bf       	out	0x3d, r28	; 61
    3262:	ed 01       	movw	r28, r26
    3264:	08 95       	ret

00003266 <_exit>:
    3266:	f8 94       	cli

00003268 <__stop_program>:
    3268:	ff cf       	rjmp	.-2      	; 0x3268 <__stop_program>
